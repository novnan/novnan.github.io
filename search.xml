<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo版本升级指南</title>
    <url>/Hexo/update_hexo/</url>
    <content><![CDATA[<p>Hexo 升级比较简单，老方法 <code>npm-check</code>、<code>npm-upgrade</code>、<code>npm-update</code> 一键三连。按以下顺序逐步执行完成后，Hexo 版本及系统插件均会升级到最新。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//以下指令均在Hexo目录下操作，先定位到Hexo目录</span><br><span class="line">//查看当前版本，判断是否需要升级</span><br><span class="line">&gt; hexo version</span><br><span class="line"></span><br><span class="line">//全局升级hexo-cli</span><br><span class="line">&gt; npm i hexo-cli -g</span><br><span class="line"></span><br><span class="line">//再次查看版本，看hexo-cli是否升级成功</span><br><span class="line">&gt; hexo version</span><br><span class="line"></span><br><span class="line">//安装npm-check，若已安装可以跳过</span><br><span class="line">&gt; npm install -g npm-check</span><br><span class="line"></span><br><span class="line">//检查系统插件是否需要升级</span><br><span class="line">&gt; npm-check</span><br><span class="line"></span><br><span class="line">//安装npm-upgrade，若已安装可以跳过</span><br><span class="line">&gt; npm install -g npm-upgrade</span><br><span class="line"></span><br><span class="line">//更新package.json</span><br><span class="line">&gt; npm-upgrade</span><br><span class="line"></span><br><span class="line">//更新全局插件</span><br><span class="line">&gt; npm update -g</span><br><span class="line"></span><br><span class="line">//更新系统插件</span><br><span class="line">&gt; npm update --save</span><br><span class="line"></span><br><span class="line">//再次查看版本，判断是否升级成功</span><br><span class="line">&gt; hexo version</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>让 Hexo NexT 支持 emoji 表情</title>
    <url>/Hexo/emojis-for-hexo-next/</url>
    <content><![CDATA[<p>将 markdown 转化为 html 的转化器叫做 markdown 渲染器。</p>
<p>在 Hexo 中默认的 markdown 渲染器是 <code>hexo-renderer-marked</code> ，这个渲染器是不支持 emoji 表情的。</p>
<p>在 NexT 的 <a href="https://github.com/iissnan/hexo-theme-next/issues/390">issue</a> 上有推荐使用 <a href="https://github.com/sergiolepore/hexo-tag-emojis">hexo-tag-emojis</a> 这个插件来支持 emoji 表情，但可惜的是这个插件已经不再维护，已经不支持 <code>Hexo v3+</code> 了。还好在 Hexo 的 <a href="https://hexo.io/plugins/">plugins</a> 页，我们找到了另外一个 emoji 插件 <a href="https://github.com/crimx/hexo-filter-github-emojis">hexo-filter-github-emojis</a>。</p>
<p>下面我们就来实现 Hexo NexT 对 emoji 的支持。</p>
<h2 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h2><div class="note info"><p>Hexo 3.3.9<br>NexT 5.1.2</p>
</div>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-filter-github-emojis --save</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>打开 <code>站点配置文件</code>，添加以下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">githubEmojis:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">className:</span> <span class="string">github-emoji</span></span><br><span class="line">  <span class="attr">unicode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">styles:</span></span><br><span class="line">  <span class="attr">localEmojis:</span></span><br></pre></td></tr></table></figure>

<p>具体的每个配置项含义可以看插件的<a href="https://github.com/crimx/hexo-filter-github-emojis">文档</a>。</p>
<span id="more"></span>

<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ol>
<li>在 <a href="https://www.webpagefx.com/tools/emoji-cheat-sheet/">Emoji Cheat Sheet</a> 中找到你想要的表情，然后点击即可复制。</li>
<li>使用方法和 GitHub 一样，比如你想发一个笑脸 😊 直接输入笑脸对应的 emoji 编码 <code>:smile：</code> 就可以。</li>
<li>默认配置下是使用图片表情，如果需要使用 Unicode 表情，可以将上面配置中的 <code>unicode</code> 设置为 <code>true</code>，就会渲染如 😄 😏 😌</li>
</ol>
<h2 id="兼容-Hexo-NexT-处理"><a href="#兼容-Hexo-NexT-处理" class="headerlink" title="兼容 Hexo NexT 处理"></a>兼容 Hexo NexT 处理</h2><p>hexo NexT 使用 <code>FancyBox</code> 这个图片插件，在 <code>themes/next/source/js/src/utils.js</code> 中：</p>
<p><img src="/images/Hexo/emojis-for-hexo-next/bd9f206bgy1fjlw5misekj21320sq77a.png"></p>
<p>看红框中的代码可以知道在文章中 <code>img</code> 标签没有被 <code>a</code> 标签包含时，会加上 <code>a</code> 标签，所以在渲染 emoji 表情时，会被自动加上 <code>a</code> 标签。</p>
<p><img src="/images/Hexo/emojis-for-hexo-next/bd9f206bgy1fjlwogzvn4j21m00p746w.png"></p>
<p>这样就导致渲染错误。我们修改 <code>themes/next/layout/_partials/head.swig</code>：</p>
<figure class="highlight twig"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">id</span>=<span class="string">&quot;hexo.configurations&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> <span class="title class_">NexT</span> = <span class="variable language_">window</span>.<span class="property">NexT</span> || &#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> <span class="variable constant_">CONFIG</span> = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">root</span>: <span class="string">&#x27;</span></span></span><span class="template-variable">&#123;&#123; theme.root &#125;&#125;</span><span class="language-xml">&#x27;,</span></span><br><span class="line"><span class="language-xml">    scheme: &#x27;</span><span class="template-variable">&#123;&#123; theme.scheme &#125;&#125;</span><span class="language-xml">&#x27;,</span></span><br><span class="line"><span class="language-xml">    sidebar: </span><span class="template-variable">&#123;&#123; theme.sidebar | json_encode &#125;&#125;</span><span class="language-xml">,</span></span><br><span class="line"><span class="language-xml">    fancybox: </span><span class="template-variable">&#123;&#123; theme.fancybox &#125;&#125;</span><span class="language-xml">,</span></span><br><span class="line"><span class="language-xml">    tabs: </span><span class="template-variable">&#123;&#123; theme.tabs.enable &#125;&#125;</span><span class="language-xml">,</span></span><br><span class="line"><span class="language-xml">    motion: </span><span class="template-variable">&#123;&#123; theme.use_motion &#125;&#125;</span><span class="language-xml">,</span></span><br><span class="line"><span class="language-xml">    duoshuo: &#123;</span></span><br><span class="line"><span class="language-xml">      userId: &#x27;</span><span class="template-variable">&#123;&#123; theme.duoshuo_info.user_id | default() &#125;&#125;</span><span class="language-xml">&#x27;,</span></span><br><span class="line"><span class="language-xml">      author: &#x27;</span><span class="template-variable">&#123;&#123; theme.duoshuo_info.admin_nickname | default(__(<span class="string">&#x27;author&#x27;</span>))&#125;&#125;</span><span class="language-xml">&#x27;</span></span><br><span class="line"><span class="language-xml">    &#125;,</span></span><br><span class="line"><span class="language-xml">    algolia: &#123;</span></span><br><span class="line"><span class="language-xml">      applicationID: &#x27;</span><span class="template-variable">&#123;&#123; theme.algolia.applicationID &#125;&#125;</span><span class="language-xml">&#x27;,</span></span><br><span class="line"><span class="language-xml">      apiKey: &#x27;</span><span class="template-variable">&#123;&#123; theme.algolia.apiKey &#125;&#125;</span><span class="language-xml">&#x27;,</span></span><br><span class="line"><span class="language-xml">      indexName: &#x27;</span><span class="template-variable">&#123;&#123; theme.algolia.indexName &#125;&#125;</span><span class="language-xml">&#x27;,</span></span><br><span class="line"><span class="language-xml">      hits: </span><span class="template-variable">&#123;&#123; theme.algolia_search.hits | json_encode &#125;&#125;</span><span class="language-xml">,</span></span><br><span class="line"><span class="language-xml">      labels: </span><span class="template-variable">&#123;&#123; theme.algolia_search.labels | json_encode &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    &#125;,</span></span><br><span class="line"><span class="language-xml">    </span><span class="comment">&#123;# ↓ 在这里修改，其他未动 ↓ #&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="comment">&#123;# 添加 emojis 参数 #&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    emojis: &#123;</span></span><br><span class="line"><span class="language-xml">      className: &#x27;</span><span class="template-variable">&#123;&#123; config.githubEmojis.className | default(<span class="string">&#x27;github-emoji&#x27;</span>) &#125;&#125;</span><span class="language-xml">&#x27;</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">  &#125;;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>修改 <code>themes/next/source/js/src/utils.js</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意看 CONFIG.emojis.className 那一行，其他未动</span></span><br><span class="line">$(<span class="string">&#x27;.content img&#x27;</span>)</span><br><span class="line">  .<span class="title function_">not</span>(<span class="string">&#x27;[hidden]&#x27;</span>)</span><br><span class="line">  .<span class="title function_">not</span>(<span class="string">&#x27;.group-picture img, .post-gallery img, img.&#x27;</span> + <span class="variable constant_">CONFIG</span>.<span class="property">emojis</span>.<span class="property">className</span>)</span><br><span class="line">  .<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> $image = $(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="keyword">var</span> imageTitle = $image.<span class="title function_">attr</span>(<span class="string">&#x27;title&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> $imageWrapLink = $image.<span class="title function_">parent</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($imageWrapLink.<span class="title function_">size</span>() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> imageLink = ($image.<span class="title function_">attr</span>(<span class="string">&#x27;data-original&#x27;</span>)) ? <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-original&#x27;</span>) : <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;src&#x27;</span>);</span><br><span class="line">      $imageWrapLink = $image.<span class="title function_">wrap</span>(<span class="string">&#x27;&lt;a href=&quot;&#x27;</span> + imageLink + <span class="string">&#x27;&quot;&gt;&lt;/a&gt;&#x27;</span>).<span class="title function_">parent</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $imageWrapLink.<span class="title function_">addClass</span>(<span class="string">&#x27;fancybox fancybox.image&#x27;</span>);</span><br><span class="line">    $imageWrapLink.<span class="title function_">attr</span>(<span class="string">&#x27;rel&#x27;</span>, <span class="string">&#x27;group&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (imageTitle) &#123;</span><br><span class="line">      $imageWrapLink.<span class="title function_">append</span>(<span class="string">&#x27;&lt;p class=&quot;image-caption&quot;&gt;&#x27;</span> + imageTitle + <span class="string">&#x27;&lt;/p&gt;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//make sure img title tag will show correctly in fancybox</span></span><br><span class="line">      $imageWrapLink.<span class="title function_">attr</span>(<span class="string">&#x27;title&#x27;</span>, imageTitle);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;.fancybox&#x27;</span>).<span class="title function_">fancybox</span>(&#123;</span><br><span class="line">  <span class="attr">helpers</span>: &#123;</span><br><span class="line">    <span class="attr">overlay</span>: &#123;</span><br><span class="line">      <span class="attr">locked</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这样修改完就全部显示正常了。</p>
<h2 id="最后一点点改进"><a href="#最后一点点改进" class="headerlink" title="最后一点点改进"></a>最后一点点改进</h2><p>图片 emoji 表情的高宽都是固定设定为 20，看起来太小了，所以我们需要自定义一下样式，但是自定义样式出现一个问题。</p>
<p>在 <code>站点配置文件</code> 中，我们配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">githubEmojis:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">className:</span> <span class="string">github-emoji</span></span><br><span class="line">  <span class="attr">unicode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">styles:</span></span><br><span class="line">  <span class="attr">localEmojis:</span></span><br></pre></td></tr></table></figure>

<p>我们看到 <code>className</code> 的值为 <code>github-emoji</code>，这个值是在渲染 emoji 图片表情时，<code>img</code> 标签上的 <code>class</code>，如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;github-emoji&quot;</span> <span class="attr">title</span>=<span class="string">&quot;smile&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;smile&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png?v7&quot;</span> <span class="attr">height</span>=<span class="string">&quot;20&quot;</span> <span class="attr">width</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个值是可以动态配置的，所以我们写样式的就必须动态的去获取 <code>className</code> 的值。</p>
<p>我们需要在 <code>themes/next/source/css/_variables/base.styl</code> 定义一个变量去获取 <code>className</code> 的值，<code>*.styl</code> 文件是使用 <a href="https://github.com/hexojs/hexo-renderer-stylus">hexo-renderer-stylus</a> 插件，这个插件只有 <code>hexo-config</code> 这个方法去获取 <code>主题配置文件</code> 中的值，但是我们的 <code>className</code> 是写在 <code>站点配置文件</code> 中，是没办法获取到的。</p>
<p>还好在这个 <a href="https://github.com/hexojs/hexo-renderer-stylus/issues/11">issue</a> 有说到一个解决办法，所以我们替换 <code>hexo-renderer-stylus</code> 插件 ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm un hexo-renderer-stylus --save</span><br><span class="line">$ npm i hexo-renderer-stylus-plus --save</span><br></pre></td></tr></table></figure>

<p>就可以在 <code>themes/next/source/css/_variables/base.styl</code> 中使用 <code>hexo-site-config</code> 方法获取 <code>站点配置文件</code> 中的值，我们添加：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Github emojis class name</span></span><br><span class="line"><span class="comment">// --------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">get_emoji_class</span><span class="params">()</span></span> &#123;</span><br><span class="line">  emoji_class = <span class="built_in">hexo-site-config</span>(<span class="string">&#x27;githubEmojis.className&#x27;</span>)</span><br><span class="line">  return emoji_class ? emoji_class : <span class="string">&#x27;github-emoji&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$github</span>-emojis-class-name   = <span class="built_in">get_emoji_class</span>()</span><br></pre></td></tr></table></figure>

<p>最后在自定义样式文件 <code>themes/next/source/css/_custom/custom.styl</code> 中添加：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span>.&#123;<span class="variable">$github</span>-emojis-class-name&#125; &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1.7em</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1.7em</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: -<span class="number">0.4em</span>;</span><br><span class="line">  <span class="attribute">border</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在一切完美了。Enjoy it！✨</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>emoji</tag>
      </tags>
  </entry>
  <entry>
    <title>将空目录添加至 Git 版本库</title>
    <url>/Git/add-an-empty-directory-to-a-git-repository/</url>
    <content><![CDATA[<p>git 没有跟踪空目录，所以需要跟踪那么就需要添加文件，就是在目录下新建一个 <code>.gitkeep</code> 文件（文件名其实随意，不过常见的是 <code>.gitkeep</code> 和 <code>.keep</code>）方法如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -type d -empty -exec touch &#123;&#125;/.gitkeep \;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言中什么时候使用指针</title>
    <url>/GO/Go%E8%AF%AD%E8%A8%80%E4%B8%AD%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BD%BF%E7%94%A8%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<p><strong>说明：</strong>理解本文的前提是你对Go语言已有一定的基础了解。</p>
<p><strong>什么是指针：</strong>即一个指针变量指向一个值的内存地址。</p>
<p><strong>使用值类型和指针类型的区别</strong><br>首先，我们来看一个计算面积的代码，如下所示。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Rect <span class="keyword">struct</span> &#123;                               <span class="comment">//定义一个结构体</span></span><br><span class="line">    width  <span class="type">float64</span></span><br><span class="line">    length <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rect Rect)</span></span> area() <span class="type">float64</span> &#123;               <span class="comment">//定义一个方法，按值传递</span></span><br><span class="line">	<span class="keyword">return</span> rect.width * rect.length</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rect *Rect)</span></span> area1() <span class="type">float64</span> &#123;            <span class="comment">//定义一个方法，按指针传递</span></span><br><span class="line">    rect.width *= <span class="number">2</span></span><br><span class="line">    rect.length *= <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> rect.width * rect.length</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> rect = <span class="built_in">new</span>(Rect)     <span class="comment">//使用new函数创建一个结构体指针rect，也就是说rect的类型是*Rect</span></span><br><span class="line">    rect.width = <span class="number">100</span></span><br><span class="line">    rect.length = <span class="number">200</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Width:&quot;</span>, rect.width, <span class="string">&quot;Length:&quot;</span>, rect.length,<span class="string">&quot;Area:&quot;</span>, rect.area())  <span class="comment">//通过结构体指针类型的变量调用area()方法</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Width:&quot;</span>, rect.width, <span class="string">&quot;Length:&quot;</span>, rect.length,<span class="string">&quot;Area:&quot;</span>, rect.area1())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Go语言中，默认是按值传递。当一个变量当作参数传递的时候，会创建一个变量的副本，然后传递给函数或者方法，你可以看到这个副本的地址和变量的地址是不一样的。当变量当做指针被传递的时候，一个新的指针被创建，它指向变量同样的内存地址，所以你可以将这个指针看成原始变量指针的副本。</p>
<span id="more"></span>

<p><strong>故此</strong><br>1.是否使用结构体指针，取决于是否要在函数内部改变传递进来的参数的值。如果你的struct足够大，使用指针可以加快效率。如果不使用指针，在函数内部则无法修改struct中的值。<br>2.结构体赋值默认是按值传递，你要改变原来的那个值，要使用指针（即如果你要修改对象本身，那就要传指针，否则修改的是副本）。</p>
<p>再来比较下使用指针修改原始变量的值。代码示例</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span>(</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123; </span><br><span class="line">    i := <span class="number">1</span>      <span class="comment">// i的类型是int型,值为1</span></span><br><span class="line">    <span class="keyword">var</span> p *<span class="type">int</span>     <span class="comment">// p 的类型是int型的指针</span></span><br><span class="line">    p=&amp;i         <span class="comment">// p 的值为i的内存地址</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;i=%d;p=%d;*p=%d\n&quot;</span>,i,p,*p)</span><br><span class="line"> </span><br><span class="line">    *p=<span class="number">2</span>    <span class="comment">// *p 的值为i变量地址的指针 ，这行代码也就等价于 i := 2，使用指针修改变量本身</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;i=%d;p=%d;*p=%d\n&quot;</span>,i,p,*p)</span><br><span class="line"> </span><br><span class="line">    i := <span class="number">3</span>     <span class="comment">// 验证想法</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;i=%d;p=%d;*p=%d\n&quot;</span>,i,p,*p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上输出结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i=1;p=824633802904;*p=1</span><br><span class="line">i=2;p=824633802904;*p=2</span><br><span class="line">i=3;p=824633802904;*p=3</span><br></pre></td></tr></table></figure>

<p><strong>向函数传递指针参数</strong><br>Go 语言允许向函数传递指针，只需要在函数定义的参数上设置为指针类型即可。以下实例演示了如何向函数传递指针，并在函数调用后修改函数内的值，：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">/* 定义局部变量 */</span></span><br><span class="line">   <span class="keyword">var</span> a <span class="type">int</span> = <span class="number">100</span></span><br><span class="line">   <span class="keyword">var</span> b <span class="type">int</span>= <span class="number">200</span></span><br><span class="line"></span><br><span class="line">   fmt.Printf(<span class="string">&quot;交换前 a 的值 : %d\n&quot;</span>, a )</span><br><span class="line">   fmt.Printf(<span class="string">&quot;交换前 b 的值 : %d\n&quot;</span>, b )</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 调用函数用于交换值</span></span><br><span class="line"><span class="comment">   * &amp;a 指向 a 变量的地址</span></span><br><span class="line"><span class="comment">   * &amp;b 指向 b 变量的地址</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   swap(&amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line">   fmt.Printf(<span class="string">&quot;交换后 a 的值 : %d\n&quot;</span>, a )</span><br><span class="line">   fmt.Printf(<span class="string">&quot;交换后 b 的值 : %d\n&quot;</span>, b )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x *<span class="type">int</span>, y *<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> temp <span class="type">int</span></span><br><span class="line">   temp = *x    <span class="comment">/* 保存 x 地址的值 */</span></span><br><span class="line">   *x = *y      <span class="comment">/* 将 y 赋值给 x */</span></span><br><span class="line">   *y = temp    <span class="comment">/* 将 temp 赋值给 y */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">交换前 a 的值 : 100</span><br><span class="line">交换前 b 的值 : 200</span><br><span class="line">交换后 a 的值 : 200</span><br><span class="line">交换后 b 的值 : 100</span><br></pre></td></tr></table></figure>

<p><strong>go什么情况下使用指针</strong></p>
<ul>
<li>推荐在方法上使用指针（前提是这个类型不是 map、slice 等引用类型）</li>
<li>当结构体较大的时候使用指针会更高效，可以避免内存拷贝，“结构较大” 到底多大才算大可能需要自己或团队衡量，如超过 5 个字段或者根据结构体内存占用来计算</li>
<li>如果要修改结构体内部的数据或状态必须使用指针</li>
<li>如果方法的receiver是map、slice 、channel等引用类型不要使用指针</li>
<li>小数据类型如 bool、int 等没必要使用指针传递</li>
<li>如果该函数会修改receiver或变量等，使用指针</li>
</ul>
]]></content>
      <categories>
        <category>GO</category>
      </categories>
      <tags>
        <tag>GO</tag>
      </tags>
  </entry>
  <entry>
    <title>禁止 Git 自动保存账号密码</title>
    <url>/Git/donot-make-git-remember-my-credentials/</url>
    <content><![CDATA[<h2 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h2><div class="note info"><p>git version 2.14.1.windows.1</p>
</div>

<p>默认情况下 git 使用 https 在输入账号密码后会保存到 windows 凭据下。</p>
<h2 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global -l</span><br></pre></td></tr></table></figure>

<p>可以看到类似如下的信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">core.symlinks=false</span><br><span class="line">core.autocrlf=input</span><br><span class="line">core.fscache=true</span><br><span class="line">color.diff=auto</span><br><span class="line">color.status=auto</span><br><span class="line">color.branch=auto</span><br><span class="line">color.interactive=true</span><br><span class="line">help.format=html</span><br><span class="line">rebase.autosquash=true</span><br><span class="line">http.sslcainfo=D:/Program Files (x86)/Git/mingw64/ssl/certs/ca-bundle.crt</span><br><span class="line">diff.astextplain.textconv=astextplain</span><br><span class="line">filter.lfs.clean=git-lfs clean -- %f</span><br><span class="line">filter.lfs.smudge=git-lfs smudge -- %f</span><br><span class="line">filter.lfs.required=true</span><br><span class="line">filter.lfs.process=git-lfs filter-process</span><br><span class="line">credential.helper=manager  // 重点看这个</span><br></pre></td></tr></table></figure>

<h2 id="禁止自动保存密码"><a href="#禁止自动保存密码" class="headerlink" title="禁止自动保存密码"></a>禁止自动保存密码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global --<span class="built_in">unset</span> credential.helper</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">$ git config --system --<span class="built_in">unset</span> credential.helper</span><br></pre></td></tr></table></figure>

<h2 id="恢复自动保存密码"><a href="#恢复自动保存密码" class="headerlink" title="恢复自动保存密码"></a>恢复自动保存密码</h2><p>删除掉保存密码的配置就行。如果需要保存的话，可以使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global credential.helper manager</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>宝塔Linux面板小内存服务器编译安装 MySQL 8.0</title>
    <url>/Linux/bt-panel-install-mysql%208.0-on-low-memory-server/</url>
    <content><![CDATA[<div class="note primary"><p>如果 1G 内存要装 MySQL 5.7，这篇文章也是适用的。</p>
</div>

<div class="note info"><p>宝塔 6.9.8</p>
</div>

<p>宝塔面板在编译安装 MySQL 8.0 时，要求 4个核心的 CPU，8G 内存，实在是太高了，小站长的服务器一般都不会有如此高的配置。这时候，我们要使用 MySQL 8.0，可以选择极速安装，或者，如果一定要自己编译的话，可以使用命令行来跳过配置检测。不过，MySQL 编译过程中，需要 5G 以上的内存，以及 9G 以上的数据盘空间。如果我们的内存实在不够，可以创建 swap 虚拟内存。</p>
<p>在宝塔面板里的 <strong>Linux 工具箱</strong>(如果没有可以去软件商店里面安装) 修改 Swap&#x2F;虚拟内存，输入 0，然后手动设置 swap 到系统盘：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fallocate -l 4G /swap</span><br><span class="line"><span class="built_in">chown</span> root:root /swap </span><br><span class="line"><span class="built_in">chmod</span> 0600 /swap</span><br><span class="line">mkswap /swap</span><br><span class="line">swapon /swap</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;/swap    swap    swap    defaults    0 0&#x27;</span> &gt;&gt; /etc/fstab</span><br></pre></td></tr></table></figure>

<p>查看一下 swap 是否开启成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">swapon -s</span><br><span class="line"></span><br><span class="line">Filename                                Type            Size    Used    Priority</span><br><span class="line">/swap                                   file    4194300 9480    -2</span><br></pre></td></tr></table></figure>

<p>现在内存有 5933M，应该够了，我们还要检查一下，&#x2F;www 所在的磁盘够不够，建议剩余空间不小于 10G。如果不够，把不需要的文件删一下，或者扩容磁盘，这里不赘述。</p>
<span id="more"></span>

<p>现在磁盘也够了，再检查一下你的临时文件夹 &#x2F;tmp，一般来说，这个路径在系统盘，共享你系统盘的空间。不过，某些服务器的 &#x2F;tmp 是单独挂载的，空间也非常小，这个时候，要把它也增大。比如，我们可以同样调整到 10G。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;tmpfs   /tmp  tmpfs   defaults,size=10G    0 0&#x27;</span> &gt;&gt; /etc/fstab</span><br></pre></td></tr></table></figure>

<p>重启系统，检查一下各路径的大小：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br><span class="line"></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/vda1        20G  7.2G   12G  39% /</span><br><span class="line">devtmpfs        909M     0  909M   0% /dev</span><br><span class="line">tmpfs           919M  5.9M  914M   1% /dev/shm</span><br><span class="line">tmpfs           919M  584K  919M   1% /run</span><br><span class="line">tmpfs           919M     0  919M   0% /sys/fs/cgroup</span><br><span class="line">/dev/vdb1        20G  6.3G   13G  34% /www</span><br><span class="line">tmpfs            10G  336K   10G   1% /tmp</span><br><span class="line">tmpfs           184M     0  184M   0% /run/user/0</span><br></pre></td></tr></table></figure>

<p>这回肯定够用了。</p>
<p>由于服务器配置较低，编译过程耗时可能超过两小时，为了防止意外断网停止编译，我们先来创建一个新的 screen：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install screen -y &amp;&amp; screen -S mysql</span><br></pre></td></tr></table></figure>

<p>现在窗口空白了，其实这是一个新的窗口。</p>
<p>运行以下命令，编译安装 MySQL 8.0：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /www/server/panel/install</span><br><span class="line">bash mysql.sh install 8.0</span><br></pre></td></tr></table></figure>

<p>慢慢等，实在等不下去的时候，新建一个终端会话，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen -d mysql</span><br></pre></td></tr></table></figure>

<p>让它自己慢慢装，大概两小时后，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen -r mysql</span><br></pre></td></tr></table></figure>
<p>看到 done，就成功了。</p>
<hr>
<p>今天发现一个后遗症，宝塔数据库工具页面空白，不显示数据表。请宝塔开发者排查了一下，说是 mysqldb 库内部编码转换出错，于是强制重装 mysql-python</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install mysql-python --force</span><br></pre></td></tr></table></figure>

<p>结果遇到报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_mysql.c:44:23: fatal error: my_config.h: No such file or directory</span><br></pre></td></tr></table></figure>

<p>搜索得到的解决方案是安装 mysql-devel，不过我这边之前已经安装过了，于是尝试重新安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum reinstall mysql-devel -y &amp;&amp; pip install mysql-python --force</span><br></pre></td></tr></table></figure>

<p>这次顺利完成。</p>
<p>不过，问题仍然未解决。无奈之下，打算重启面板试试。不过转念一想，修复面板也会自动重启，顺便还能修复其他问题，比如宝塔本周修复的一些已知问题。于是尝试修复面板，修复完成后，问题解决。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>BT Panel</tag>
        <tag>mysql 8.0</tag>
      </tags>
  </entry>
  <entry>
    <title>本博客当前使用的插件总结</title>
    <url>/Hexo/plugins-used-in-this-blog/</url>
    <content><![CDATA[<h2 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h2><div class="note info"><p>Hexo 5.2.0<br>NexT 8.0.1</p>
</div>

<p>这几天将博客主题从 NexT-7.7.0 升级到了 8.0.1，在重新安装插件的时候顺便记录了本博客当前使用的插件</p>
<h2 id="鼠标点击特效"><a href="#鼠标点击特效" class="headerlink" title="鼠标点击特效"></a>鼠标点击特效</h2><p>下面是四个比较常用的鼠标点击特效脚本，我们可以把它们放置在 <code>source/js/cursor/</code> 目录下：</p>
<ul>
<li>礼花特效代码：</li>
</ul>
<span id="more"></span>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">&#123; origin, speed, color, angle, context &#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">origin</span> = origin</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">position</span> = &#123; ...<span class="variable language_">this</span>.<span class="property">origin</span> &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">speed</span> = speed</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">angle</span> = angle</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">context</span> = context</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">renderCount</span> = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">fillStyle</span> = <span class="variable language_">this</span>.<span class="property">color</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">beginPath</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">arc</span>(<span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">x</span>, <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">y</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">fill</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">move</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">x</span> = (<span class="title class_">Math</span>.<span class="title function_">sin</span>(<span class="variable language_">this</span>.<span class="property">angle</span>) * <span class="variable language_">this</span>.<span class="property">speed</span>) + <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">x</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">y</span> = (<span class="title class_">Math</span>.<span class="title function_">cos</span>(<span class="variable language_">this</span>.<span class="property">angle</span>) * <span class="variable language_">this</span>.<span class="property">speed</span>) + <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">y</span> + (<span class="variable language_">this</span>.<span class="property">renderCount</span> * <span class="number">0.3</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">renderCount</span>++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Boom</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span> (&#123; origin, context, circleCount = <span class="number">16</span>, area &#125;) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">origin</span> = origin</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">context</span> = context</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">circleCount</span> = circleCount</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">area</span> = area</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stop</span> = <span class="literal">false</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">circles</span> = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">randomArray</span>(<span class="params">range</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> length = range.<span class="property">length</span></span><br><span class="line">    <span class="keyword">const</span> randomIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>(length * <span class="title class_">Math</span>.<span class="title function_">random</span>())</span><br><span class="line">    <span class="keyword">return</span> range[randomIndex]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">randomColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> range = [<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;#&#x27;</span> + <span class="variable language_">this</span>.<span class="title function_">randomArray</span>(range) + <span class="variable language_">this</span>.<span class="title function_">randomArray</span>(range) + <span class="variable language_">this</span>.<span class="title function_">randomArray</span>(range) + <span class="variable language_">this</span>.<span class="title function_">randomArray</span>(range) + <span class="variable language_">this</span>.<span class="title function_">randomArray</span>(range) + <span class="variable language_">this</span>.<span class="title function_">randomArray</span>(range)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">randomRange</span>(<span class="params">start, end</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (end - start) * <span class="title class_">Math</span>.<span class="title function_">random</span>() + start</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">circleCount</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> circle = <span class="keyword">new</span> <span class="title class_">Circle</span>(&#123;</span><br><span class="line">        <span class="attr">context</span>: <span class="variable language_">this</span>.<span class="property">context</span>,</span><br><span class="line">        <span class="attr">origin</span>: <span class="variable language_">this</span>.<span class="property">origin</span>,</span><br><span class="line">        <span class="attr">color</span>: <span class="variable language_">this</span>.<span class="title function_">randomColor</span>(),</span><br><span class="line">        <span class="attr">angle</span>: <span class="variable language_">this</span>.<span class="title function_">randomRange</span>(<span class="title class_">Math</span>.<span class="property">PI</span> - <span class="number">1</span>, <span class="title class_">Math</span>.<span class="property">PI</span> + <span class="number">1</span>),</span><br><span class="line">        <span class="attr">speed</span>: <span class="variable language_">this</span>.<span class="title function_">randomRange</span>(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">circles</span>.<span class="title function_">push</span>(circle)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">move</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">circles</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">circle, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (circle.<span class="property">position</span>.<span class="property">x</span> &gt; <span class="variable language_">this</span>.<span class="property">area</span>.<span class="property">width</span> || circle.<span class="property">position</span>.<span class="property">y</span> &gt; <span class="variable language_">this</span>.<span class="property">area</span>.<span class="property">height</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">circles</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      circle.<span class="title function_">move</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">circles</span>.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">stop</span> = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">circles</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">circle</span> =&gt;</span> circle.<span class="title function_">draw</span>())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CursorSpecialEffects</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">computerCanvas</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">renderCanvas</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">computerContext</span> = <span class="variable language_">this</span>.<span class="property">computerCanvas</span>.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">renderContext</span> = <span class="variable language_">this</span>.<span class="property">renderCanvas</span>.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">globalWidth</span> = <span class="variable language_">window</span>.<span class="property">innerWidth</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">globalHeight</span> = <span class="variable language_">window</span>.<span class="property">innerHeight</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">booms</span> = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">running</span> = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleMouseDown</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> boom = <span class="keyword">new</span> <span class="title class_">Boom</span>(&#123;</span><br><span class="line">      <span class="attr">origin</span>: &#123; <span class="attr">x</span>: e.<span class="property">clientX</span>, <span class="attr">y</span>: e.<span class="property">clientY</span> &#125;,</span><br><span class="line">      <span class="attr">context</span>: <span class="variable language_">this</span>.<span class="property">computerContext</span>,</span><br><span class="line">      <span class="attr">area</span>: &#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="variable language_">this</span>.<span class="property">globalWidth</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="variable language_">this</span>.<span class="property">globalHeight</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    boom.<span class="title function_">init</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">booms</span>.<span class="title function_">push</span>(boom)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">running</span> || <span class="variable language_">this</span>.<span class="title function_">run</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handlePageHide</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">booms</span> = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">running</span> = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> style = <span class="variable language_">this</span>.<span class="property">renderCanvas</span>.<span class="property">style</span></span><br><span class="line">    style.<span class="property">position</span> = <span class="string">&#x27;fixed&#x27;</span></span><br><span class="line">    style.<span class="property">top</span> = style.<span class="property">left</span> = <span class="number">0</span></span><br><span class="line">    style.<span class="property">zIndex</span> = <span class="string">&#x27;999999999999999999999999999999999999999999&#x27;</span></span><br><span class="line">    style.<span class="property">pointerEvents</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line"></span><br><span class="line">    style.<span class="property">width</span> = <span class="variable language_">this</span>.<span class="property">renderCanvas</span>.<span class="property">width</span> = <span class="variable language_">this</span>.<span class="property">computerCanvas</span>.<span class="property">width</span> = <span class="variable language_">this</span>.<span class="property">globalWidth</span></span><br><span class="line">    style.<span class="property">height</span> = <span class="variable language_">this</span>.<span class="property">renderCanvas</span>.<span class="property">height</span> = <span class="variable language_">this</span>.<span class="property">computerCanvas</span>.<span class="property">height</span> = <span class="variable language_">this</span>.<span class="property">globalHeight</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">append</span>(<span class="variable language_">this</span>.<span class="property">renderCanvas</span>)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousedown&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleMouseDown</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;pagehide&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handlePageHide</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">running</span> = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">booms</span>.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">running</span> = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(<span class="variable language_">this</span>.<span class="property">run</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">computerContext</span>.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">globalWidth</span>, <span class="variable language_">this</span>.<span class="property">globalHeight</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">renderContext</span>.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">globalWidth</span>, <span class="variable language_">this</span>.<span class="property">globalHeight</span>)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">booms</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">boom, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (boom.<span class="property">stop</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">booms</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      boom.<span class="title function_">move</span>()</span><br><span class="line">      boom.<span class="title function_">draw</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">renderContext</span>.<span class="title function_">drawImage</span>(<span class="variable language_">this</span>.<span class="property">computerCanvas</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">globalWidth</span>, <span class="variable language_">this</span>.<span class="property">globalHeight</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cursorSpecialEffects = <span class="keyword">new</span> <span class="title class_">CursorSpecialEffects</span>()</span><br><span class="line">cursorSpecialEffects.<span class="title function_">init</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li>爆炸特效代码：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;<span class="keyword">function</span> <span class="title function_">updateCoords</span>(<span class="params">e</span>)&#123;pointerX=(e.<span class="property">clientX</span>||e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientX</span>)-canvasEl.<span class="title function_">getBoundingClientRect</span>().<span class="property">left</span>,pointerY=e.<span class="property">clientY</span>||e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientY</span>-canvasEl.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span>&#125;<span class="keyword">function</span> <span class="title function_">setParticuleDirection</span>(<span class="params">e</span>)&#123;<span class="keyword">var</span> t=anime.<span class="title function_">random</span>(<span class="number">0</span>,<span class="number">360</span>)*<span class="title class_">Math</span>.<span class="property">PI</span>/<span class="number">180</span>,a=anime.<span class="title function_">random</span>(<span class="number">50</span>,<span class="number">180</span>),n=[-<span class="number">1</span>,<span class="number">1</span>][anime.<span class="title function_">random</span>(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.<span class="property">x</span>+n*<span class="title class_">Math</span>.<span class="title function_">cos</span>(t),<span class="attr">y</span>:e.<span class="property">y</span>+n*<span class="title class_">Math</span>.<span class="title function_">sin</span>(t)&#125;&#125;<span class="keyword">function</span> <span class="title function_">createParticule</span>(<span class="params">e,t</span>)&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.<span class="property">x</span>=e,a.<span class="property">y</span>=t,a.<span class="property">color</span>=colors[anime.<span class="title function_">random</span>(<span class="number">0</span>,colors.<span class="property">length</span>-<span class="number">1</span>)],a.<span class="property">radius</span>=anime.<span class="title function_">random</span>(<span class="number">16</span>,<span class="number">32</span>),a.<span class="property">endPos</span>=<span class="title function_">setParticuleDirection</span>(a),a.<span class="property">draw</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;ctx.<span class="title function_">beginPath</span>(),ctx.<span class="title function_">arc</span>(a.<span class="property">x</span>,a.<span class="property">y</span>,a.<span class="property">radius</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>,!<span class="number">0</span>),ctx.<span class="property">fillStyle</span>=a.<span class="property">color</span>,ctx.<span class="title function_">fill</span>()&#125;,a&#125;<span class="keyword">function</span> <span class="title function_">createCircle</span>(<span class="params">e,t</span>)&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.<span class="property">x</span>=e,a.<span class="property">y</span>=t,a.<span class="property">color</span>=<span class="string">&quot;#F00&quot;</span>,a.<span class="property">radius</span>=<span class="number">.1</span>,a.<span class="property">alpha</span>=<span class="number">.5</span>,a.<span class="property">lineWidth</span>=<span class="number">6</span>,a.<span class="property">draw</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;ctx.<span class="property">globalAlpha</span>=a.<span class="property">alpha</span>,ctx.<span class="title function_">beginPath</span>(),ctx.<span class="title function_">arc</span>(a.<span class="property">x</span>,a.<span class="property">y</span>,a.<span class="property">radius</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>,!<span class="number">0</span>),ctx.<span class="property">lineWidth</span>=a.<span class="property">lineWidth</span>,ctx.<span class="property">strokeStyle</span>=a.<span class="property">color</span>,ctx.<span class="title function_">stroke</span>(),ctx.<span class="property">globalAlpha</span>=<span class="number">1</span>&#125;,a&#125;<span class="keyword">function</span> <span class="title function_">renderParticule</span>(<span class="params">e</span>)&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.<span class="property">animatables</span>.<span class="property">length</span>;t++)e.<span class="property">animatables</span>[t].<span class="property">target</span>.<span class="title function_">draw</span>()&#125;<span class="keyword">function</span> <span class="title function_">animateParticules</span>(<span class="params">e,t</span>)&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=<span class="title function_">createCircle</span>(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)n.<span class="title function_">push</span>(<span class="title function_">createParticule</span>(e,t));anime.<span class="title function_">timeline</span>().<span class="title function_">add</span>(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="keyword">return</span> e.<span class="property">endPos</span>.<span class="property">x</span>&#125;,<span class="attr">y</span>:<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="keyword">return</span> e.<span class="property">endPos</span>.<span class="property">y</span>&#125;,<span class="attr">radius</span>:<span class="number">.1</span>,<span class="attr">duration</span>:anime.<span class="title function_">random</span>(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule&#125;).<span class="title function_">add</span>(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.<span class="title function_">random</span>(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">&quot;linear&quot;</span>,<span class="attr">duration</span>:anime.<span class="title function_">random</span>(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.<span class="title function_">random</span>(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">e,t</span>)&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">var</span> n=<span class="variable language_">this</span>,i=<span class="variable language_">arguments</span>;<span class="built_in">clearTimeout</span>(a),a=<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;e.<span class="title function_">apply</span>(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.fireworks&quot;</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">&quot;mousedown&quot;</span>,colors=[<span class="string">&quot;#FF1461&quot;</span>,<span class="string">&quot;#18FF92&quot;</span>,<span class="string">&quot;#5A87FF&quot;</span>,<span class="string">&quot;#FBF38C&quot;</span>],setCanvasSize=<span class="title function_">debounce</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;canvasEl.<span class="property">width</span>=<span class="number">2</span>*<span class="variable language_">window</span>.<span class="property">innerWidth</span>,canvasEl.<span class="property">height</span>=<span class="number">2</span>*<span class="variable language_">window</span>.<span class="property">innerHeight</span>,canvasEl.<span class="property">style</span>.<span class="property">width</span>=<span class="variable language_">window</span>.<span class="property">innerWidth</span>+<span class="string">&quot;px&quot;</span>,canvasEl.<span class="property">style</span>.<span class="property">height</span>=<span class="variable language_">window</span>.<span class="property">innerHeight</span>+<span class="string">&quot;px&quot;</span>,canvasEl.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>).<span class="title function_">scale</span>(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=<span class="title function_">anime</span>(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>,<span class="number">0</span>,canvasEl.<span class="property">width</span>,canvasEl.<span class="property">height</span>)&#125;&#125;);<span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(tap,<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="string">&quot;sidebar&quot;</span>!==e.<span class="property">target</span>.<span class="property">id</span>&amp;&amp;<span class="string">&quot;toggle-sidebar&quot;</span>!==e.<span class="property">target</span>.<span class="property">id</span>&amp;&amp;<span class="string">&quot;A&quot;</span>!==e.<span class="property">target</span>.<span class="property">nodeName</span>&amp;&amp;<span class="string">&quot;IMG&quot;</span>!==e.<span class="property">target</span>.<span class="property">nodeName</span>&amp;&amp;(render.<span class="title function_">play</span>(),<span class="title function_">updateCoords</span>(e),<span class="title function_">animateParticules</span>(pointerX,pointerY))&#125;,!<span class="number">1</span>),<span class="title function_">setCanvasSize</span>(),<span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>,setCanvasSize,!<span class="number">1</span>)&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>浮出爱心特效代码：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!<span class="keyword">function</span>(<span class="params">e,t,a</span>)&#123;<span class="keyword">function</span> <span class="title function_">n</span>(<span class="params"></span>)&#123;<span class="title function_">c</span>(<span class="string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>),<span class="title function_">o</span>(),<span class="title function_">r</span>()&#125;<span class="keyword">function</span> <span class="title function_">r</span>(<span class="params"></span>)&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.<span class="property">length</span>;e++)d[e].<span class="property">alpha</span>&lt;=<span class="number">0</span>?(t.<span class="property">body</span>.<span class="title function_">removeChild</span>(d[e].<span class="property">el</span>),d.<span class="title function_">splice</span>(e,<span class="number">1</span>)):(d[e].<span class="property">y</span>--,d[e].<span class="property">scale</span>+=<span class="number">.004</span>,d[e].<span class="property">alpha</span>-=<span class="number">.013</span>,d[e].<span class="property">el</span>.<span class="property">style</span>.<span class="property">cssText</span>=<span class="string">&quot;left:&quot;</span>+d[e].<span class="property">x</span>+<span class="string">&quot;px;top:&quot;</span>+d[e].<span class="property">y</span>+<span class="string">&quot;px;opacity:&quot;</span>+d[e].<span class="property">alpha</span>+<span class="string">&quot;;transform:scale(&quot;</span>+d[e].<span class="property">scale</span>+<span class="string">&quot;,&quot;</span>+d[e].<span class="property">scale</span>+<span class="string">&quot;) rotate(45deg);background:&quot;</span>+d[e].<span class="property">color</span>+<span class="string">&quot;;z-index:99999&quot;</span>);<span class="title function_">requestAnimationFrame</span>(r)&#125;<span class="keyword">function</span> <span class="title function_">o</span>(<span class="params"></span>)&#123;<span class="keyword">var</span> t=<span class="string">&quot;function&quot;</span>==<span class="keyword">typeof</span> e.<span class="property">onclick</span>&amp;&amp;e.<span class="property">onclick</span>;e.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;t&amp;&amp;<span class="title function_">t</span>(),<span class="title function_">i</span>(e)&#125;&#125;<span class="keyword">function</span> <span class="title function_">i</span>(<span class="params">e</span>)&#123;<span class="keyword">var</span> a=t.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);a.<span class="property">className</span>=<span class="string">&quot;heart&quot;</span>,d.<span class="title function_">push</span>(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.<span class="property">clientX</span>-<span class="number">5</span>,<span class="attr">y</span>:e.<span class="property">clientY</span>-<span class="number">5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:<span class="title function_">s</span>()&#125;),t.<span class="property">body</span>.<span class="title function_">appendChild</span>(a)&#125;<span class="keyword">function</span> <span class="title function_">c</span>(<span class="params">e</span>)&#123;<span class="keyword">var</span> a=t.<span class="title function_">createElement</span>(<span class="string">&quot;style&quot;</span>);a.<span class="property">type</span>=<span class="string">&quot;text/css&quot;</span>;<span class="keyword">try</span>&#123;a.<span class="title function_">appendChild</span>(t.<span class="title function_">createTextNode</span>(e))&#125;<span class="keyword">catch</span>(t)&#123;a.<span class="property">styleSheet</span>.<span class="property">cssText</span>=e&#125;t.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(a)&#125;<span class="keyword">function</span> <span class="title function_">s</span>(<span class="params"></span>)&#123;<span class="keyword">return</span><span class="string">&quot;rgb(&quot;</span>+~~(<span class="number">255</span>*<span class="title class_">Math</span>.<span class="title function_">random</span>())+<span class="string">&quot;,&quot;</span>+~~(<span class="number">255</span>*<span class="title class_">Math</span>.<span class="title function_">random</span>())+<span class="string">&quot;,&quot;</span>+~~(<span class="number">255</span>*<span class="title class_">Math</span>.<span class="title function_">random</span>())+<span class="string">&quot;)&quot;</span>&#125;<span class="keyword">var</span> d=[];e.<span class="property">requestAnimationFrame</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> e.<span class="property">requestAnimationFrame</span>||e.<span class="property">webkitRequestAnimationFrame</span>||e.<span class="property">mozRequestAnimationFrame</span>||e.<span class="property">oRequestAnimationFrame</span>||e.<span class="property">msRequestAnimationFrame</span>||<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="built_in">setTimeout</span>(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),<span class="title function_">n</span>()&#125;(<span class="variable language_">window</span>,<span class="variable language_">document</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>浮出文字特效代码：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a_idx = <span class="number">0</span>;</span><br><span class="line"><span class="title function_">jQuery</span>(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params">$</span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;body&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;富强&quot;</span>, <span class="string">&quot;民主&quot;</span>, <span class="string">&quot;文明&quot;</span>, <span class="string">&quot;和谐&quot;</span>, <span class="string">&quot;自由&quot;</span>, <span class="string">&quot;平等&quot;</span>, <span class="string">&quot;公正&quot;</span> ,<span class="string">&quot;法治&quot;</span>, <span class="string">&quot;爱国&quot;</span>, <span class="string">&quot;敬业&quot;</span>, <span class="string">&quot;诚信&quot;</span>, <span class="string">&quot;友善&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> $i = $(<span class="string">&quot;&lt;span/&gt;&quot;</span>).<span class="title function_">text</span>(a[a_idx]);</span><br><span class="line">        <span class="keyword">var</span> x = e.<span class="property">pageX</span>,</span><br><span class="line">            y = e.<span class="property">pageY</span>;</span><br><span class="line">        $i.<span class="title function_">css</span>(&#123;</span><br><span class="line">            <span class="string">&quot;z-index&quot;</span>: <span class="number">99999</span>,</span><br><span class="line">            <span class="string">&quot;top&quot;</span>: y - <span class="number">28</span>,</span><br><span class="line">            <span class="string">&quot;left&quot;</span>: x - a[a_idx].<span class="property">length</span> * <span class="number">8</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: <span class="string">&quot;absolute&quot;</span>,</span><br><span class="line">            <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ff7a45&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line">        $(<span class="string">&quot;body&quot;</span>).<span class="title function_">append</span>($i);</span><br><span class="line">        $i.<span class="title function_">animate</span>(&#123;</span><br><span class="line">            <span class="string">&quot;top&quot;</span>: y - <span class="number">180</span>,</span><br><span class="line">            <span class="string">&quot;opacity&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;, <span class="number">1500</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            $i.<span class="title function_">remove</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">        a_idx = (a_idx + <span class="number">1</span>) % a.<span class="property">length</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>然后我们在主题自定义布局文件 <code>source/_data/body-end.njk</code> 中添加以下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;# 鼠标点击特效 #&#125;</span><br><span class="line">&#123;% if theme.cursor_effect == &quot;fireworks&quot; %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;/js/cursor/fireworks.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% elseif theme.cursor_effect == &quot;explosion&quot; %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">&quot;fireworks&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;/js/cursor/explosion.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% elseif theme.cursor_effect == &quot;love&quot; %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;/js/cursor/love.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% elseif theme.cursor_effect == &quot;text&quot; %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;/js/cursor/text.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p><strong>主题配置文件中 <code>custom_file_path</code> 需开启 <code>bodyEnd: source/_data/body-end.njk</code> 配置</strong></p>
<p>然后我们在<strong>主题配置</strong>文件中添加以下代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mouse click effect: fireworks | explosion | love | text</span></span><br><span class="line"><span class="attr">cursor_effect:</span> <span class="string">fireworks</span></span><br></pre></td></tr></table></figure>

<p>这样即可在配置文件中一键快速切换鼠标点击特效。</p>
<h2 id="简体繁体一键切换"><a href="#简体繁体一键切换" class="headerlink" title="简体繁体一键切换"></a>简体繁体一键切换</h2><p>简体繁体切换的基本原理：首先建立一个简体字与繁体字相对应的映射表，然后遍历整个界面，把相应的简体字或者是繁体字映射为对应的字体即可。</p>
<ol>
<li>首先，我们创建 <code>source/js/tw_cn.js</code> 文件：</li>
</ol>
<div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold">
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> defaultEncoding = <span class="number">2</span>; <span class="comment">// 网站默认语言，1: 繁體中文, 2: 简体中文</span></span><br><span class="line"><span class="keyword">var</span> translateDelay = <span class="number">0</span>; <span class="comment">//延迟时间,若不在前, 要设定延迟翻译时间, 如100表示100ms,默认为0</span></span><br><span class="line"><span class="keyword">var</span> cookieDomain = <span class="string">&quot;https://tding.top/&quot;</span>; <span class="comment">//更改为你的博客网址</span></span><br><span class="line"><span class="keyword">var</span> msgToTraditionalChinese = <span class="string">&quot;繁體&quot;</span>; <span class="comment">//此处可以更改为你想要显示的文字</span></span><br><span class="line"><span class="keyword">var</span> msgToSimplifiedChinese = <span class="string">&quot;简体&quot;</span>; <span class="comment">//同上，但两处均不建议更改</span></span><br><span class="line"><span class="keyword">var</span> translateButtonId = <span class="string">&quot;translateLink&quot;</span>; <span class="comment">//默认互换id</span></span><br><span class="line"><span class="keyword">var</span> currentEncoding = defaultEncoding;</span><br><span class="line"><span class="keyword">var</span> targetEncodingCookie = <span class="string">&quot;targetEncoding&quot;</span> + cookieDomain.<span class="title function_">replace</span>(<span class="regexp">/\./g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> targetEncoding = (<span class="title function_">getCookie</span>(targetEncodingCookie) == <span class="literal">null</span> ? <span class="attr">defaultEncoding</span>: <span class="title function_">getCookie</span>(targetEncodingCookie));</span><br><span class="line"><span class="keyword">var</span> translateButtonObject;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">translateText</span>(<span class="params">txt</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (txt == <span class="string">&quot;&quot;</span> || txt == <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (currentEncoding == <span class="number">1</span> &amp;&amp; targetEncoding == <span class="number">2</span>) <span class="keyword">return</span> <span class="title class_">Simplized</span>(txt);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (currentEncoding == <span class="number">2</span> &amp;&amp; targetEncoding == <span class="number">1</span>) <span class="keyword">return</span> <span class="title class_">Traditionalized</span>(txt);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> txt</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">translateBody</span>(<span class="params">fobj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">typeof</span>(fobj) == <span class="string">&quot;object&quot;</span>) <span class="keyword">var</span> objs = fobj.<span class="property">childNodes</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">var</span> objs = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">childNodes</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; objs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> obj = objs.<span class="title function_">item</span>(i);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;||BR|HR|TEXTAREA|&quot;</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;|&quot;</span> + obj.<span class="property">tagName</span> + <span class="string">&quot;|&quot;</span>) &gt; <span class="number">0</span> || obj == translateButtonObject) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj.<span class="property">title</span> != <span class="string">&quot;&quot;</span> &amp;&amp; obj.<span class="property">title</span> != <span class="literal">null</span>) obj.<span class="property">title</span> = <span class="title function_">translateText</span>(obj.<span class="property">title</span>);</span><br><span class="line">        <span class="keyword">if</span> (obj.<span class="property">alt</span> != <span class="string">&quot;&quot;</span> &amp;&amp; obj.<span class="property">alt</span> != <span class="literal">null</span>) obj.<span class="property">alt</span> = <span class="title function_">translateText</span>(obj.<span class="property">alt</span>);</span><br><span class="line">        <span class="keyword">if</span> (obj.<span class="property">tagName</span> == <span class="string">&quot;INPUT&quot;</span> &amp;&amp; obj.<span class="property">value</span> != <span class="string">&quot;&quot;</span> &amp;&amp; obj.<span class="property">type</span> != <span class="string">&quot;text&quot;</span> &amp;&amp; obj.<span class="property">type</span> != <span class="string">&quot;hidden&quot;</span>) obj.<span class="property">value</span> = <span class="title function_">translateText</span>(obj.<span class="property">value</span>);</span><br><span class="line">        <span class="keyword">if</span> (obj.<span class="property">nodeType</span> == <span class="number">3</span>) obj.<span class="property">data</span> = <span class="title function_">translateText</span>(obj.<span class="property">data</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="title function_">translateBody</span>(obj)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">translatePage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (targetEncoding == <span class="number">1</span>) &#123;</span><br><span class="line">        currentEncoding = <span class="number">1</span>;</span><br><span class="line">        targetEncoding = <span class="number">2</span>;</span><br><span class="line">        translateButtonObject.<span class="property">innerHTML</span> = msgToTraditionalChinese;</span><br><span class="line">        <span class="title function_">setCookie</span>(targetEncodingCookie, targetEncoding, <span class="number">7</span>);</span><br><span class="line">        <span class="title function_">translateBody</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (targetEncoding == <span class="number">2</span>) &#123;</span><br><span class="line">        currentEncoding = <span class="number">2</span>;</span><br><span class="line">        targetEncoding = <span class="number">1</span>;</span><br><span class="line">        translateButtonObject.<span class="property">innerHTML</span> = msgToSimplifiedChinese;</span><br><span class="line">        <span class="title function_">setCookie</span>(targetEncodingCookie, targetEncoding, <span class="number">7</span>);</span><br><span class="line">        <span class="title function_">translateBody</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">JTPYStr</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;万与丑专业丛东丝丢两严丧个丬丰临为丽举么义乌乐乔习乡书买乱争于亏云亘亚产亩亲亵亸亿仅从仑仓仪们价众优伙会伛伞伟传伤伥伦伧伪伫体余佣佥侠侣侥侦侧侨侩侪侬俣俦俨俩俪俭债倾偬偻偾偿傥傧储傩儿兑兖党兰关兴兹养兽冁内冈册写军农冢冯冲决况冻净凄凉凌减凑凛几凤凫凭凯击凼凿刍划刘则刚创删别刬刭刽刿剀剂剐剑剥剧劝办务劢动励劲劳势勋勐勚匀匦匮区医华协单卖卢卤卧卫却卺厂厅历厉压厌厍厕厢厣厦厨厩厮县参叆叇双发变叙叠叶号叹叽吁后吓吕吗吣吨听启吴呒呓呕呖呗员呙呛呜咏咔咙咛咝咤咴咸哌响哑哒哓哔哕哗哙哜哝哟唛唝唠唡唢唣唤唿啧啬啭啮啰啴啸喷喽喾嗫呵嗳嘘嘤嘱噜噼嚣嚯团园囱围囵国图圆圣圹场坂坏块坚坛坜坝坞坟坠垄垅垆垒垦垧垩垫垭垯垱垲垴埘埙埚埝埯堑堕塆墙壮声壳壶壸处备复够头夸夹夺奁奂奋奖奥妆妇妈妩妪妫姗姜娄娅娆娇娈娱娲娴婳婴婵婶媪嫒嫔嫱嬷孙学孪宁宝实宠审宪宫宽宾寝对寻导寿将尔尘尧尴尸尽层屃屉届属屡屦屿岁岂岖岗岘岙岚岛岭岳岽岿峃峄峡峣峤峥峦崂崃崄崭嵘嵚嵛嵝嵴巅巩巯币帅师帏帐帘帜带帧帮帱帻帼幂幞干并广庄庆庐庑库应庙庞废庼廪开异弃张弥弪弯弹强归当录彟彦彻径徕御忆忏忧忾怀态怂怃怄怅怆怜总怼怿恋恳恶恸恹恺恻恼恽悦悫悬悭悯惊惧惨惩惫惬惭惮惯愍愠愤愦愿慑慭憷懑懒懔戆戋戏戗战戬户扎扑扦执扩扪扫扬扰抚抛抟抠抡抢护报担拟拢拣拥拦拧拨择挂挚挛挜挝挞挟挠挡挢挣挤挥挦捞损捡换捣据捻掳掴掷掸掺掼揸揽揿搀搁搂搅携摄摅摆摇摈摊撄撑撵撷撸撺擞攒敌敛数斋斓斗斩断无旧时旷旸昙昼昽显晋晒晓晔晕晖暂暧札术朴机杀杂权条来杨杩杰极构枞枢枣枥枧枨枪枫枭柜柠柽栀栅标栈栉栊栋栌栎栏树栖样栾桊桠桡桢档桤桥桦桧桨桩梦梼梾检棂椁椟椠椤椭楼榄榇榈榉槚槛槟槠横樯樱橥橱橹橼檐檩欢欤欧歼殁殇残殒殓殚殡殴毁毂毕毙毡毵氇气氢氩氲汇汉污汤汹沓沟没沣沤沥沦沧沨沩沪沵泞泪泶泷泸泺泻泼泽泾洁洒洼浃浅浆浇浈浉浊测浍济浏浐浑浒浓浔浕涂涌涛涝涞涟涠涡涢涣涤润涧涨涩淀渊渌渍渎渐渑渔渖渗温游湾湿溃溅溆溇滗滚滞滟滠满滢滤滥滦滨滩滪漤潆潇潋潍潜潴澜濑濒灏灭灯灵灾灿炀炉炖炜炝点炼炽烁烂烃烛烟烦烧烨烩烫烬热焕焖焘煅煳熘爱爷牍牦牵牺犊犟状犷犸犹狈狍狝狞独狭狮狯狰狱狲猃猎猕猡猪猫猬献獭玑玙玚玛玮环现玱玺珉珏珐珑珰珲琎琏琐琼瑶瑷璇璎瓒瓮瓯电画畅畲畴疖疗疟疠疡疬疮疯疱疴痈痉痒痖痨痪痫痴瘅瘆瘗瘘瘪瘫瘾瘿癞癣癫癯皑皱皲盏盐监盖盗盘眍眦眬着睁睐睑瞒瞩矫矶矾矿砀码砖砗砚砜砺砻砾础硁硅硕硖硗硙硚确硷碍碛碜碱碹磙礼祎祢祯祷祸禀禄禅离秃秆种积称秽秾稆税稣稳穑穷窃窍窑窜窝窥窦窭竖竞笃笋笔笕笺笼笾筑筚筛筜筝筹签简箓箦箧箨箩箪箫篑篓篮篱簖籁籴类籼粜粝粤粪粮糁糇紧絷纟纠纡红纣纤纥约级纨纩纪纫纬纭纮纯纰纱纲纳纴纵纶纷纸纹纺纻纼纽纾线绀绁绂练组绅细织终绉绊绋绌绍绎经绐绑绒结绔绕绖绗绘给绚绛络绝绞统绠绡绢绣绤绥绦继绨绩绪绫绬续绮绯绰绱绲绳维绵绶绷绸绹绺绻综绽绾绿缀缁缂缃缄缅缆缇缈缉缊缋缌缍缎缏缐缑缒缓缔缕编缗缘缙缚缛缜缝缞缟缠缡缢缣缤缥缦缧缨缩缪缫缬缭缮缯缰缱缲缳缴缵罂网罗罚罢罴羁羟羡翘翙翚耢耧耸耻聂聋职聍联聩聪肃肠肤肷肾肿胀胁胆胜胧胨胪胫胶脉脍脏脐脑脓脔脚脱脶脸腊腌腘腭腻腼腽腾膑臜舆舣舰舱舻艰艳艹艺节芈芗芜芦苁苇苈苋苌苍苎苏苘苹茎茏茑茔茕茧荆荐荙荚荛荜荞荟荠荡荣荤荥荦荧荨荩荪荫荬荭荮药莅莜莱莲莳莴莶获莸莹莺莼萚萝萤营萦萧萨葱蒇蒉蒋蒌蓝蓟蓠蓣蓥蓦蔷蔹蔺蔼蕲蕴薮藁藓虏虑虚虫虬虮虽虾虿蚀蚁蚂蚕蚝蚬蛊蛎蛏蛮蛰蛱蛲蛳蛴蜕蜗蜡蝇蝈蝉蝎蝼蝾螀螨蟏衅衔补衬衮袄袅袆袜袭袯装裆裈裢裣裤裥褛褴襁襕见观觃规觅视觇览觉觊觋觌觍觎觏觐觑觞触觯詟誉誊讠计订讣认讥讦讧讨让讪讫训议讯记讱讲讳讴讵讶讷许讹论讻讼讽设访诀证诂诃评诅识诇诈诉诊诋诌词诎诏诐译诒诓诔试诖诗诘诙诚诛诜话诞诟诠诡询诣诤该详诧诨诩诪诫诬语诮误诰诱诲诳说诵诶请诸诹诺读诼诽课诿谀谁谂调谄谅谆谇谈谊谋谌谍谎谏谐谑谒谓谔谕谖谗谘谙谚谛谜谝谞谟谠谡谢谣谤谥谦谧谨谩谪谫谬谭谮谯谰谱谲谳谴谵谶谷豮贝贞负贠贡财责贤败账货质贩贪贫贬购贮贯贰贱贲贳贴贵贶贷贸费贺贻贼贽贾贿赀赁赂赃资赅赆赇赈赉赊赋赌赍赎赏赐赑赒赓赔赕赖赗赘赙赚赛赜赝赞赟赠赡赢赣赪赵赶趋趱趸跃跄跖跞践跶跷跸跹跻踊踌踪踬踯蹑蹒蹰蹿躏躜躯车轧轨轩轪轫转轭轮软轰轱轲轳轴轵轶轷轸轹轺轻轼载轾轿辀辁辂较辄辅辆辇辈辉辊辋辌辍辎辏辐辑辒输辔辕辖辗辘辙辚辞辩辫边辽达迁过迈运还这进远违连迟迩迳迹适选逊递逦逻遗遥邓邝邬邮邹邺邻郁郄郏郐郑郓郦郧郸酝酦酱酽酾酿释里鉅鉴銮錾钆钇针钉钊钋钌钍钎钏钐钑钒钓钔钕钖钗钘钙钚钛钝钞钟钠钡钢钣钤钥钦钧钨钩钪钫钬钭钮钯钰钱钲钳钴钵钶钷钸钹钺钻钼钽钾钿铀铁铂铃铄铅铆铈铉铊铋铍铎铏铐铑铒铕铗铘铙铚铛铜铝铞铟铠铡铢铣铤铥铦铧铨铪铫铬铭铮铯铰铱铲铳铴铵银铷铸铹铺铻铼铽链铿销锁锂锃锄锅锆锇锈锉锊锋锌锍锎锏锐锑锒锓锔锕锖锗错锚锜锞锟锠锡锢锣锤锥锦锨锩锫锬锭键锯锰锱锲锳锴锵锶锷锸锹锺锻锼锽锾锿镀镁镂镃镆镇镈镉镊镌镍镎镏镐镑镒镕镖镗镙镚镛镜镝镞镟镠镡镢镣镤镥镦镧镨镩镪镫镬镭镮镯镰镱镲镳镴镶长门闩闪闫闬闭问闯闰闱闲闳间闵闶闷闸闹闺闻闼闽闾闿阀阁阂阃阄阅阆阇阈阉阊阋阌阍阎阏阐阑阒阓阔阕阖阗阘阙阚阛队阳阴阵阶际陆陇陈陉陕陧陨险随隐隶隽难雏雠雳雾霁霉霭靓静靥鞑鞒鞯鞴韦韧韨韩韪韫韬韵页顶顷顸项顺须顼顽顾顿颀颁颂颃预颅领颇颈颉颊颋颌颍颎颏颐频颒颓颔颕颖颗题颙颚颛颜额颞颟颠颡颢颣颤颥颦颧风飏飐飑飒飓飔飕飖飗飘飙飚飞飨餍饤饥饦饧饨饩饪饫饬饭饮饯饰饱饲饳饴饵饶饷饸饹饺饻饼饽饾饿馀馁馂馃馄馅馆馇馈馉馊馋馌馍馎馏馐馑馒馓馔馕马驭驮驯驰驱驲驳驴驵驶驷驸驹驺驻驼驽驾驿骀骁骂骃骄骅骆骇骈骉骊骋验骍骎骏骐骑骒骓骔骕骖骗骘骙骚骛骜骝骞骟骠骡骢骣骤骥骦骧髅髋髌鬓魇魉鱼鱽鱾鱿鲀鲁鲂鲄鲅鲆鲇鲈鲉鲊鲋鲌鲍鲎鲏鲐鲑鲒鲓鲔鲕鲖鲗鲘鲙鲚鲛鲜鲝鲞鲟鲠鲡鲢鲣鲤鲥鲦鲧鲨鲩鲪鲫鲬鲭鲮鲯鲰鲱鲲鲳鲴鲵鲶鲷鲸鲹鲺鲻鲼鲽鲾鲿鳀鳁鳂鳃鳄鳅鳆鳇鳈鳉鳊鳋鳌鳍鳎鳏鳐鳑鳒鳓鳔鳕鳖鳗鳘鳙鳛鳜鳝鳞鳟鳠鳡鳢鳣鸟鸠鸡鸢鸣鸤鸥鸦鸧鸨鸩鸪鸫鸬鸭鸮鸯鸰鸱鸲鸳鸴鸵鸶鸷鸸鸹鸺鸻鸼鸽鸾鸿鹀鹁鹂鹃鹄鹅鹆鹇鹈鹉鹊鹋鹌鹍鹎鹏鹐鹑鹒鹓鹔鹕鹖鹗鹘鹚鹛鹜鹝鹞鹟鹠鹡鹢鹣鹤鹥鹦鹧鹨鹩鹪鹫鹬鹭鹯鹰鹱鹲鹳鹴鹾麦麸黄黉黡黩黪黾鼋鼌鼍鼗鼹齄齐齑齿龀龁龂龃龄龅龆龇龈龉龊龋龌龙龚龛龟志制咨只里系范松没尝尝闹面准钟别闲干尽脏拼&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">FTPYStr</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;萬與醜專業叢東絲丟兩嚴喪個爿豐臨為麗舉麼義烏樂喬習鄉書買亂爭於虧雲亙亞產畝親褻嚲億僅從侖倉儀們價眾優夥會傴傘偉傳傷倀倫傖偽佇體餘傭僉俠侶僥偵側僑儈儕儂俁儔儼倆儷儉債傾傯僂僨償儻儐儲儺兒兌兗黨蘭關興茲養獸囅內岡冊寫軍農塚馮衝決況凍淨淒涼淩減湊凜幾鳳鳧憑凱擊氹鑿芻劃劉則剛創刪別剗剄劊劌剴劑剮劍剝劇勸辦務勱動勵勁勞勢勳猛勩勻匭匱區醫華協單賣盧鹵臥衛卻巹廠廳曆厲壓厭厙廁廂厴廈廚廄廝縣參靉靆雙發變敘疊葉號歎嘰籲後嚇呂嗎唚噸聽啟吳嘸囈嘔嚦唄員咼嗆嗚詠哢嚨嚀噝吒噅鹹呱響啞噠嘵嗶噦嘩噲嚌噥喲嘜嗊嘮啢嗩唕喚呼嘖嗇囀齧囉嘽嘯噴嘍嚳囁嗬噯噓嚶囑嚕劈囂謔團園囪圍圇國圖圓聖壙場阪壞塊堅壇壢壩塢墳墜壟壟壚壘墾坰堊墊埡墶壋塏堖塒塤堝墊垵塹墮壪牆壯聲殼壺壼處備複夠頭誇夾奪奩奐奮獎奧妝婦媽嫵嫗媯姍薑婁婭嬈嬌孌娛媧嫻嫿嬰嬋嬸媼嬡嬪嬙嬤孫學孿寧寶實寵審憲宮寬賓寢對尋導壽將爾塵堯尷屍盡層屭屜屆屬屢屨嶼歲豈嶇崗峴嶴嵐島嶺嶽崠巋嶨嶧峽嶢嶠崢巒嶗崍嶮嶄嶸嶔崳嶁脊巔鞏巰幣帥師幃帳簾幟帶幀幫幬幘幗冪襆幹並廣莊慶廬廡庫應廟龐廢廎廩開異棄張彌弳彎彈強歸當錄彠彥徹徑徠禦憶懺憂愾懷態慫憮慪悵愴憐總懟懌戀懇惡慟懨愷惻惱惲悅愨懸慳憫驚懼慘懲憊愜慚憚慣湣慍憤憒願懾憖怵懣懶懍戇戔戲戧戰戩戶紮撲扡執擴捫掃揚擾撫拋摶摳掄搶護報擔擬攏揀擁攔擰撥擇掛摯攣掗撾撻挾撓擋撟掙擠揮撏撈損撿換搗據撚擄摑擲撣摻摜摣攬撳攙擱摟攪攜攝攄擺搖擯攤攖撐攆擷擼攛擻攢敵斂數齋斕鬥斬斷無舊時曠暘曇晝曨顯晉曬曉曄暈暉暫曖劄術樸機殺雜權條來楊榪傑極構樅樞棗櫪梘棖槍楓梟櫃檸檉梔柵標棧櫛櫳棟櫨櫟欄樹棲樣欒棬椏橈楨檔榿橋樺檜槳樁夢檮棶檢欞槨櫝槧欏橢樓欖櫬櫚櫸檟檻檳櫧橫檣櫻櫫櫥櫓櫞簷檁歡歟歐殲歿殤殘殞殮殫殯毆毀轂畢斃氈毿氌氣氫氬氳彙漢汙湯洶遝溝沒灃漚瀝淪滄渢溈滬濔濘淚澩瀧瀘濼瀉潑澤涇潔灑窪浹淺漿澆湞溮濁測澮濟瀏滻渾滸濃潯濜塗湧濤澇淶漣潿渦溳渙滌潤澗漲澀澱淵淥漬瀆漸澠漁瀋滲溫遊灣濕潰濺漵漊潷滾滯灩灄滿瀅濾濫灤濱灘澦濫瀠瀟瀲濰潛瀦瀾瀨瀕灝滅燈靈災燦煬爐燉煒熗點煉熾爍爛烴燭煙煩燒燁燴燙燼熱煥燜燾煆糊溜愛爺牘犛牽犧犢強狀獷獁猶狽麅獮獰獨狹獅獪猙獄猻獫獵獼玀豬貓蝟獻獺璣璵瑒瑪瑋環現瑲璽瑉玨琺瓏璫琿璡璉瑣瓊瑤璦璿瓔瓚甕甌電畫暢佘疇癤療瘧癘瘍鬁瘡瘋皰屙癰痙癢瘂癆瘓癇癡癉瘮瘞瘺癟癱癮癭癩癬癲臒皚皺皸盞鹽監蓋盜盤瞘眥矓著睜睞瞼瞞矚矯磯礬礦碭碼磚硨硯碸礪礱礫礎硜矽碩硤磽磑礄確鹼礙磧磣堿镟滾禮禕禰禎禱禍稟祿禪離禿稈種積稱穢穠穭稅穌穩穡窮竊竅窯竄窩窺竇窶豎競篤筍筆筧箋籠籩築篳篩簹箏籌簽簡籙簀篋籜籮簞簫簣簍籃籬籪籟糴類秈糶糲粵糞糧糝餱緊縶糸糾紆紅紂纖紇約級紈纊紀紉緯紜紘純紕紗綱納紝縱綸紛紙紋紡紵紖紐紓線紺絏紱練組紳細織終縐絆紼絀紹繹經紿綁絨結絝繞絰絎繪給絢絳絡絕絞統綆綃絹繡綌綏絛繼綈績緒綾緓續綺緋綽緔緄繩維綿綬繃綢綯綹綣綜綻綰綠綴緇緙緗緘緬纜緹緲緝縕繢緦綞緞緶線緱縋緩締縷編緡緣縉縛縟縝縫縗縞纏縭縊縑繽縹縵縲纓縮繆繅纈繚繕繒韁繾繰繯繳纘罌網羅罰罷羆羈羥羨翹翽翬耮耬聳恥聶聾職聹聯聵聰肅腸膚膁腎腫脹脅膽勝朧腖臚脛膠脈膾髒臍腦膿臠腳脫腡臉臘醃膕齶膩靦膃騰臏臢輿艤艦艙艫艱豔艸藝節羋薌蕪蘆蓯葦藶莧萇蒼苧蘇檾蘋莖蘢蔦塋煢繭荊薦薘莢蕘蓽蕎薈薺蕩榮葷滎犖熒蕁藎蓀蔭蕒葒葤藥蒞蓧萊蓮蒔萵薟獲蕕瑩鶯蓴蘀蘿螢營縈蕭薩蔥蕆蕢蔣蔞藍薊蘺蕷鎣驀薔蘞藺藹蘄蘊藪槁蘚虜慮虛蟲虯蟣雖蝦蠆蝕蟻螞蠶蠔蜆蠱蠣蟶蠻蟄蛺蟯螄蠐蛻蝸蠟蠅蟈蟬蠍螻蠑螿蟎蠨釁銜補襯袞襖嫋褘襪襲襏裝襠褌褳襝褲襇褸襤繈襴見觀覎規覓視覘覽覺覬覡覿覥覦覯覲覷觴觸觶讋譽謄訁計訂訃認譏訐訌討讓訕訖訓議訊記訒講諱謳詎訝訥許訛論訩訟諷設訪訣證詁訶評詛識詗詐訴診詆謅詞詘詔詖譯詒誆誄試詿詩詰詼誠誅詵話誕詬詮詭詢詣諍該詳詫諢詡譸誡誣語誚誤誥誘誨誑說誦誒請諸諏諾讀諑誹課諉諛誰諗調諂諒諄誶談誼謀諶諜謊諫諧謔謁謂諤諭諼讒諮諳諺諦謎諞諝謨讜謖謝謠謗諡謙謐謹謾謫譾謬譚譖譙讕譜譎讞譴譫讖穀豶貝貞負貟貢財責賢敗賬貨質販貪貧貶購貯貫貳賤賁貰貼貴貺貸貿費賀貽賊贄賈賄貲賃賂贓資賅贐賕賑賚賒賦賭齎贖賞賜贔賙賡賠賧賴賵贅賻賺賽賾贗讚贇贈贍贏贛赬趙趕趨趲躉躍蹌蹠躒踐躂蹺蹕躚躋踴躊蹤躓躑躡蹣躕躥躪躦軀車軋軌軒軑軔轉軛輪軟轟軲軻轤軸軹軼軤軫轢軺輕軾載輊轎輈輇輅較輒輔輛輦輩輝輥輞輬輟輜輳輻輯轀輸轡轅轄輾轆轍轔辭辯辮邊遼達遷過邁運還這進遠違連遲邇逕跡適選遜遞邐邏遺遙鄧鄺鄔郵鄒鄴鄰鬱郤郟鄶鄭鄆酈鄖鄲醞醱醬釅釃釀釋裏钜鑒鑾鏨釓釔針釘釗釙釕釷釺釧釤鈒釩釣鍆釹鍚釵鈃鈣鈈鈦鈍鈔鍾鈉鋇鋼鈑鈐鑰欽鈞鎢鉤鈧鈁鈥鈄鈕鈀鈺錢鉦鉗鈷缽鈳鉕鈽鈸鉞鑽鉬鉭鉀鈿鈾鐵鉑鈴鑠鉛鉚鈰鉉鉈鉍鈹鐸鉶銬銠鉺銪鋏鋣鐃銍鐺銅鋁銱銦鎧鍘銖銑鋌銩銛鏵銓鉿銚鉻銘錚銫鉸銥鏟銃鐋銨銀銣鑄鐒鋪鋙錸鋱鏈鏗銷鎖鋰鋥鋤鍋鋯鋨鏽銼鋝鋒鋅鋶鐦鐧銳銻鋃鋟鋦錒錆鍺錯錨錡錁錕錩錫錮鑼錘錐錦鍁錈錇錟錠鍵鋸錳錙鍥鍈鍇鏘鍶鍔鍤鍬鍾鍛鎪鍠鍰鎄鍍鎂鏤鎡鏌鎮鎛鎘鑷鐫鎳鎿鎦鎬鎊鎰鎔鏢鏜鏍鏰鏞鏡鏑鏃鏇鏐鐔钁鐐鏷鑥鐓鑭鐠鑹鏹鐙鑊鐳鐶鐲鐮鐿鑔鑣鑞鑲長門閂閃閆閈閉問闖閏闈閑閎間閔閌悶閘鬧閨聞闥閩閭闓閥閣閡閫鬮閱閬闍閾閹閶鬩閿閽閻閼闡闌闃闠闊闋闔闐闒闕闞闤隊陽陰陣階際陸隴陳陘陝隉隕險隨隱隸雋難雛讎靂霧霽黴靄靚靜靨韃鞽韉韝韋韌韍韓韙韞韜韻頁頂頃頇項順須頊頑顧頓頎頒頌頏預顱領頗頸頡頰頲頜潁熲頦頤頻頮頹頷頴穎顆題顒顎顓顏額顳顢顛顙顥纇顫顬顰顴風颺颭颮颯颶颸颼颻飀飄飆飆飛饗饜飣饑飥餳飩餼飪飫飭飯飲餞飾飽飼飿飴餌饒餉餄餎餃餏餅餑餖餓餘餒餕餜餛餡館餷饋餶餿饞饁饃餺餾饈饉饅饊饌饢馬馭馱馴馳驅馹駁驢駔駛駟駙駒騶駐駝駑駕驛駘驍罵駰驕驊駱駭駢驫驪騁驗騂駸駿騏騎騍騅騌驌驂騙騭騤騷騖驁騮騫騸驃騾驄驏驟驥驦驤髏髖髕鬢魘魎魚魛魢魷魨魯魴魺鮁鮃鯰鱸鮋鮓鮒鮊鮑鱟鮍鮐鮭鮚鮳鮪鮞鮦鰂鮜鱠鱭鮫鮮鮺鯗鱘鯁鱺鰱鰹鯉鰣鰷鯀鯊鯇鮶鯽鯒鯖鯪鯕鯫鯡鯤鯧鯝鯢鯰鯛鯨鯵鯴鯔鱝鰈鰏鱨鯷鰮鰃鰓鱷鰍鰒鰉鰁鱂鯿鰠鼇鰭鰨鰥鰩鰟鰜鰳鰾鱈鱉鰻鰵鱅鰼鱖鱔鱗鱒鱯鱤鱧鱣鳥鳩雞鳶鳴鳲鷗鴉鶬鴇鴆鴣鶇鸕鴨鴞鴦鴒鴟鴝鴛鴬鴕鷥鷙鴯鴰鵂鴴鵃鴿鸞鴻鵐鵓鸝鵑鵠鵝鵒鷳鵜鵡鵲鶓鵪鶤鵯鵬鵮鶉鶊鵷鷫鶘鶡鶚鶻鶿鶥鶩鷊鷂鶲鶹鶺鷁鶼鶴鷖鸚鷓鷚鷯鷦鷲鷸鷺鸇鷹鸌鸏鸛鸘鹺麥麩黃黌黶黷黲黽黿鼂鼉鞀鼴齇齊齏齒齔齕齗齟齡齙齠齜齦齬齪齲齷龍龔龕龜誌製谘隻裡係範鬆冇嚐嘗鬨麵準鐘彆閒乾儘臟拚&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Traditionalized</span>(<span class="params">cc</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> ss = <span class="title class_">JTPYStr</span>();</span><br><span class="line">    <span class="keyword">var</span> tt = <span class="title class_">FTPYStr</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cc.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cc.<span class="title function_">charCodeAt</span>(i) &gt; <span class="number">10000</span> &amp;&amp; ss.<span class="title function_">indexOf</span>(cc.<span class="title function_">charAt</span>(i)) != -<span class="number">1</span>) str += tt.<span class="title function_">charAt</span>(ss.<span class="title function_">indexOf</span>(cc.<span class="title function_">charAt</span>(i)));</span><br><span class="line">        <span class="keyword">else</span> str += cc.<span class="title function_">charAt</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Simplized</span>(<span class="params">cc</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> ss = <span class="title class_">JTPYStr</span>();</span><br><span class="line">    <span class="keyword">var</span> tt = <span class="title class_">FTPYStr</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cc.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cc.<span class="title function_">charCodeAt</span>(i) &gt; <span class="number">10000</span> &amp;&amp; tt.<span class="title function_">indexOf</span>(cc.<span class="title function_">charAt</span>(i)) != -<span class="number">1</span>) str += ss.<span class="title function_">charAt</span>(tt.<span class="title function_">indexOf</span>(cc.<span class="title function_">charAt</span>(i)));</span><br><span class="line">        <span class="keyword">else</span> str += cc.<span class="title function_">charAt</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setCookie</span>(<span class="params">name, value, days</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (days) &#123;</span><br><span class="line">        <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        date.<span class="title function_">setTime</span>(date.<span class="title function_">getTime</span>() + (days * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>));</span><br><span class="line">        <span class="keyword">var</span> expires = <span class="string">&quot;; expires=&quot;</span> + date.<span class="title function_">toGMTString</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">var</span> expires = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">cookie</span> = name + <span class="string">&quot;=&quot;</span> + value + expires + <span class="string">&quot;; path=/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCookie</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> nameEQ = name + <span class="string">&quot;=&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> ca = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">split</span>(<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ca.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> c = ca[i];</span><br><span class="line">        <span class="keyword">while</span> (c.<span class="title function_">charAt</span>(<span class="number">0</span>) == <span class="string">&#x27; &#x27;</span>) c = c.<span class="title function_">substring</span>(<span class="number">1</span>, c.<span class="property">length</span>);</span><br><span class="line">        <span class="keyword">if</span> (c.<span class="title function_">indexOf</span>(nameEQ) == <span class="number">0</span>) <span class="keyword">return</span> c.<span class="title function_">substring</span>(nameEQ.<span class="property">length</span>, c.<span class="property">length</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">translateInitilization</span>(<span class="params"></span>) &#123;</span><br><span class="line">    translateButtonObject = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(translateButtonId);</span><br><span class="line">    <span class="keyword">if</span> (translateButtonObject) &#123;</span><br><span class="line">        <span class="title function_">with</span>(<span class="params">translateButtonObject</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">typeof</span>(<span class="variable language_">document</span>.<span class="property">all</span>) != <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">                href = <span class="string">&quot;javascript:translatePage();&quot;</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                href = <span class="string">&quot;#&quot;</span>;</span><br><span class="line">                onclick = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;translatePage(); return false;&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (currentEncoding != targetEncoding) &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="string">&quot;translateBody()&quot;</span>, translateDelay);</span><br><span class="line">            <span class="keyword">if</span> (targetEncoding == <span class="number">1</span>) translateButtonObject.<span class="property">innerHTML</span> = msgToSimplifiedChinese;</span><br><span class="line">            <span class="keyword">else</span> translateButtonObject.<span class="property">innerHTML</span> = msgToTraditionalChinese</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</div></div>

<ol start="2">
<li>修改模板，在我们想要显示简繁转换按钮的地方添加如下代码。例如，我在主题自定义布局文件 <code>source/_data/footer.njk</code> 中添加以下代码：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;translate-style&quot;</span>&gt;</span></span><br><span class="line">繁/简：<span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;translateLink&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:translatePage();&quot;</span>&gt;</span>繁体</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/tw_cn.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> defaultEncoding = <span class="number">2</span>; <span class="comment">//网站编写字体是否繁体，1-繁体，2-简体</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> translateDelay = <span class="number">0</span>; <span class="comment">//延迟时间,若不在前, 要设定延迟翻译时间, 如100表示100ms,默认为0</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> cookieDomain = <span class="string">&quot;https://novnan.github.io/&quot;</span>; <span class="comment">//Cookie地址, 一定要设定, 通常为你的网址</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> msgToTraditionalChinese = <span class="string">&quot;繁体&quot;</span>; <span class="comment">//此处可以更改为你想要显示的文字</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> msgToSimplifiedChinese = <span class="string">&quot;简体&quot;</span>; <span class="comment">//同上，但两处均不建议更改</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> translateButtonId = <span class="string">&quot;translateLink&quot;</span>; <span class="comment">//默认互换id</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">translateInitilization</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>主题配置文件中 <code>custom_file_path</code> 需开启 <code>footer: source/_data/footer.njk</code> 配置</strong></p>
<p>读者可以在博客底部点击简体 &#x2F; 繁体来看具体的切换字体效果。</p>
<h2 id="canvas-粒子时钟"><a href="#canvas-粒子时钟" class="headerlink" title="canvas 粒子时钟"></a>canvas 粒子时钟</h2><ol>
<li>在 <code>source/_data/sidebar.njk</code> 添加内容如下：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:60%;&quot;</span>&gt;</span>当前浏览器不支持canvas，请更换浏览器后再试<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">var</span> digit=</span></span><br><span class="line"><span class="language-javascript">    [</span></span><br><span class="line"><span class="language-javascript">        [</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">        ],<span class="comment">//0</span></span></span><br><span class="line"><span class="language-javascript">        [</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">        ],<span class="comment">//1</span></span></span><br><span class="line"><span class="language-javascript">        [</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">        ],<span class="comment">//2</span></span></span><br><span class="line"><span class="language-javascript">        [</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">        ],<span class="comment">//3</span></span></span><br><span class="line"><span class="language-javascript">        [</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">        ],<span class="comment">//4</span></span></span><br><span class="line"><span class="language-javascript">        [</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">        ],<span class="comment">//5</span></span></span><br><span class="line"><span class="language-javascript">        [</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">        ],<span class="comment">//6</span></span></span><br><span class="line"><span class="language-javascript">        [</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">        ],<span class="comment">//7</span></span></span><br><span class="line"><span class="language-javascript">        [</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">        ],<span class="comment">//8</span></span></span><br><span class="line"><span class="language-javascript">        [</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">        ],<span class="comment">//9</span></span></span><br><span class="line"><span class="language-javascript">        [</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">        ]<span class="comment">//:</span></span></span><br><span class="line"><span class="language-javascript">    ];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvas&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(canvas.<span class="property">getContext</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> cxt = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//声明canvas的宽高</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> H = <span class="number">100</span>,W = <span class="number">700</span>;</span></span><br><span class="line"><span class="language-javascript">    canvas.<span class="property">height</span> = H;</span></span><br><span class="line"><span class="language-javascript">    canvas.<span class="property">width</span> = W;</span></span><br><span class="line"><span class="language-javascript">    cxt.<span class="property">fillStyle</span> = <span class="string">&#x27;#f00&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    cxt.<span class="title function_">fillRect</span>(<span class="number">10</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">50</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//存储时间数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> data = [];</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//存储运动的小球</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> balls = [];</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//设置粒子半径</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> R = canvas.<span class="property">height</span>/<span class="number">20</span>-<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">    (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> temp = <span class="regexp">/(\d)(\d):(\d)(\d):(\d)(\d)/</span>.<span class="title function_">exec</span>(<span class="keyword">new</span> <span class="title class_">Date</span>());</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//存储时间数字，由十位小时、个位小时、冒号、十位分钟、个位分钟、冒号、十位秒钟、个位秒钟这7个数字组成</span></span></span><br><span class="line"><span class="language-javascript">        data.<span class="title function_">push</span>(temp[<span class="number">1</span>],temp[<span class="number">2</span>],<span class="number">10</span>,temp[<span class="number">3</span>],temp[<span class="number">4</span>],<span class="number">10</span>,temp[<span class="number">5</span>],temp[<span class="number">6</span>]);</span></span><br><span class="line"><span class="language-javascript">    &#125;)();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*生成点阵数字*/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">renderDigit</span>(<span class="params">index,num</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; digit[num].<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; digit[num][i].<span class="property">length</span>; j++)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(digit[num][i][j] == <span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    cxt.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">                    cxt.<span class="title function_">arc</span>(<span class="number">14</span>*(R+<span class="number">2</span>)*index + j*<span class="number">2</span>*(R+<span class="number">1</span>)+(R+<span class="number">1</span>),i*<span class="number">2</span>*(R+<span class="number">1</span>)+(R+<span class="number">1</span>),R,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>);</span></span><br><span class="line"><span class="language-javascript">                    cxt.<span class="title function_">closePath</span>();</span></span><br><span class="line"><span class="language-javascript">                    cxt.<span class="title function_">fill</span>();</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*更新时钟*/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">updateDigitTime</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> changeNumArray = [];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> temp = <span class="regexp">/(\d)(\d):(\d)(\d):(\d)(\d)/</span>.<span class="title function_">exec</span>(<span class="keyword">new</span> <span class="title class_">Date</span>());</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> <span class="title class_">NewData</span> = [];</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">NewData</span>.<span class="title function_">push</span>(temp[<span class="number">1</span>],temp[<span class="number">2</span>],<span class="number">10</span>,temp[<span class="number">3</span>],temp[<span class="number">4</span>],<span class="number">10</span>,temp[<span class="number">5</span>],temp[<span class="number">6</span>]);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = data.<span class="property">length</span>-<span class="number">1</span>; i &gt;=<span class="number">0</span> ; i--)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//时间发生变化</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(<span class="title class_">NewData</span>[i] !== data[i])&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//将变化的数字值和在data数组中的索引存储在changeNumArray数组中</span></span></span><br><span class="line"><span class="language-javascript">                changeNumArray.<span class="title function_">push</span>(i+<span class="string">&#x27;_&#x27;</span>+(<span class="title class_">Number</span>(data[i])+<span class="number">1</span>)%<span class="number">10</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//增加小球</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; changeNumArray.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            addBalls.<span class="title function_">apply</span>(<span class="variable language_">this</span>,changeNumArray[i].<span class="title function_">split</span>(<span class="string">&#x27;_&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        data = <span class="title class_">NewData</span>.<span class="title function_">concat</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*更新小球状态*/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">updateBalls</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; balls.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            balls[i].<span class="property">stepY</span> += balls[i].<span class="property">disY</span>;</span></span><br><span class="line"><span class="language-javascript">            balls[i].<span class="property">x</span> += balls[i].<span class="property">stepX</span>;</span></span><br><span class="line"><span class="language-javascript">            balls[i].<span class="property">y</span> += balls[i].<span class="property">stepY</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(balls[i].<span class="property">x</span> &gt; W + R || balls[i].<span class="property">y</span> &gt; H + R)&#123;</span></span><br><span class="line"><span class="language-javascript">                balls.<span class="title function_">splice</span>(i,<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">                i--;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*增加要运动的小球*/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">addBalls</span>(<span class="params">index,num</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> numArray = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> colorArray =  [<span class="string">&quot;#3BE&quot;</span>,<span class="string">&quot;#09C&quot;</span>,<span class="string">&quot;#A6C&quot;</span>,<span class="string">&quot;#93C&quot;</span>,<span class="string">&quot;#9C0&quot;</span>,<span class="string">&quot;#690&quot;</span>,<span class="string">&quot;#FB3&quot;</span>,<span class="string">&quot;#F80&quot;</span>,<span class="string">&quot;#F44&quot;</span>,<span class="string">&quot;#C00&quot;</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; digit[num].<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; digit[num][i].<span class="property">length</span>; j++)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(digit[num][i][j] == <span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> ball = &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">x</span>:<span class="number">14</span>*(R+<span class="number">2</span>)*index + j*<span class="number">2</span>*(R+<span class="number">1</span>)+(R+<span class="number">1</span>),</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">y</span>:i*<span class="number">2</span>*(R+<span class="number">1</span>)+(R+<span class="number">1</span>),</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">stepX</span>:<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">4</span> -<span class="number">2</span>),</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">stepY</span>:-<span class="number">2</span>*numArray[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*numArray.<span class="property">length</span>)],</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">color</span>:colorArray[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*colorArray.<span class="property">length</span>)],</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">disY</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;;</span></span><br><span class="line"><span class="language-javascript">                    balls.<span class="title function_">push</span>(ball);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*渲染*/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//重置画布宽度，达到清空画布的效果</span></span></span><br><span class="line"><span class="language-javascript">        canvas.<span class="property">height</span> = <span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//渲染时钟</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">renderDigit</span>(i,data[i]);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//渲染小球</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; balls.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            cxt.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">            cxt.<span class="title function_">arc</span>(balls[i].<span class="property">x</span>,balls[i].<span class="property">y</span>,R,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>);</span></span><br><span class="line"><span class="language-javascript">            cxt.<span class="property">fillStyle</span> = balls[i].<span class="property">color</span>;</span></span><br><span class="line"><span class="language-javascript">            cxt.<span class="title function_">closePath</span>();</span></span><br><span class="line"><span class="language-javascript">            cxt.<span class="title function_">fill</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">clearInterval</span>(oTimer);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oTimer = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//更新时钟</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">updateDigitTime</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//更新小球状态</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">updateBalls</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//渲染</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">render</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;,<span class="number">50</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;)();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>主题配置文件中 <code>custom_file_path</code> 需开启 <code>sidebar: source/_data/sidebar.njk</code> 配置</strong></p>
<ol start="2">
<li>在 <code>source/_data/styles.styl</code> 添加：</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 粒子时钟样式</span><br><span class="line"><span class="selector-class">.site-overview</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">canvas</span><span class="selector-id">#canvas</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>主题配置文件中 <code>custom_file_path</code> 需开启 <code>style: source/_data/styles.styl</code> 配置</strong></p>
<h2 id="在文章结尾添加本文结束标志"><a href="#在文章结尾添加本文结束标志" class="headerlink" title="在文章结尾添加本文结束标志"></a>在文章结尾添加本文结束标志</h2><p>在 <code>source/_data/post-body-end.njk</code> 添加：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% if not is_index and theme.post_end_tag.enable %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;font-size:22px;letter-spacing:10px;user-select:none;color:#bbb;&quot;</span>&gt;</span>-------------本文结束<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-paw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>感谢您的阅读-------------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>主题配置文件中 <code>custom_file_path</code> 需开启 <code>postBodyEnd: source/_data/post-body-end.njk</code> 配置</strong></p>
<p>然后我们在<strong>主题配置</strong>文件中添加以下代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文章末尾添加“本文结束”标记</span></span><br><span class="line"><span class="attr">post_end_tag:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="代码块折叠"><a href="#代码块折叠" class="headerlink" title="代码块折叠"></a>代码块折叠</h2><ol>
<li>新建内建标签 fold：我们可以在项目根目录下新建 <code>scripts/tags</code> 文件夹（即 <code>scripts/tags/</code>），新建 <code>fold_tag.js</code>：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* global hexo */</span></span><br><span class="line"><span class="comment">// Usage: &#123;% fold 点击显/隐内容 %&#125; Something &#123;% endfold %&#125;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fold</span> (args, content) &#123;</span><br><span class="line">  <span class="keyword">var</span> text = args[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span>(!text) text = <span class="string">&quot;点击显/隐&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;&lt;div&gt;&lt;div class=&quot;fold_hider&quot;&gt;&lt;div class=&quot;close hider_title&quot;&gt;&#x27;</span> + text + <span class="string">&#x27;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;fold&quot;&gt;\n&#x27;</span> + hexo.<span class="property">render</span>.<span class="title function_">renderSync</span>(&#123;<span class="attr">text</span>: content, <span class="attr">engine</span>: <span class="string">&#x27;markdown&#x27;</span>&#125;) + <span class="string">&#x27;\n&lt;/div&gt;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">tag</span>.<span class="title function_">register</span>(<span class="string">&#x27;fold&#x27;</span>, fold, &#123;<span class="attr">ends</span>: <span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建 <code>source/js/fold_action.js</code>：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;.fold_hider&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        $(<span class="string">&#x27;&gt;.fold&#x27;</span>, <span class="variable language_">this</span>.<span class="property">parentNode</span>).<span class="title function_">slideToggle</span>();</span><br><span class="line">        $(<span class="string">&#x27;&gt;:first&#x27;</span>, <span class="variable language_">this</span>).<span class="title function_">toggleClass</span>(<span class="string">&#x27;open&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//默认情况下折叠</span></span><br><span class="line">    $(<span class="string">&quot;div.fold&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;none&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>我们在 <code>source/_data/body-end.njk</code> 文件中添加如下代码：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;# 代码块折叠 #&#125;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;/js/fold_action.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>主题配置文件中 <code>custom_file_path</code> 需开启 <code>postBodyEnd: source/_data/post-body-end.njk</code> 配置</strong></p>
<ol start="4">
<li>最后，修改 <code>source/_data/style.styl</code> 配置风格：</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 代码折叠功能添加</span><br><span class="line"><span class="selector-class">.hider_title</span>&#123;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ef4a05</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.close</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;▼&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.open</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;▲&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>主题配置文件中 <code>custom_file_path</code> 需开启 <code>style: source/_data/styles.styl</code> 配置</strong></p>
<ol start="5">
<li>使用方法：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% fold 点击显/隐内容 %&#125;</span><br><span class="line">something you want to fold, include code block.</span><br><span class="line">&#123;% endfold %&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Go并发-使用协程、通道和select</title>
    <url>/GO/Go%E5%B9%B6%E5%8F%91-%E4%BD%BF%E7%94%A8%E5%8D%8F%E7%A8%8B%E3%80%81%E9%80%9A%E9%81%93%E5%92%8Cselect/</url>
    <content><![CDATA[<h2 id="通道和阻塞"><a href="#通道和阻塞" class="headerlink" title="通道和阻塞"></a>通道和阻塞</h2><p>通道（channel）和协程（goroutine）是实现Go并发程序的两种机制。其中，通道又分为无缓冲通道和有缓冲通道两种，在编写实际的并发程序时，基本都使用异步模式的有缓冲通道。通道又可细分为支持读和写的双向通道，只读的通道，只写的通道三种。</p>
<h2 id="通道阻塞场景"><a href="#通道阻塞场景" class="headerlink" title="通道阻塞场景"></a>通道阻塞场景</h2><p>无论是有缓存通道、还是无缓冲通道都存在阻塞的情况。阻塞场景共4个，有缓存和无缓冲各2个。</p>
<p>无缓冲通道的特点是，发送的数据需要被读取后发送才会完成（同步），它阻塞场景是：</p>
<ul>
<li>通道中无数据，但执行读通道。</li>
<li>通道中无数据，向通道写数据，但无协程读取。</li>
</ul>
<p>有缓存通道的特点是，有缓存时可以向通道中写入数据后直接返回（异步），它阻塞场景是：</p>
<ul>
<li>通道缓存无数据，但执行读通道(接收数据)。</li>
<li>通道缓存已经占满，向通道写数据(发送数据)，但无协程读。</li>
</ul>
<h2 id="使用协程、通道和select"><a href="#使用协程、通道和select" class="headerlink" title="使用协程、通道和select"></a>使用协程、通道和select</h2><p>Go的select关键字可以让我们操作多个通道，将协程（goroutine），通道（channel）和select结合起来构成了Go的一个强大特性。</p>
<span id="more"></span>

<p>首先，我们来看一个简短代码，如下所示</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>, <span class="number">1</span>)         <span class="comment">//定义两个有缓冲通道，容量为1</span></span><br><span class="line">    c2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(time.Second * <span class="number">1</span>)   <span class="comment">//每隔1秒发送数据</span></span><br><span class="line">        c1 &lt;- <span class="string">&quot;name: xuchao&quot;</span></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(time.Second * <span class="number">2</span>)    <span class="comment">//每隔2秒发送数据</span></span><br><span class="line">        c2 &lt;- <span class="string">&quot;age: 25&quot;</span></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++ &#123;                <span class="comment">//使用select来等待这两个通道的值，然后输出</span></span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> msg1 := &lt;- c1:</span><br><span class="line">            fmt.Println(msg1)</span><br><span class="line">        <span class="keyword">case</span> msg2 := &lt;- c2:</span><br><span class="line">            fmt.Println(msg2)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># go run channel.go </span><br><span class="line">name: xuchao</span><br><span class="line">age: 25</span><br></pre></td></tr></table></figure>

<p>如我们所期望的，程序输出了正确的值。对于select语句而言，它不断地检测通道是否有值过来，一旦发现有值过来，立刻获取输出。</p>
<h2 id="使用Select-超时实现无阻塞读写"><a href="#使用Select-超时实现无阻塞读写" class="headerlink" title="使用Select+超时实现无阻塞读写"></a>使用Select+超时实现无阻塞读写</h2><p>select是执行选择操作的一个结构，它里面有一组case语句，它会执行其中无阻塞的那一个，如果都阻塞了，那就等待其中一个不阻塞，进而继续执行，它有一个default语句，该语句是永远不会阻塞的，我们可以借助它实现无阻塞的操作。</p>
<p>但使用default实现的无阻塞通道阻塞有一个缺陷：当通道不可读或写的时候，会即可返回。实际场景更多的需求是，我们希望尝试读一会数据，或者尝试写一会数据，如果实在没法读写再返回，程序继续做其它的事情。</p>
<p>使用定时器替代default可以解决这个问题，给通道增加读写数据的容忍时间，如果5s内无法读写，就即刻返回。示例代码修改一下会是这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line">	&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	c1 := make(chan string, 1) //定义两个有缓冲通道，容量分别为1</span><br><span class="line">	c2 := make(chan string, 1)</span><br><span class="line"></span><br><span class="line">	go func() &#123;                     //定义一个协程</span><br><span class="line">		time.Sleep(time.Second * 1) //隔1秒发送数据</span><br><span class="line">		c1 &lt;- &quot;name: xuchao&quot;        //向c1通道发送数据</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	go func() &#123;</span><br><span class="line">		time.Sleep(time.Second * 6) //隔6秒发送数据</span><br><span class="line">		c2 &lt;- &quot;age: 25&quot;             //向c2通道发送数据</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	for i := 0; i &lt; 2; i++ &#123;                  //使用select来获取这两个通道的值，然后输出</span><br><span class="line">		tm := time.NewTimer(time.Second * 5) //给通道创建容忍时间，如果5s内无法读写，就即刻返回</span><br><span class="line">		select &#123;</span><br><span class="line">		case msg1 := &lt;-c1:          //接收c1通道数据（消费数据）</span><br><span class="line">			fmt.Println(msg1)</span><br><span class="line">		case msg2 := &lt;-c2:          //接收c2通道数据（消费数据）</span><br><span class="line">			fmt.Println(msg2)</span><br><span class="line">		case &lt;-tm.C:</span><br><span class="line">			fmt.Println(&quot;send data timeout!&quot;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果就会变成超时返回：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># go run channel2.go </span><br><span class="line">name: xuchao</span><br><span class="line">send data timeout!</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>为什么Go语言对通道要限制长度而不提供无限长度的通道？</strong><br>我们知道通道（channel）是在两个 goroutine间通信的桥梁。当数据提供方供给速度大于消费方数据处理速度时，如果通道不限制长度，那么内存将不断膨胀直到应用崩溃。因此，限制通道的长度有利于约束数据提供方的供给速度，才能正常地处理数据。</p>
<p><strong>常用的select场景</strong></p>
<ul>
<li>无阻塞的读、写通道。即使通道是带缓存的，也是存在阻塞的情况，使用select可以完美的解决阻塞读写。</li>
<li>给某个请求&#x2F;处理&#x2F;操作，设置超时时间，一旦超时时间内无法完成，则停止处理。</li>
<li>select本色：多通道处理。</li>
</ul>
<p><strong>解决阻塞的2种办法</strong></p>
<ul>
<li>使用select的default语句，在channel不可读写时，即可返回</li>
<li>使用select+定时器，在超时时间内，channel不可读写，则返回（推荐方式）</li>
</ul>
<p>记住，在for循环里不要使用select + time.After的组合，易造成内存泄漏，应当使用NewTimer来做定时器。当使用golang过程中，遇到性能和内存gc问题，都可以使用golang tool pprof来排查分析问题。</p>
]]></content>
      <categories>
        <category>GO</category>
      </categories>
      <tags>
        <tag>GO</tag>
        <tag>channel</tag>
        <tag>goroutine</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel 服务容器</title>
    <url>/Laravel/learn-laravel-container/</url>
    <content><![CDATA[<blockquote>
<p>容器，字面上理解就是装东西的东西。常见的变量、对象属性等都可以算是容器。一个容器能够装什么，全部取决于你对该容器的定义。当然，有这样一种容器，它存放的不是文本、数值，而是对象、对象的描述（类、接口）或者是提供对象的回调，通过这种容器，我们得以实现许多高级的功能，其中最常提到的，就是 “解耦” 、“依赖注入（DI）”。本文就从这里开始。</p>
</blockquote>
<h2 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h2><div class="note info"><p>Laravel Framework version 5.1.41 (LTS)</p>
</div>

<h2 id="IoC-容器，-laravel-的核心"><a href="#IoC-容器，-laravel-的核心" class="headerlink" title="IoC 容器， laravel 的核心"></a>IoC 容器， laravel 的核心</h2><p>Laravel 的核心就是一个 <code>IoC 容器</code>，根据文档，称其为“<code>服务容器</code>”，顾名思义，该容器提供了整个框架中需要的一系列服务。作为初学者，很多人会在这一个概念上犯难，因此，我打算从一些基础的内容开始讲解，通过理解面向对象开发中依赖的产生和解决方法，来逐渐揭开“依赖注入”的面纱，逐渐理解这一神奇的设计理念。</p>
<p>本文一大半内容都是通过举例来让读者去理解什么是 <code>IoC（控制反转）</code> 和 <code>DI（依赖注入）</code>，通过理解这些概念，来更加深入。更多关于 laravel 服务容器的用法建议阅读文档即可。</p>
<h2 id="IoC-容器诞生的故事"><a href="#IoC-容器诞生的故事" class="headerlink" title="IoC 容器诞生的故事"></a>IoC 容器诞生的故事</h2><p>讲解 IoC 容器有很多的文章，我之前也写过。但现在我打算利用当下的灵感重新来过，那么开始吧。</p>
<span id="more"></span>

<h3 id="超人和超能力，依赖的产生！"><a href="#超人和超能力，依赖的产生！" class="headerlink" title="超人和超能力，依赖的产生！"></a>超人和超能力，依赖的产生！</h3><p>面向对象编程，有以下几样东西无时不刻的接触：<code>接口</code>、<code>类</code>还有<code>对象</code>。这其中，接口是类的原型，一个类必须要遵守其实现的接口；对象则是一个类实例化后的产物，我们称其为一个实例。当然这样说肯定不利于理解，我们就实际的写点中看不中用的代码辅助学习。</p>
<blockquote>
<p>怪物横行的世界，总归需要点超级人物来摆平。</p>
</blockquote>
<p>我们把一个“超人”作为一个类，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Superman</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以想象，一个超人诞生的时候肯定拥有至少一个超能力，这个超能力也可以抽象为一个对象，为这个对象定义一个描述他的类吧。一个超能力肯定有多种属性、（操作）方法，这个尽情的想象，但是目前我们先大致定义一个只有属性的“超能力”，至于能干啥，我们以后再丰富：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Power</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 能力值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$ability</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 能力范围或距离</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$range</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$ability</span>, <span class="variable">$range</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ability = <span class="variable">$ability</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;range = <span class="variable">$range</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时候我们回过头，修改一下之前的“超人”类，让一个“超人”创建的时候被赋予一个超能力：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Superman</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$power</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;power = <span class="keyword">new</span> <span class="title class_">Power</span>(<span class="number">999</span>, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样的话，当我们创建一个“超人”实例的时候，同时也创建了一个“超能力”的实例，但是，我们看到了一点，“超人”和“超能力”之间不可避免的产生了一个依赖。</p>
<blockquote>
<p>所谓“依赖”，就是 “我若依赖你，我就不能离开你”。</p>
</blockquote>
<p>在一个贯彻面向对象编程的项目中，这样的依赖随处可见。少量的依赖并不会有太过直观的影响，我们随着这个例子逐渐铺开，让大家慢慢意识到，当依赖达到一个量级时，是怎样一番噩梦般的体验。当然，我也会自然而然的讲述如何解决问题。</p>
<h3 id="一堆乱麻-——-可怕的依赖"><a href="#一堆乱麻-——-可怕的依赖" class="headerlink" title="一堆乱麻 —— 可怕的依赖"></a>一堆乱麻 —— 可怕的依赖</h3><p>之前的例子中，超能力类实例化后是一个具体的超能力，但是我们知道，超人的超能力是多元化的，每种超能力的方法、属性都有不小的差异，没法通过一种类描述完全。我们现在进行修改，我们假设超人可以有以下多种超能力：</p>
<ul>
<li>飞行，属性有：飞行速度、持续飞行时间</li>
<li>蛮力，属性有：力量值</li>
<li>能量弹，属性有：伤害值、射击距离、同时射击个数</li>
</ul>
<p>我们创建了如下类：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flight</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$speed</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$holdtime</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$speed</span>, <span class="variable">$holdtime</span></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Force</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$force</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$force</span></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shot</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$atk</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$range</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$limit</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$atk</span>, <span class="variable">$range</span>, <span class="variable">$limit</span></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>为了省事儿我没有详细写出 __construct() 这个构造函数的全部，只写了需要传递的参数。</em></p>
<p>好了，这下我们的超人有点“忙”了。在超人初始化的时候，我们会根据需要来实例化其拥有的超能力吗，大致如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Superman</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$power</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;power = <span class="keyword">new</span> <span class="title class_">Fight</span>(<span class="number">9</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="comment">// $this-&gt;power = new Force(45);</span></span><br><span class="line">        <span class="comment">// $this-&gt;power = new Shot(99, 50, 2);</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        $this-&gt;power = array(</span></span><br><span class="line"><span class="comment">            new Force(45),</span></span><br><span class="line"><span class="comment">            new Shot(99, 50, 2)</span></span><br><span class="line"><span class="comment">        );</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们需要自己手动的在构造函数内（或者其他方法里）实例化一系列需要的类，这样并不好。可以想象，假如需求变更（不同的怪物横行地球），需要更多的有针对性的 <strong>新的</strong> 超能力，或者需要 <strong>变更</strong> 超能力的方法，我们必须 <code>重新改造</code> 超人。<strong>换句话说就是，改变超能力的同时，我还得重新制造个超人。</strong>效率太低了！新超人还没创造完成世界早已被毁灭。</p>
<blockquote>
<p>这时，灵机一动的人想到：为什么不可以这样呢？超人的能力可以被随时更换，只需要添加或者更新一个芯片或者其他装置啥的（想到钢铁侠没）。这样的话就不要整个重新来过了。</p>
</blockquote>
<p>对，就是这样的。</p>
<p>我们不应该手动在 “超人” 类中固化了他的 “超能力” 初始化的行为，而转由外部负责，由外部创造超能力模组、装置或者芯片等（我们后面统一称为 “模组”），植入超人体内的某一个接口，这个接口是一个既定的，只要这个 “模组” 满足这个接口的装置都可以被超人所利用，可以提升、增加超人的某一种能力。这种由外部负责其依赖需求的行为，我们可以称其为 “<code>控制反转（IoC）</code>”。</p>
<h3 id="工厂模式，依赖转移！"><a href="#工厂模式，依赖转移！" class="headerlink" title="工厂模式，依赖转移！"></a>工厂模式，依赖转移！</h3><p>当然，实现控制反转的方法有几种。在这之前，不如我们先了解一些好玩的东西。</p>
<blockquote>
<p>我们可以想到，组件、工具（或者超人的模组），是一种可被生产的玩意儿，生产的地方当然是 “工厂（Factory）”，于是有人就提出了这样一种模式： 工厂模式。</p>
</blockquote>
<p>工厂模式，顾名思义，就是一个类所依赖的外部事物的实例，都可以被一个或多个 “工厂” 创建的这样一种开发模式，就是 “<code>工厂模式</code>”。</p>
<p>我们为了给超人制造超能力模组，我们创建了一个工厂，它可以制造各种各样的模组，且仅需要通过一个方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperModuleFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeModule</span>(<span class="params"><span class="variable">$moduleName</span>, <span class="variable">$options</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$moduleName</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;Fight&#x27;</span>:   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Fight</span>(<span class="variable">$options</span>[<span class="number">0</span>], <span class="variable">$options</span>[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;Force&#x27;</span>:   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Force</span>(<span class="variable">$options</span>[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;Shot&#x27;</span>:    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Shot</span>(<span class="variable">$options</span>[<span class="number">0</span>], <span class="variable">$options</span>[<span class="number">1</span>], <span class="variable">$options</span>[<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时候，超人 创建之初就可以使用这个工厂！</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Superman</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$power</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化工厂</span></span><br><span class="line">        <span class="variable">$factory</span> = <span class="keyword">new</span> SuperModuleFactory;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 通过工厂提供的方法制造需要的模块</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;power = <span class="variable">$factory</span>-&gt;<span class="title function_ invoke__">makeModule</span>(<span class="string">&#x27;Fight&#x27;</span>, [<span class="number">9</span>, <span class="number">100</span>]);</span><br><span class="line">        <span class="comment">// $this-&gt;power = $factory-&gt;makeModule(&#x27;Force&#x27;, [45]);</span></span><br><span class="line">        <span class="comment">// $this-&gt;power = $factory-&gt;makeModule(&#x27;Shot&#x27;, [99, 50, 2]);</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        $this-&gt;power = array(</span></span><br><span class="line"><span class="comment">            $factory-&gt;makeModule(&#x27;Force&#x27;, [45]),</span></span><br><span class="line"><span class="comment">            $factory-&gt;makeModule(&#x27;Shot&#x27;, [99, 50, 2])</span></span><br><span class="line"><span class="comment">        );</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看得出，我们不再需要在超人初始化之初，去初始化许多第三方类，只需初始化一个工厂类，即可满足需求。但这样似乎和以前区别不大，只是没有那么多 <code>new</code> 关键字。其实我们稍微改造一下这个类，你就明白，工厂类的真正意义和价值了。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Superman</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$power</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$modules</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化工厂</span></span><br><span class="line">        <span class="variable">$factory</span> = <span class="keyword">new</span> SuperModuleFactory;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 通过工厂提供的方法制造需要的模块</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$modules</span> <span class="keyword">as</span> <span class="variable">$moduleName</span> =&gt; <span class="variable">$moduleOptions</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;power[] = <span class="variable">$factory</span>-&gt;<span class="title function_ invoke__">makeModule</span>(<span class="variable">$moduleName</span>, <span class="variable">$moduleOptions</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 创建超人</span></span><br><span class="line"><span class="variable">$superman</span> = <span class="keyword">new</span> <span class="title class_">Superman</span>([</span><br><span class="line">    <span class="string">&#x27;Fight&#x27;</span> =&gt; [<span class="number">9</span>, <span class="number">100</span>], </span><br><span class="line">    <span class="string">&#x27;Shot&#x27;</span> =&gt; [<span class="number">99</span>, <span class="number">50</span>, <span class="number">2</span>]</span><br><span class="line">    ]);</span><br></pre></td></tr></table></figure>

<p>现在修改的结果令人满意。现在，“超人” 的创建不再依赖任何一个 “超能力” 的类，我们如若修改了或者增加了新的超能力，只需要针对修改 <code>SuperModuleFactory</code> 即可。扩充超能力的同时不再需要重新编辑超人的类文件，使得我们变得很轻松。但是，这才刚刚开始。</p>
<h3 id="再进一步！IoC-容器的重要组成-——-依赖注入！"><a href="#再进一步！IoC-容器的重要组成-——-依赖注入！" class="headerlink" title="再进一步！IoC 容器的重要组成 —— 依赖注入！"></a>再进一步！IoC 容器的重要组成 —— 依赖注入！</h3><p>由 “超人” 对 “超能力” 的依赖变成 “超人” 对 “超能力模组工厂” 的依赖后，对付小怪兽们变得更加得心应手。但这也正如你所看到的，依赖并未解除，只是由原来对多个外部的依赖变成了对一个 “工厂” 的依赖。假如工厂出了点麻烦，问题变得就很棘手。</p>
<blockquote>
<p>其实大多数情况下，工厂模式已经足够了。工厂模式的缺点就是：接口未知（即没有一个很好的契约模型，关于这个我马上会有解释）、产生对象类型单一。总之就是，还是不够灵活。虽然如此，工厂模式依旧十分优秀，并且适用于绝大多数情况。不过我们为了讲解后面的 <code>依赖注入</code> ，这里就先夸大一下工厂模式的缺陷咯。</p>
</blockquote>
<p>我们知道，超人依赖的模组，我们要求有统一的接口，这样才能和超人身上的注入接口对接，最终起到提升超能力的效果。</p>
<p>事实上，我之前说谎了，不仅仅只有一堆小怪兽，还有更多的大怪兽。嘿嘿。额，这时候似乎工厂的生产能力显得有些不足 —— 由于工厂模式下，所有的模组都已经在工厂类中安排好了，如果有新的、高级的模组加入，我们必须修改工厂类（好比增加新的生产线）：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperModuleFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeModule</span>(<span class="params"><span class="variable">$moduleName</span>, <span class="variable">$options</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$moduleName</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;Fight&#x27;</span>:   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Fight</span>(<span class="variable">$options</span>[<span class="number">0</span>], <span class="variable">$options</span>[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;Force&#x27;</span>:   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Force</span>(<span class="variable">$options</span>[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;Shot&#x27;</span>:    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Shot</span>(<span class="variable">$options</span>[<span class="number">0</span>], <span class="variable">$options</span>[<span class="number">1</span>], <span class="variable">$options</span>[<span class="number">2</span>]);</span><br><span class="line">            <span class="comment">// case &#x27;more&#x27;: .......</span></span><br><span class="line">            <span class="comment">// case &#x27;and more&#x27;: .......</span></span><br><span class="line">            <span class="comment">// case &#x27;and more&#x27;: .......</span></span><br><span class="line">            <span class="comment">// case &#x27;oh no! its too many!&#x27;: .......</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到没。。。噩梦般的感受！</p>
<blockquote>
<p>其实灵感就差一步！你可能会想到更为灵活的办法！对，下一步就是我们今天的主要配角 —— DI （依赖注入）</p>
</blockquote>
<p>由于对超能力模组的需求不断增大，我们需要集合整个世界的高智商人才，一起解决问题，不应该仅仅只有几个工厂垄断负责。不过高智商人才们都非常自负，认为自己的想法是对的，创造出的超能力模组没有统一的接口，自然而然无法被正常使用。这时我们需要提出一种契约，这样无论是谁创造出的模组，都符合这样的接口，自然就可被正常使用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SuperModuleInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 超能力激活方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 任何一个超能力都得有该方法，并拥有一个参数</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@param</span> array $target 针对目标，可以是一个或多个，自己或他人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">activate</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$target</span></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上文中，我们定下了一个接口 （超能力模组的规范、契约），所有被创造的模组必须遵守该规范，才能被生产。</p>
</blockquote>
<blockquote>
<p>其实，这就是 php 中 <code>接口（ interface ）</code> 的用处和意义！很多人觉得，为什么 php 需要接口这种东西？难道不是 java 、 C# 之类的语言才有的吗？这么说，只要是一个正常的面向对象编程语言（虽然 php 可以面向过程），都应该具备这一特性。因为一个 <code>对象（object）</code> 本身是由他的模板或者原型 —— <code>类 （class）</code> ，经过实例化后产生的一个具体事物，而有时候，实现统一种方法且不同功能（或特性）的时候，会存在很多的类（class），这时候就需要有一个契约，让大家编写出可以被随时替换却不会产生影响的接口。这种由编程语言本身提出的硬性规范，会增加更多优秀的特性。</p>
</blockquote>
<blockquote>
<p>虽然有些绕，但通过我们接下来的实例，大家会慢慢领会接口带来的好处。</p>
</blockquote>
<p>这时候，那些提出更好的超能力模组的高智商人才，遵循这个接口，创建了下述（模组）类：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * X-超能量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XPower</span> <span class="keyword">implements</span> <span class="title">SuperModuleInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">activate</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$target</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 这只是个例子。。具体自行脑补</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 终极炸弹 （就这么俗）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UltraBomb</span> <span class="keyword">implements</span> <span class="title">SuperModuleInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">activate</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$target</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 这只是个例子。。具体自行脑补</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时，为了防止有些 “砖家” 自作聪明，或者一些叛徒恶意捣蛋，不遵守契约胡乱制造模组，影响超人，我们对超人初始化的方法进行改造：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Superman</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$module</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">SuperModuleInterface <span class="variable">$module</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;module = <span class="variable">$module</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改造完毕！现在，当我们初始化 “超人” 类的时候，提供的模组实例必须是一个 <code>SuperModuleInterface</code> 接口的实现。否则就会提示错误。</p>
<p>正是由于超人的创造变得容易，一个超人也就不需要太多的超能力，我们可以创造多个超人，并分别注入需要的超能力模组即可。这样的话，虽然一个超人只有一个超能力，但超人更容易变多，我们也不怕怪兽啦！</p>
<blockquote>
<p>现在有人疑惑了，你要讲的 <code>依赖注入</code> 呢？</p>
</blockquote>
<blockquote>
<p>其实，上面讲的内容，正是依赖注入。</p>
</blockquote>
<p>什么叫做 <code>依赖注入</code>？</p>
<p>本文从开头到现在提到的一系列依赖，只要不是由内部生产（比如初始化、构造函数 <code>__construct</code> 中通过工厂方法、自行手动 new 的），而是由外部以参数或其他形式注入的，都属于 <code>依赖注入（DI）</code> 。是不是豁然开朗？事实上，就是这么简单。下面就是一个典型的依赖注入：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 超能力模组</span></span><br><span class="line"><span class="variable">$superModule</span> = <span class="keyword">new</span> XPower;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 初始化一个超人，并注入一个超能力模组依赖</span></span><br><span class="line"><span class="variable">$superMan</span> = <span class="keyword">new</span> <span class="title class_">Superman</span>(<span class="variable">$superModule</span>);</span><br></pre></td></tr></table></figure>

<p>关于依赖注入这个本文的主要配角，也就这么多需要讲的。理解了依赖注入，我们就可以继续深入问题。慢慢走近今天的主角……</p>
<h3 id="更为先进的工厂-——-IoC-容器！"><a href="#更为先进的工厂-——-IoC-容器！" class="headerlink" title="更为先进的工厂 —— IoC 容器！"></a>更为先进的工厂 —— IoC 容器！</h3><p>刚刚列了一段代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$superModule</span> = <span class="keyword">new</span> XPower;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$superMan</span> = <span class="keyword">new</span> <span class="title class_">Superman</span>(<span class="variable">$superModule</span>);</span><br></pre></td></tr></table></figure>

<p>读者应该看出来了，手动的创建了一个超能力模组、手动的创建超人并注入了刚刚创建超能力模组。呵呵，手动。</p>
<blockquote>
<p>现代社会，应该是高效率的生产，干净的车间，完美的自动化装配。</p>
</blockquote>
<p>一群怪兽来了，如此低效率产出超人是不现实，我们需要自动化 —— 最多一条指令，千军万马来相见。我们需要一种高级的生产车间，我们只需要向生产车间提交一个脚本，工厂便能够通过指令自动化生产。这种更为高级的工厂，就是工厂模式的升华 —— <code>IoC 容器</code>。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$binds</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$instances</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params"><span class="variable">$abstract</span>, <span class="variable">$concrete</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$concrete</span> <span class="keyword">instanceof</span> <span class="built_in">Closure</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binds[<span class="variable">$abstract</span>] = <span class="variable">$concrete</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;instances[<span class="variable">$abstract</span>] = <span class="variable">$concrete</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params"><span class="variable">$abstract</span>, <span class="variable">$parameters</span> = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;instances[<span class="variable">$abstract</span>])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;instances[<span class="variable">$abstract</span>];</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="title function_ invoke__">array_unshift</span>(<span class="variable">$parameters</span>, <span class="variable language_">$this</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">call_user_func_array</span>(<span class="variable language_">$this</span>-&gt;binds[<span class="variable">$abstract</span>], <span class="variable">$parameters</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时候，一个十分粗糙的容器就诞生了。现在的确很简陋，但不妨碍我们进一步提升他。先着眼现在，看看这个容器如何使用吧！</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个容器（后面称作超级工厂）</span></span><br><span class="line"><span class="variable">$container</span> = <span class="keyword">new</span> Container;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 向该 超级工厂 添加 超人 的生产脚本</span></span><br><span class="line"><span class="variable">$container</span>-&gt;<span class="title function_ invoke__">bind</span>(<span class="string">&#x27;superman&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$container</span>, <span class="variable">$moduleName</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Superman</span>(<span class="variable">$container</span>-&gt;<span class="title function_ invoke__">make</span>(<span class="variable">$moduleName</span>));</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 向该 超级工厂 添加 超能力模组 的生产脚本</span></span><br><span class="line"><span class="variable">$container</span>-&gt;<span class="title function_ invoke__">bind</span>(<span class="string">&#x27;xpower&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$container</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> XPower;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 同上</span></span><br><span class="line"><span class="variable">$container</span>-&gt;<span class="title function_ invoke__">bind</span>(<span class="string">&#x27;ultrabomb&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$container</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> UltraBomb;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// ******************  华丽丽的分割线  **********************</span></span><br><span class="line"><span class="comment">// 开始启动生产</span></span><br><span class="line"><span class="variable">$superman_1</span> = <span class="variable">$container</span>-&gt;<span class="title function_ invoke__">make</span>(<span class="string">&#x27;superman&#x27;</span>, [<span class="string">&#x27;xpower&#x27;</span>]);</span><br><span class="line"><span class="variable">$superman_2</span> = <span class="variable">$container</span>-&gt;<span class="title function_ invoke__">make</span>(<span class="string">&#x27;superman&#x27;</span>, [<span class="string">&#x27;ultrabomb&#x27;</span>]);</span><br><span class="line"><span class="variable">$superman_3</span> = <span class="variable">$container</span>-&gt;<span class="title function_ invoke__">make</span>(<span class="string">&#x27;superman&#x27;</span>, [<span class="string">&#x27;xpower&#x27;</span>]);</span><br><span class="line"><span class="comment">// ...随意添加</span></span><br></pre></td></tr></table></figure>

<p>看到没？通过最初的 <code>绑定（bind）</code> 操作，我们向 超级工厂 注册了一些生产脚本，这些生产脚本在生产指令下达之时便会执行。发现没有？我们彻底的解除了 超人 与 超能力模组 的依赖关系，更重要的是，容器类也丝毫没有和他们产生任何依赖！我们通过注册、绑定的方式向容器中添加一段可以被执行的回调（可以是匿名函数、非匿名函数、类的方法）作为生产一个类的实例的 脚本 ，只有在真正的 <code>生产（make）</code> 操作被调用执行时，才会触发。</p>
<p>这样一种方式，使得我们更容易在创建一个实例的同时解决其依赖关系，并且更加灵活。当有新的需求，只需另外绑定一个“生产脚本”即可。</p>
<blockquote>
<p>实际上，真正的 IoC 容器更为高级。我们现在的例子中，还是需要手动提供超人所需要的模组参数，但真正的 IoC 容器会根据类的依赖需求，自动在注册、绑定的一堆实例中搜寻符合的依赖需求，并自动注入到构造函数参数中去。Laravel 框架的服务容器正是这么做的。实现这种功能其实理论上并不麻烦，但我并不会在本文中写出，因为……我懒得写。</p>
</blockquote>
<blockquote>
<p>不过我告诉大家，这种自动搜寻依赖需求的功能，是通过 <code>反射（Reflection）</code> 实现的，恰好的，php 完美的支持反射机制！关于反射，php 官方文档有详细的资料，并且中文翻译基本覆盖，足够学习和研究！</p>
</blockquote>
<blockquote>
<p><a href="http://php.net/manual/zh/book.reflection.php">http://php.net/manual/zh/book.reflection.php</a></p>
</blockquote>
<p>现在，到目前为止，我们已经不再惧怕怪兽们了。高智商人才集思广益，井井有条，根据接口契约创造规范的超能力模组。超人开始批量产出。最终，人人都是超人，你也可以是哦:stuck_out_tongue_closed_eyes:！</p>
<h2 id="回归正常世界。我们开始重新审视-laravel-的核心。"><a href="#回归正常世界。我们开始重新审视-laravel-的核心。" class="headerlink" title="回归正常世界。我们开始重新审视 laravel 的核心。"></a>回归正常世界。我们开始重新审视 laravel 的核心。</h2><p>现在，我们开始慢慢解读 laravel 的核心。其实，laravel 的核心就是一个 IoC 容器，也恰好是我之前所说的高级的 IoC 容器。</p>
<p>可以说，laravel 的核心本身十分轻量，并没有什么很神奇很实质性的应用功能。很多人用到的各种功能模块比如 <code>Route（路由）</code>、<code>Eloquent ORM（数据库 ORM 组件）</code>、<code>Request and Response（请求和响应）</code>等等等等，实际上都是与核心无关的类模块提供的，这些类从注册到实例化，最终被你所使用，其实都是 laravel 的服务容器负责的。</p>
<p>我们以大家最常见的 <code>Route</code> 类作为例子。大家可能经常见到路由定义是这样的：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// bla bla bla...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>实际上， <code>Route</code> 类被定义在这个命名空间：<code>Illuminate\Routing\Router</code>，文件 <code>vendor/laravel/framework/src/Illuminate/Routing/Router.php</code>。</p>
<p>我们通过打开发现，这个类的这一系列方法，如 <code>get</code>，<code>post</code>，<code>any</code> 等都不是静态（static）方法，这是怎么一回事儿？不要急，我们继续。</p>
<h3 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h3><p>我们在前文介绍 IoC 容器的部分中，提到了，一个类需要绑定、注册至容器中，才能被“制造”。</p>
<p>对，一个类要被容器所能够提取，必须要先注册至这个容器。既然 laravel 称这个容器叫做服务容器，那么我们需要某个服务，就得先注册、绑定这个服务到容器，那么提供服务并绑定服务至容器的东西，就是 <code>服务提供者（ServiceProvider）</code>。</p>
<blockquote>
<p>虽然，绑定一个类到容器不一定非要通过 <code>服务提供者（ServiceProvider）</code> 。</p>
</blockquote>
<blockquote>
<p>但是，我们知道，有时候我们的类、模块会有需要其他类和组件的情况，为了保证初始化阶段不会出现所需要的模块和组件没有注册的情况，laravel 将注册和初始化行为进行拆分，注册的时候就只能注册，初始化的时候就是初始化。拆分后的产物就是现在的 <code>服务提供者</code>。</p>
</blockquote>
<p>服务提供者主要分为两个部分，<code>register（注册）</code> 和 <code>boot（引导、初始化）</code>，具体参考文档。<code>register</code> 负责进行向容器注册“脚本”，但要注意注册部分不要有对未知事物的依赖，如果有，就要移步至 <code>boot</code> 部分。</p>
<h3 id="Facade"><a href="#Facade" class="headerlink" title="Facade"></a>Facade</h3><p>我们现在解答之前关于 <code>Route</code> 的方法为何能以静态方法访问的问题。实际上这个问题文档上有写，简单说来就是模拟一个类，提供一个静态魔术方法 <code>__callStatic</code>，并将该静态方法映射到真正的方法上。</p>
<p>我们使用的 <code>Route</code> 类实际上是 <code>Illuminate\Support\Facades\Route</code> 通过 <code>class_alias()</code> 函数创造的 <code>别名</code> 而已。这个类被定义在文件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">vendor/laravel/framework/src/Illuminate/Support/Facades/Route.php` </span><br></pre></td></tr></table></figure>

<p>我们打开文件一看……诶？怎么只有这么简单的一段代码呢？</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Support</span>\<span class="title class_">Facades</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> \Illuminate\Routing\Router</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Route</span> <span class="keyword">extends</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the registered name of the component.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFacadeAccessor</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;router&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实仔细看，会发现这个类继承了一个叫做 <code>Facade</code> 的类，到这里谜底差不多要解开了。</p>
<p>上述简单的定义中，我们看到了 <code>getFacadeAccessor</code> 方法返回了一个 <code>route</code>，这是什么意思呢？事实上，这个值被一个 <code>ServiceProvider</code> 注册过，大家应该知道注册了个什么，当然是那个真正的路由类！</p>
<blockquote>
<p>有人会问，Facade 是怎么实现的。我并不想说得太细，一个是我懒，另一个原因就是，自己发现一些东西更容易理解，并不容易忘记。很多细节我已经说了，建议大家自行去研究。</p>
</blockquote>
<p>至此，我们已经讲的差不多了。</p>
<h2 id="和平！我们该总结总结了！"><a href="#和平！我们该总结总结了！" class="headerlink" title="和平！我们该总结总结了！"></a>和平！我们该总结总结了！</h2><p>无论如何，世界和平了。</p>
<p>这里要总结的内容就是，其实很多事情并不复杂，怕的是复杂的理论内容。我觉得很多东西一旦想通也就那么回事儿。很多人觉得 laravel 这不好那不好、这里难哪里难，我只能说，laravel 的确不是一流和优秀的框架，说 laravel 是一流、优秀的框架的人，不是 laravel 的粉丝那么就是跟风炒作。Laravel 最大的特点和优秀之处就是使用了很多 php 比较新（实际上并不新）的概念和技术（也就一堆语法糖）而已。因此 laravel 的确符合一个适宜学习的框架。Laravel 的构思的确和其他框架有很大不同，这也要求学习他的人必须熟练 php，并 基础扎实！如果你觉得学 laravel 框架十分困难，那么原因只有一个：你 php 基础不好。</p>
<p>另外，善于利用命名空间和面向对象的诸多特性，去追寻一些东西，你会发现，原来这一切这么容易。</p>
<div class="note default"><p>原文链接：<a href="https://www.insp.top/article/learn-laravel-container">laravel 学习笔记 —— 神奇的服务容器</a></p>
</div>]]></content>
      <categories>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Laravel</tag>
        <tag>Container</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7.1 切换命令行模式与桌面模式</title>
    <url>/Linux/CentOS-7-1-switch-in-command-line-mode-and-desktop-mode/</url>
    <content><![CDATA[<p>在 CentOS7.x 之前的版本都是通过修改 <code>/etc/inittab</code> 文件来设置启动顺序，具体可参考<a href="http://www.habadog.com/2012/03/03/centos-model-switch/">这里</a>。<br>但是此种方法并不适应于 CentOS7.x 版本，在该版本中，我们查看 <code>/etc/inittab</code> 文件可得</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[centos@localhost ~]$ vim /etc/inittab</span><br><span class="line"># inittab is no longer used when using systemd.</span><br><span class="line">#</span><br><span class="line"># ADDING CONFIGURATION HERE WILL HAVE NO EFFECT ON YOUR SYSTEM.</span><br><span class="line">#</span><br><span class="line"># Ctrl-Alt-Delete is handled by /usr/lib/systemd/system/ctrl-alt-del.target</span><br><span class="line">#</span><br><span class="line"># systemd uses &#x27;targets&#x27; instead of runlevels. By default, there are two main targets:</span><br><span class="line">#</span><br><span class="line"># multi-user.target: analogous to runlevel 3</span><br><span class="line"># graphical.target: analogous to runlevel 5</span><br><span class="line">#</span><br><span class="line"># To view current default target, run:</span><br><span class="line"># systemctl get-default</span><br><span class="line">#</span><br><span class="line"># To set a default target, run:</span><br><span class="line"># systemctl set-default TARGET.target</span><br></pre></td></tr></table></figure>

<p>该文件中已经详细说明了，不再使用 inittab 文件而是使用 systemd 代替，并且还指出，现在只有 multi-user 相当于运行级别是 3，graphical 相当于运行级别是 5，<br>现在可以使用如下命令设置默认启动级别了，注意要以 root 用户，或者是使用 sudo 权限。</p>
<blockquote>
<p>如果用户没有 sudo 权限，参考<a href="http://www.centoscn.com/CentosBug/osbug/2015/0114/4496.html">这里</a>进行设置。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[centos@localhost ~]$ sudo systemctl set-default multi-user.target</span><br><span class="line"><span class="built_in">rm</span> <span class="string">&#x27;/etc/systemd/system/default.target&#x27;</span></span><br><span class="line"><span class="built_in">ln</span> -s <span class="string">&#x27;/usr/lib/systemd/system/multi-user.target&#x27;</span> <span class="string">&#x27;/etc/systemd/system/default.target&#x27;</span></span><br></pre></td></tr></table></figure>

<p>设置成功之后 reboot 一下，即可顺利进入命令行界面了。<br>如果想要再次进入图形界面，在命令行中运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[centos@localhost ~]$ sudo systemctl set-default graphical.target</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 18.04 LTS中安装和美化ZSH Shell</title>
    <url>/Linux/install-zsh-shell-ubuntu-18-04/</url>
    <content><![CDATA[<blockquote>
<p>ZSH 或称 Z Shell 是一个类似于 Bash 和 SH 的 Linux Shell，它具有一些 Bash 和其它 Shell 不具备的高级功能。流行的 Git 版本控制系统也可以使用插件与 ZSH 很好的集成，这一点对软件开发人员来说非常有用。而且 ZSH 有非常多的主题和插件支持，比 Bash 更具可定制性。简单来说，ZSH 就是一款替代 Bash 且非常好用的 Linux Shell。</p>
</blockquote>
<h2 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h2><div class="note info"><p>Ubuntu 18.04.2 LTS</p>
</div>

<h2 id="安装ZSH-Shell"><a href="#安装ZSH-Shell" class="headerlink" title="安装ZSH Shell"></a>安装ZSH Shell</h2><p>ZSH 已经被收录到了 Ubuntu 18.04 LTS 的官方软件包存储库中，安装起来也非常容易。使用如下命令就可以直接安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install zsh</span><br></pre></td></tr></table></figure>

<p><img src="/images/Linux/install-zsh-shell-ubuntu-18-04/bd9f206bly1g1jqcbjc1yj210y0xg79k.jpg"></p>
<span id="more"></span>

<p>ZSH Shell 安装好之后，可以使用如下命令查看其版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zsh --version</span><br></pre></td></tr></table></figure>

<p><img src="/images/Linux/install-zsh-shell-ubuntu-18-04/bd9f206bly1g1jqdmy8raj210y0xg40i.jpg"></p>
<h2 id="设置ZSH为默认Shell"><a href="#设置ZSH为默认Shell" class="headerlink" title="设置ZSH为默认Shell"></a>设置ZSH为默认Shell</h2><p>使用以下命令找出 ZSH Shell 的路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">whereis zsh</span><br></pre></td></tr></table></figure>

<p><img src="/images/Linux/install-zsh-shell-ubuntu-18-04/bd9f206bly1g1jqfn1dlvj210y0xgdi1.jpg"></p>
<p>从上面的截图中可以看到，ZSH Shell 的路径是 <code>/usr/bin/zsh</code></p>
<p>使用如下命令将 ZSH 设置为当前登录用户的默认 Shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo usermod -s /usr/bin/zsh $(<span class="built_in">whoami</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/images/Linux/install-zsh-shell-ubuntu-18-04/bd9f206bly1g1jqhc9muwj210y0xgjta.jpg"></p>
<p>现在使用 <code>reboot</code> 或 <code>init 6</code> 命令重新启动 Ubuntu 18.04 LTS 计算机。在计算机重启后打开「终端」，可以看到以下窗口提示</p>
<p><img src="/images/Linux/install-zsh-shell-ubuntu-18-04/bd9f206bly1g1jqroex99j210y0xgdqx.jpg"></p>
<p>按键盘数字键 <code>2</code>，ZSH 会使用推荐的设置创建一个新的 <code>~/.zshrc</code> 配置文件。如下图所示，此后就可以正常使用 ZSH Shell 了</p>
<p><img src="/images/Linux/install-zsh-shell-ubuntu-18-04/bd9f206bly1g1jqy945y6j210y0xggr3.jpg"></p>
<h2 id="ZSH和Git与「Oh-My-ZSH」集成"><a href="#ZSH和Git与「Oh-My-ZSH」集成" class="headerlink" title="ZSH和Git与「Oh My ZSH」集成"></a>ZSH和Git与「Oh My ZSH」集成</h2><div class="note success"><p>ZSH 有一个致力于与 Git 版本控制系统一起工作的完整框架——「Oh My ZSH」，要了解「Oh My ZSH」的更多信息，请查看官方 <a href="https://github.com/robbyrussell/oh-my-zsh">Github</a> 页面。</p>
</div>

<p>运行以下命令在 Ubuntu 18.04 LTS 上安装 Git</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure>

<p>Git 安装好之后，执行以下命令在 Ubuntu 18.04 LTS 系统中安装「Oh My ZSH」</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/Linux/install-zsh-shell-ubuntu-18-04/bd9f206bly1g1jr8bzswij210y1kg47y.jpg"></p>
<h2 id="更改「Oh-My-ZSH」主题"><a href="#更改「Oh-My-ZSH」主题" class="headerlink" title="更改「Oh My ZSH」主题"></a>更改「Oh My ZSH」主题</h2><h3 id="安装内置主题"><a href="#安装内置主题" class="headerlink" title="安装内置主题"></a>安装内置主题</h3><p>「Oh My ZSH」预装了很多主题，您可以查看<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes">官网主题列表</a>来查找您喜欢的主题。</p>
<p>将 <code>~/.zshrc</code> 配置文件中原有的 <code>ZSH_THEME</code> 主题变量名称进行更改即可，例如要启用 <code>cloud</code> 主题，就改成</p>
<p><img src="/images/Linux/install-zsh-shell-ubuntu-18-04/bd9f206bly1g1jrcjvwebj21040xgn3c.jpg"></p>
<h3 id="安装第三方主题"><a href="#安装第三方主题" class="headerlink" title="安装第三方主题"></a>安装第三方主题</h3><p>这里以 <a href="https://draculatheme.com/zsh/">Dracula for ZSH</a> 为例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/dracula/zsh.git</span><br></pre></td></tr></table></figure>

<p><img src="/images/Linux/install-zsh-shell-ubuntu-18-04/bd9f206bly1g1jsek5lunj210y0xgacz.jpg"></p>
<p>把 <code>dracula.zsh-theme</code> 文件复制到「Oh My ZSH」主题目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> zsh/dracula.zsh-theme ~/.oh-my-zsh/themes/dracula.zsh-theme</span><br></pre></td></tr></table></figure>

<p><img src="/images/Linux/install-zsh-shell-ubuntu-18-04/bd9f206bly1g1jslq2qcrj210y0xg0ue.jpg"></p>
<p>将 <code>~/.zshrc</code> 配置文件中原有的 <code>ZSH_THEME</code> 主题变量名称改为 <code>dracula</code> 即可</p>
<p>现在可以关掉 Terminal 重新打开，也可以使用 <code>source ~/.zshrc</code> 或 <code>. ~/.zshrc</code> 来重新加载 zsh 的配置，让刚刚的配置生效。</p>
<h2 id="安装zsh-autosuggestion"><a href="#安装zsh-autosuggestion" class="headerlink" title="安装zsh-autosuggestion"></a>安装zsh-autosuggestion</h2><h3 id="Clone-插件"><a href="#Clone-插件" class="headerlink" title="Clone 插件"></a>Clone 插件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>

<h3 id="把插件名称加入「Oh-My-ZSH」插件列表"><a href="#把插件名称加入「Oh-My-ZSH」插件列表" class="headerlink" title="把插件名称加入「Oh My ZSH」插件列表"></a>把插件名称加入「Oh My ZSH」插件列表</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把插件名称加入插件列表</span></span><br><span class="line">plugins=(zsh-autosuggestions)</span><br></pre></td></tr></table></figure>

<p><img src="/images/Linux/install-zsh-shell-ubuntu-18-04/bd9f206bly1g1jrsr19krj210y0xgn2r.jpg"></p>
<h3 id="重新加载-zsh-的配置"><a href="#重新加载-zsh-的配置" class="headerlink" title="重新加载 zsh 的配置"></a>重新加载 zsh 的配置</h3><p>可以关掉 Terminal 重新打开，也可以使用 <code>source ~/.zshrc</code> 或 <code>. ~/.zshrc</code> 来重新加载 zsh 的配置，让刚刚的配置生效。</p>
<p>当自动提示出现后，按 ➡ 键或 ctrl + E 就能把自动提示的命令输入到当前的 Terminal。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>zsh</tag>
        <tag>oh my zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 文章保存为草稿</title>
    <url>/Hexo/hexo-draft/</url>
    <content><![CDATA[<h2 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h2><div class="note info"><p>Hexo 3.3.8</p>
</div>

<h2 id="传统建立文章方式"><a href="#传统建立文章方式" class="headerlink" title="传统建立文章方式"></a>传统建立文章方式</h2><p>一般我们都会使用 <code>hexo new &lt;title&gt;</code> 来建立文章，这种建立方法会将新文章建立在 <code>source/_posts</code> 目录下，当使用 <code>hexo generate</code> 编译 markdown 文件时，会将其 HTML 结果编译在 <code>public</code> 目录下，之后 <code>hexo deploy</code> 将会把 <code>public</code> 目录下所有文章部署到 GitHub，这是我们熟悉的 Hexo 流程。</p>
<p>这种建立文章方式的缺点是：若我们同时编辑多篇文章，只要其中一篇文章尚未编辑完成，也会随着 <code>hexo deploy</code> 一起部署到 GitHub，也就是 GitHub 可能会看到我们尚未完成的文章。</p>
<h2 id="建立文章草稿"><a href="#建立文章草稿" class="headerlink" title="建立文章草稿"></a>建立文章草稿</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new draft &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>Hexo 另外提供 <code>draft</code> 机制，它的原理是新文章将建立在 <code>source/_drafts</code> 目录下，因此 <code>hexo generate</code> 并不会将其编译到 <code>public</code> 目录下，所以 <code>hexo deploy</code> 也不会将其部署到 GitHub。</p>
<span id="more"></span>

<h2 id="本机预览草稿"><a href="#本机预览草稿" class="headerlink" title="本机预览草稿"></a>本机预览草稿</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo S --draft</span><br></pre></td></tr></table></figure>

<p>虽然 <code>hexo generate</code> 不会编译 <code>source/_drafts</code> 目录下的文章，但 Hexo 的 <code>Hexo server</code> 另外提供 <code>--draft</code> 参数，这让我们只要搭配 <code>hexo-browsersync</code> plugins，就可以达到一边编辑 <code>markdown</code> 文章，一边使用浏览器预览的目的。</p>
<h2 id="将草稿发布为正式文章"><a href="#将草稿发布为正式文章" class="headerlink" title="将草稿发布为正式文章"></a>将草稿发布为正式文章</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo P &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<p>其中 <code>&lt;filename&gt;</code> 为不包含 <code>md</code> 后缀的文章名称。它的原理只是将文章从 <code>source/_drafts</code> 移动到 <code>source/_posts</code> 而已。</p>
<p>之后的 <code>hexo generate</code> 与 <code>hexo deploy</code> 的用法就完全一样了。</p>
<div class="note success"><p>若日后想将正式文章转为为草稿，只需手动将文章从 <code>source/_posts</code> 目录移动到 <code>source/_drafts</code> 目录即可。</p>
</div>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis Pipeline</title>
    <url>/Redis/redis-pipeline/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在命令行中是没有 redis pipeline 功能的，但 redis 是支持 pipeline 的，而且在各个语言版的 client 中都有相应的实现。</p>
<p>简单概括 redis pipeline 的功能就是将单次请求变为批量请求。</p>
<p>由于网络开销延迟，就算 redis server 端有很强的处理能力，也会由于收到的 client 消息少，而造成吞吐量小。当 client 使用 pipelining 发送命令时，redis server 会将请求放到队列中（使用内存），执行完毕后一次性发送结果。</p>
<p>Pipeline 在某些场景下非常有用，比如有多个 command 需要被“及时的”提交，而且他们对相应结果没有互相依赖，对结果响应也无需立即获得，那么 pipeline 就可以充当这种“批处理”的工具；而且在一定程度上，可以较大的提升性能，性能提升的原因主要是 TCP 连接中减少了“交互往返”的时间。</p>
<p>管道（pipeline）可以一次性发送多条命令并在执行完后一次性将结果返回，pipeline 通过减少客户端与 redis 的通信次数来实现降低往返延时时间，而且 Pipeline 实现的原理是队列，而队列的原理是时先进先出，这样就保证数据的顺序性。 Pipeline 的默认的同步的个数为 53 个，也就是说 arges 中累加到 53 条数据时会把数据提交。</p>
<p>需要注意到是用 pipeline 方式打包命令发送，redis 必须在处理完所有命令前先缓存起所有命令的处理结果。打包的命令越多，缓存消耗内存也越多。所以并不是打包的命令越多越好。具体多少合适需要根据具体情况测试。</p>
<h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>有些系统可能对可靠性要求很高，每次操作都需要立马知道这次操作是否成功，是否数据已经写进 redis 了，那这种场景就不适合。</p>
<p>还有的系统，可能是批量的将数据写入 redis，允许一定比例的写入失败，那么这种场景就可以使用了，比如 10000 条一下进入 redis，可能失败了 2 条无所谓，后期有补偿机制就行了，比如短信群发这种场景，如果一下群发 10000 条，按照第一种模式去实现，那这个请求过来，要很久才能给客户端响应，这个延迟就太长了，如果客户端请求设置了超时时间 5 秒，那肯定就抛出异常了，而且本身群发短信要求实时性也没那么高，这时候用 pipeline 最好了。</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Pipeline</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 将 DateTime 对象转化为友好时间</title>
    <url>/PHP/create-a-friendly-date-format/</url>
    <content><![CDATA[<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 友好的时间显示</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * size = 1， 显示1位，如: 1年、3个月、5天、20小时...</span></span><br><span class="line"><span class="comment"> * size = 2， 显示2位，如: 1年1个月、1年3天、5天4小时、2小时25分...</span></span><br><span class="line"><span class="comment"> * size = 3， 显示3位，如: 1年1个月4天、1年3天20小时、5天4小时3秒、2小时25分10秒...</span></span><br><span class="line"><span class="comment"> * size = 4， 显示4位，如: 1年1个月4天16小时...</span></span><br><span class="line"><span class="comment"> * size &gt;= 5，显示5位，如: 1年1个月4天16小时15分钟...</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string|DateTime $datetime 日期字符串或日期 DateTime 对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> int $size                 精确到位数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bool $absolute            正数的时间间隔</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">friendlyDate</span>(<span class="params"><span class="variable">$datetime</span>, <span class="variable">$size</span> = <span class="number">1</span>, <span class="variable">$absolute</span> = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$datetime</span>)) &#123;</span><br><span class="line">        <span class="variable">$datetime</span> = <span class="keyword">new</span> <span class="title class_">DateTime</span>(<span class="variable">$datetime</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! (<span class="variable">$datetime</span> <span class="keyword">instanceof</span> DateTime)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\InvalidArgumentException</span>(<span class="string">&#x27;invalid &quot;DateTime&quot; object&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$now</span> = <span class="keyword">new</span> <span class="title class_">DateTime</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$absolute</span> &amp;&amp; <span class="variable">$datetime</span> &lt;= <span class="variable">$now</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$interval</span> = <span class="variable">$now</span>-&gt;<span class="title function_ invoke__">diff</span>(<span class="variable">$datetime</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$intervalData</span> = [</span><br><span class="line">        <span class="variable">$interval</span>-&gt;y, <span class="variable">$interval</span>-&gt;m, <span class="variable">$interval</span>-&gt;d,</span><br><span class="line">        <span class="variable">$interval</span>-&gt;h, <span class="variable">$interval</span>-&gt;i, <span class="variable">$interval</span>-&gt;s,</span><br><span class="line">    ];</span><br><span class="line">    <span class="variable">$intervalFormat</span> = [<span class="string">&#x27;年&#x27;</span>, <span class="string">&#x27;个月&#x27;</span>, <span class="string">&#x27;天&#x27;</span>, <span class="string">&#x27;小时&#x27;</span>, <span class="string">&#x27;分钟&#x27;</span>, <span class="string">&#x27;秒&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$intervalData</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$value</span>) &#123;</span><br><span class="line">            <span class="variable">$intervalData</span>[<span class="variable">$key</span>] = <span class="variable">$value</span> . <span class="variable">$intervalFormat</span>[<span class="variable">$key</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable">$intervalData</span>[<span class="variable">$key</span>]);</span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable">$intervalFormat</span>[<span class="variable">$key</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;&#x27;</span>, <span class="title function_ invoke__">array_slice</span>(<span class="variable">$intervalData</span>, <span class="number">0</span>, <span class="variable">$size</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Submodule 用法笔记</title>
    <url>/Git/git-submodule/</url>
    <content><![CDATA[<h2 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h2><div class="note info"><p>git version 2.21.0</p>
</div>

<h2 id="新增-submodule"><a href="#新增-submodule" class="headerlink" title="新增 submodule"></a>新增 submodule</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git submodule add https://github.com/theme-next/hexo-theme-next.git themes/next/</span></span><br><span class="line">git submodule add &lt;url&gt; &lt;folder&gt;</span><br></pre></td></tr></table></figure>

<div class="note danger"><p>如果出现 <code>xxx already exists in the index</code> 的提示，则给根据<a href="https://stackoverflow.com/questions/12898278/issue-with-adding-common-code-as-git-submodule-already-exists-in-the-index">Issue with adding common code as git submodule: “already exists in the index”
</a>里面的回答，执行 <code>git rm -f --cached &lt;folder&gt;</code> 后，在执行 <code>git submodule add</code></p>
</div>
<p>如果这个仓库先前没有用过 submodule，那么 Git 会在目录下建立一个叫做 <code>.gitmodules</code> 的文件，这里记录了 remote repo 的 URL 和这个 submodule 在此目录的路径。执行此命令后 submodule 和 <code>.gitmodules</code> 会自动 staged，这个时候可以 commit 和 push。</p>
<h2 id="更新-submodule"><a href="#更新-submodule" class="headerlink" title="更新 submodule"></a>更新 submodule</h2><p>必须到个人的目录底下执行 <code>git pull</code> 去拉取 upstream 的代码，可是这样会比较安全；若要一次全部更新所有的 submodule，可以用 <code>foreach</code> 命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule foreach --recursive git pull origin master</span><br></pre></td></tr></table></figure>

<h2 id="删除-submodule"><a href="#删除-submodule" class="headerlink" title="删除 submodule"></a>删除 submodule</h2><p>本以为会有像是 <code>git submodule rm</code> 这样的命令，结果竟然没有，必须辛苦的一个一个手动移除，不知道不实现这个命令的考量是什么，希望未来的版本能把它加上去。</p>
<span id="more"></span>

<p>移除 submodule 有以下几个步骤要做，先把 submodule 目录从版本控制移除：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> --cached &lt;folder&gt;</span><br><span class="line"><span class="built_in">rm</span> -rf &lt;folder&gt;</span><br></pre></td></tr></table></figure>

<p>再来是修改 <code>.gitmodules</code> 文件，把不用的 submodule 删掉，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- [submodule <span class="string">&quot;themes/next&quot;</span>]</span><br><span class="line">-	path = themes/next</span><br><span class="line">-	url = https://github.com/theme-next/hexo-theme-next.git</span><br></pre></td></tr></table></figure>

<p>还要修改 <code>.git/config</code> 的內容，跟 <code>.gitmodules</code> 一样，把需要移除的 submodule 删掉，最后再 commit。</p>
<h2 id="clone-时把-submodule-一起-clone-下来"><a href="#clone-时把-submodule-一起-clone-下来" class="headerlink" title="clone 时把 submodule 一起 clone 下来"></a>clone 时把 submodule 一起 clone 下来</h2><p>执行 <code>git clone</code> 时 Git 不会自动把 submodule 一起 clone 下来，必须加上 <code>--recursive</code> 这个参数，这样可以连带 submodule 的 submodule 通通一起 clone 下来：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive &lt;url&gt;</span><br></pre></td></tr></table></figure>

<p>如果已经 clone 才发现 submodule 是空的，可以用以下命令去 clone：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule init</span><br><span class="line">git submodule update --recursive</span><br></pre></td></tr></table></figure>

<p><code>init</code> 会在 <code>.git/config</code> 下注册 remote repo 的 URL 和 local path。或是合并成一行 <code>git submodule update --init --recursive</code> 也可以，如果 upstream 有人改过 <code>.gitmodules</code>，那本地好像也是用这个方法更新。</p>
<h2 id="命令解释"><a href="#命令解释" class="headerlink" title="命令解释"></a>命令解释</h2><ul>
<li><p><code>git submodule init</code>：根据 <code>.gitmodules</code> 的名称和 URL，将这些信息注册到 <code>.git/config</code> 内，可是把 <code>.gitmodules</code> 內不用的 submodule 移除，使用命令并没有办法自动删除 <code>.git/config</code> 的相关內容，必须手动刪除；</p>
</li>
<li><p><code>git submodule update</code>：根据已注册（也就是 <code>.git/config</code> ）的 submodule 进行更新，例如 clone 遗失的 submodule，也就是上一段讲的方法，所以执行这个命令前最好加上 <code>--init</code>；</p>
</li>
<li><p><code>git submodule sync</code>：如果 submodule 的 remote URL 有变动，可以在 <code>.gitmodules</code> 修正 URL，然后执行这个命令，便会将 submodule 的 remote URL 更正。</p>
</li>
</ul>
<div class="note default"><p>原文链接：<a href="https://blog.chh.tw/posts/git-submodule/">Git Submodule 用法筆記</a></p>
</div>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Git Submodule</tag>
      </tags>
  </entry>
  <entry>
    <title>CGI/FastCGI/php-cgi/php-fpm的区别</title>
    <url>/PHP/CGI_FastCGI_php-cgi_php-fpm/</url>
    <content><![CDATA[<h2 id="一、最早的Web服务器"><a href="#一、最早的Web服务器" class="headerlink" title="一、最早的Web服务器"></a>一、最早的Web服务器</h2><p>最早的Web服务器简单地响应浏览器发来的HTTP静态文件请求，并将存储在服务器上的静态文件（例如： jpg、htm、html）返回给浏览器。如图是处理流程</p>
<p><img src="/images/PHP/CGI_FastCGI_php-cgi_php-fpm/76df2b.png"></p>
<p>比如我访问：<code>http://www.example.com/index.html</code>，那么网络服务器就会去对应目录中找到 <code>index.html</code>这个文件，并返回给浏览器。</p>
<h2 id="二、CGI的出现"><a href="#二、CGI的出现" class="headerlink" title="二、CGI的出现"></a>二、CGI的出现</h2><p><strong>首先说明：CGI是一种协议</strong></p>
<p>事物总是不断发展，网站也越来越复杂，所以出现动态技术。但是Web服务器并不能直接运行 php&#x2F;asp 这样的文件，自己不能做，外包给别人吧，但是要与第三做个约定，我给你什么，然后你给我什么，就是我把请求参数发送给你，然后我接收你的处理结果再给客户端。这个约定就是 CGI协议(Common Gateway Interface)，协议只是一个“规定、规则”，理论上用什么语言都能实现，比如用 vb&#x2F;c&#x2F;perl&#x2F;php&#x2F;python 来实现。</p>
<p>在2000年或更早的时候，CGI 比较盛行。那时，Perl 是编写 CGI 的主流语言，以至于一般的 CGI 程序(遵循 CGI 协议的程序)就是 Perl 程序（例如世界上80%的网站所采用的编程语言 php 语言刚开始的版本就是用Perl语言写的）。</p>
<p>CGI 是 “Common Gateway Interface” 的缩写，翻成中文叫“公共网关接口”，它是 web 服务器与外部应用程序（CGI 程序）之间传递信息的接口标准。通过 CGI 接口，web 服务器就能够获取客户端提交的信息，并转交给服务器端的 CGI 程序处理，最后返回结果给客户端。也就是说，CGI 实际上是一个接口标准。我们通常所说的 CGI 是指 CGI 程序，即实现了 CGI 接口标准的程序。只要某种语言具有标准输入、输出和环境变量，如 perl&#x2F;PHP&#x2F;C 等，就可以用来编写 CGI 程序。CGI 只是接口协议，根本不是什么语言。</p>
<span id="more"></span>

<h3 id="CGI程序的工作方式"><a href="#CGI程序的工作方式" class="headerlink" title="CGI程序的工作方式"></a>CGI程序的工作方式</h3><p>web 服务器一般只处理静态文件请求（如 jpg、htm、html），如果碰到一个动态脚本请求（如 php），web 服务器主进程，就 fork 出一个新的进程来启动 CGI 程序，也就是说将动态脚本请求交给 CGI 程序来处理。启动 CGI 程序需要一个过程，比如，读取配置文件，加载扩展等。CGI 程序启动后，就会解析动态脚本，然后将结果返回给 web 服务器，最后 web 服务器再将结果返回给客户端，刚才 fork 的进程也会随之关闭。这样，每次用户请求动态脚本，web 服务器都要重新 fork 一个新进程，去启动 CGI 程序，由 CGI 程序来处理动态脚本，处理完后进程随之关闭。毫无疑问，这种工作方式的效率是非常低下的。运行示意图如下：</p>
<p><img src="/images/PHP/CGI_FastCGI_php-cgi_php-fpm/42e54.png"></p>
<p>CGI程序与web服务器传递数据：</p>
<p>CGI 程序通过标准输入（STDIN）和标准输出（STDOUT）来进行输入输出。此外 CGI 程序还通过环境变量来得到输入，操作系统提供了许多环境变量，它们定义了程序的执行环境，应用程序可以存取这些环境变量。web 服务器和 CGI 接口又另外设置了一些环境变量，用来向CGI程序传递一些重要的参 数。CGI 的 GET 方法还通过环境变量 QUERY-STRING 向 CGI 程序传递 Form 中的数据。 下面是一些常用的 CGI 环境变量：</p>
<table>
<thead>
<tr>
<th align="left">变量名</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CONTENT_TYPE</td>
<td align="left">这个环境变量的值指示所传递来的信息的MIME类型。目前，环境变量CONTENT_TYPE一般都是：application&#x2F;x-www-form-urlencoded，他表示数据来自于HTML表单。</td>
</tr>
<tr>
<td align="left">CONTENT_LENGTH</td>
<td align="left">如果服务器与CGI程序信息的传递方式是POST，这个环境变量即使从标准输入STDIN中可以读到的有效数据的字节数。这个环境变量在读取所输入的数据时必须使用。</td>
</tr>
<tr>
<td align="left">HTTP_COOKIE</td>
<td align="left">客户机内的 COOKIE 内容。</td>
</tr>
<tr>
<td align="left">HTTP_USER_AGENT</td>
<td align="left">提供包含了版本数或其他专有数据的客户浏览器信息。</td>
</tr>
<tr>
<td align="left">PATH_INFO</td>
<td align="left">这个环境变量的值表示紧接在CGI程序名之后的其他路径信息。它常常作为CGI程序的参数出现。</td>
</tr>
<tr>
<td align="left">QUERY_STRING</td>
<td align="left">如果服务器与CGI程序信息的传递方式是GET，这个环境变量的值即是所传递的信息。这个信息经跟在CGI程序名的后面，两者中间用一个问号?分隔，多个参数用&amp;号连接。</td>
</tr>
<tr>
<td align="left">REMOTE_ADDR</td>
<td align="left">这个环境变量的值是发送请求的客户机的IP地址，例如上面的192.168.1.67。这个值总是存在的。而且它是Web客户机需要提供给Web服务器的唯一标识，可以在CGI程序中用它来区分不同的Web客户机。</td>
</tr>
<tr>
<td align="left">REMOTE_HOST</td>
<td align="left">这个环境变量的值包含发送CGI请求的客户机的主机名。如果不支持你想查询，则无需定义此环境变量。</td>
</tr>
<tr>
<td align="left">REQUEST_METHOD</td>
<td align="left">提供脚本被调用的方法。对于使用 HTTP&#x2F;1.0 协议的脚本，仅 GET 和 POST 有意义。</td>
</tr>
<tr>
<td align="left">SCRIPT_FILENAME</td>
<td align="left">CGI脚本的完整路径。</td>
</tr>
<tr>
<td align="left">SCRIPT_NAME</td>
<td align="left">CGI脚本的的名称。</td>
</tr>
<tr>
<td align="left">SERVER_NAME</td>
<td align="left">这是你的 WEB 服务器的主机名、别名或IP地址。</td>
</tr>
<tr>
<td align="left">SERVER_SOFTWARE</td>
<td align="left">这个环境变量的值包含了调用CGI程序的HTTP服务器的名称和版本号。例如，上面的值为Apache&#x2F;2.2.14(Unix)。</td>
</tr>
</tbody></table>
<h3 id="web服务器内置模块"><a href="#web服务器内置模块" class="headerlink" title="web服务器内置模块"></a>web服务器内置模块</h3><p>后来，出现了一种比较高效的方式：web 服务器内置模块。例如，apache 的 mod_php 模块。将 php 解释器做成模块，然后加载到 apache 服务器中。</p>
<p>这样，apache 服务器在启动的时候，就会同时启动 php 模块。当客户端请求 php 文件时，apache 服务器就不用再 fork 出一个新进程来启动 php 解释器，而是直接将 php 文件交给运行中的 php 模块处理。显然，这种方式下，效率会比较高。</p>
<p>由于在 apache 服务器启动时，才会读取 php 的配置文件，加载 php 模块，在 apache 的运行过程中 ，不会再重新读取 php 的配置文件。所以，每次我们修改了 php 的配置文件后，必须重启 apache，新的php配置文件才会生效。运行示意图如下：</p>
<p><img src="/images/PHP/CGI_FastCGI_php-cgi_php-fpm/081a0b3.png"></p>
<h3 id="FastCGI"><a href="#FastCGI" class="headerlink" title="FastCGI"></a>FastCGI</h3><p><strong>FastCGI是一种协议</strong>，它是在<strong>CGI标准协议</strong>基础上发展出来的一个变种协议，它的主要目标是减轻 web 服务器与 CGI 程序之间交互时的负载，这样一台服务器就可以在同一时间处理更多的 web 请求。</p>
<p>FASTCGI 的定义相关文章：<a href="http://www.mit.edu/~yandros/doc/specs/fcgi-spec.html#S1">FastCGI Specification</a>、<a href="http://www.mit.edu/afs.new/sipb/project/merakidev/src/openwrt-meraki/openwrt/build_mips/lighttpd-1.4.11/doc/fastcgi.txt">the FastCGI Interface</a></p>
<p><strong>FastCGI进程管理器</strong>是遵循<strong>FastCGI协议</strong>的程序，只要你有能力就可以写出遵循 “FastCGI协议” 的 “FastCGI进程管理器”，毫无疑问，“FastCGI进程管理器” 并不是一个程序的名称，而是指遵循<strong>FastCGI协议</strong>的一类程序。</p>
<p>当客户端请求 Web 服务器上的动态脚本时，Web 服务器会将动态脚本通过 Unix 域套接字(Unix domain socket)，或命名管道(named pipe)，或 TCP 连接(TCP connection)交给 FastCGI 主进程，FastCGI 主进程根据情况，安排一个空闲的子进程来解析动态脚本，处理完成后将结果返回给 Web 服务器，Web 服务器再将结果返回给客户端。该客户端请求处理完毕后，FastCGI 子进程并不会随之关闭，而是继续等待主进程安排工作任务。由此可知，FastCGI 的工作效率是非常高的。运行示意图如下：</p>
<p><img src="/images/PHP/CGI_FastCGI_php-cgi_php-fpm/6153419.png"></p>
<h3 id="php-fpm"><a href="#php-fpm" class="headerlink" title="php-fpm"></a>php-fpm</h3><p><strong>fpm</strong>是<strong>FastCGI Process Manager</strong>的缩写，中文叫 “FastCGI进程管理器”，而 php-fpm 就是用于 php 语言的 FastCGI 进程管理器（前面说过，“FastCGI进程管理器”是一类程序，而 php-fpm 就属于这一类程序中的其中一个）。对于 php5.3 之前的版本来说，php-fpm 是一个第三方的补丁包，旨在将 FastCGI 进程管理整合进PHP包中。在 php5.3 之后的版本中，php-fpm 不再是第三方的包，它已经被集成到 php 的源码中了，因为 php-fpm 提供了更好的PHP进程管理方式，可以有效控制内存和进程、可以平滑重载 PHP 配置，比 spawn-fcgi 具有更多优点，所以 php-fpm 被 PHP 官方集成了。</p>
<h3 id="php-cgi"><a href="#php-cgi" class="headerlink" title="php-cgi"></a>php-cgi</h3><p>PHP为什么叫PHP</p>
<div class="note info"><p>PHP于1994年由Rasmus Lerdorf创建，刚刚开始是Rasmus Lerdorf为了要维护个人网页而制作的一个简单的用Perl语言编写的程序。这些工具程序用来显示 Rasmus Lerdorf 的个人履历，以及统计网页流量。后来又用C语言重新编写，包括可以访问数据库。他将这些程序和一些表单直译器整合起来，称为 PHP&#x2F;FI。</p>
<p>而PHP&#x2F;FI，是“Personal Home Page&#x2F;Form Interpreter”的缩写，意思是“个人主页&#x2F;表单解释器”，也就是说，PHP最初还不是一门“语言”，而是“Rasmus Lerdorf”为了维护他自己的个人主页而写的一个简单的“表单解释器”。</p>
<p>不过后来，PHP被重新定义为<strong>“PHP: HyperText Preprocessor”</strong>的缩写，注意不是“HyperText Preprocessor”而是“PHP: HyperText Preprocessor”，这种将名称放到定义中的写法被称作<a href="https://baike.baidu.com/item/%E9%80%92%E5%BD%92%E7%BC%A9%E5%86%99">递归缩写</a></p>
<p>所以，PHP现在的定义就是一个“超文本预处理器”，用于“把php语言写的程序解释成超文本”(说白了就是把你写的php代码转换成html，当然现在的能力不止是解释成html)，安装好php后，对于Linux&#x2F;Mac会在安装目录下有一个 <code>php</code> 和一个<code>php-cgi</code>，对于Win则是<code>php.exe</code>和<code>php-cgi.exe</code>。</p>
</div>

<h3 id="php-cgi与php的区别"><a href="#php-cgi与php的区别" class="headerlink" title="php-cgi与php的区别"></a>php-cgi与php的区别</h3><p>php-cgi与php的区别(在win下就是php-cgi.exe与php.exe)在于，php&#x2F;php.exe是命令模式的php解释器，而php-cgi&#x2F;php-cgi.exe是支持“通用网关接口”的php解释器，而通用网关接口就是我们前面说的“CGI”(从它的名称就能看出来啦，它都标明了“-cgi”了)，不过现在的php-cgi是即支持“CGI”协议，也支持“CGI协议”的改进版——“fastCGI协议”的。</p>
<p><strong>举例说明php与php-cgi都是php解释器：</strong> 运行<code>php -i</code>是“查看php的配置信息(i是info的缩写)”，而运行<code>php-cgi -i</code>同样是“查看php的配置信息”，只不过<code>php -i</code>是以命令版的格式返回(说白了就是纯字符串，最多加上换行)，而<code>php-cgi -i</code>返回的格式，却是html格式的，你可以用 <code>php-cgi -i &gt; /path/to/php-cgi.html</code>保存成html文件再来打开，可以发现跟你在php文件中用<code>phpinfo();</code>函数是一样的。</p>
<h3 id="php-cgi支持fastCGI协议"><a href="#php-cgi支持fastCGI协议" class="headerlink" title="php-cgi支持fastCGI协议"></a>php-cgi支持fastCGI协议</h3><p>为什么说<code>php-cgi</code>既支持普通的CGI协议，也支持“fastCGI”协议呢？运行<code>php-cgi -h</code>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage: php [-q] [-h] [-s] [-v] [-i] [-f &lt;file&gt;]</span><br><span class="line">       php &lt;file&gt; [args...]</span><br><span class="line">  -a               Run interactively</span><br><span class="line">  -b &lt;address:port&gt;|&lt;port&gt; Bind Path for external FASTCGI Server mode</span><br><span class="line">  -C               Do not chdir to the script&#x27;s directory</span><br><span class="line">  -c &lt;path&gt;|&lt;file&gt; Look for php.ini file in this directory</span><br><span class="line">  -n               No php.ini file will be used</span><br><span class="line">  -d foo[=bar]     Define INI entry foo with value &#x27;bar&#x27;</span><br><span class="line">  -e               Generate extended information for debugger/profiler</span><br><span class="line">  -f &lt;file&gt;        Parse &lt;file&gt;.  Implies `-q&#x27;</span><br><span class="line">  -h               This help</span><br><span class="line">  -i               PHP information</span><br><span class="line">  -l               Syntax check only (lint)</span><br><span class="line">  -m               Show compiled in modules</span><br><span class="line">  -q               Quiet-mode.  Suppress HTTP Header output.</span><br><span class="line">  -s               Display colour syntax highlighted source.</span><br><span class="line">  -v               Version number</span><br><span class="line">  -w               Display source with stripped comments and whitespace.</span><br><span class="line">  -z &lt;file&gt;        Load Zend extension &lt;file&gt;.</span><br><span class="line">  -T &lt;count&gt;       Measure execution time of script repeated &lt;count&gt; times.</span><br></pre></td></tr></table></figure>

<p>其中有这句“Bind Path for external FASTCGI Server mode”：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-b &lt;address:port&gt;|&lt;port&gt; Bind Path for external FASTCGI Server mode</span><br></pre></td></tr></table></figure>

<p>意思是“绑定路径以作为外部FASTCGI服务器模式来使用”，那么不绑定呢？不绑定就是作为“非FASTCGI”模式使用呗。</p>
<p>当然，php-cgi支持“标准CGI”接口只是我的猜测，我无法用实际的例子来解释（而且就算可以，也没人会用这种方式了），但是php-cgi支持“FASTCGI”这是绝对绝对可以确定的，因为我有实例可以证明！！</p>
<p>相信现在绝大部分人都是用nginx+php-fpm模式来运行网站的，我这个例子就以这个来解释！下列配置，只要配置过nginx+php-fpm的童鞋应该都很熟悉，意思就是当nginx遇到<code>.php</code>结尾的文件，就“调用php-fpm”来解释这个php文件，此时php-fpm相当于“服务器”，“127.0.0.1:9000”就是php-fpm服务器监听的ip和端口，而nginx相当于“客户端”：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    include fastcgi.conf;</span><br><span class="line">    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    fastcgi_index  index.php;</span><br><span class="line">    fastcgi_buffer_size 128k;</span><br><span class="line">    fastcgi_buffers 4 256k;</span><br><span class="line">    fastcgi_busy_buffers_size 256k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在我们把上述配置修改一个地方，把<code>9000</code>改成<code>9001</code>(如果你9001被占用了那就用其他未占用的端口，只要下边对应即可)，然后<code>sudo nginx -s reload</code>重载配置，毫无疑问，现在用浏览器访问你的php文件，比如<code>http://localhost/index.php</code>将会出现<code>502 Bad Gateway</code>，因为php-fpm监听的是9000端口，现在你修改成9001它当然找不到啊。</p>
<p>还记得刚才前面说到的“绑定路径以作为外部FASTCGI服务器模式来使用”吗？现在我们就来使用它，进入php-cgi所在目录，运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./php-cgi -b 127.0.0.1:9001</span><br></pre></td></tr></table></figure>

<p>再次刷新你的<code>http://localhost/index.php</code>，怎样？是不是没有502了？是不是正常了？但你要知道，现在解释你的<code>index.php</code>文件的是<code>php-cgi</code>而不再是<code>php-fpm</code>了，这就证明了<code>php-cgi</code>确实是支持“FASTCGI”协议的，为什么？因为nginx里用的参数，都是<code>fastcgi_</code>开头的啊，这就是“FASTCGI”协议啊。</p>
<p>实验结束，<code>ctrl+C</code>就可以关闭你刚才运行的<code>php-cgi</code>了，因为刚才是直接在前台运行的，然后把9001改加9000，再执行<code>sudo nginx -s reload</code>就恢复到用<code>php-fpm</code>了。</p>
<p><strong>另一个用于证明php-cgi即支持“CGI”又支持“fastCGI”的例子：</strong></p>
<p>由于Windows不支持默认php-fpm(因为php-fpm是基于Linux的fork()创建子进程的，而Windows不支持这个，不过可以用Cygwin模拟)，而像一些集成工具一般都是直接使用php-cgi.exe代替php-fpm，比如phpStudy，我们选择用php+nginx：</p>
<p><img src="/images/PHP/CGI_FastCGI_php-cgi_php-fpm/6155930.jpg"></p>
<p>然后查看phpStudy的子进程，里面就有一个<code>CGI / FastCGI(32 bit)</code>，这个就是“php-cgi.exe”，你可以右击它→点击“属性”→点击“安全”，就能看到它的路径：</p>
<p><img src="/images/PHP/CGI_FastCGI_php-cgi_php-fpm/9f36463c.jpg"></p>
<p><strong>证明例子3：</strong><a href="https://php.net/manual/en/install.fpm.php#121725">https://php.net/manual/en/install.fpm.php#121725</a>，这个老外说了，php-cgi是fastCGI接口但不是fpm，所以这又证明了“php-cgi”是支持fastCGI协议的。</p>
<p><img src="/images/PHP/CGI_FastCGI_php-cgi_php-fpm/60157.png"></p>
<p>前面说了php-cgi与php的相同点——它们都是php解释器，只是一个只支持使用“命令行方式调用”，一个支持“通用网关接口”方式调用。</p>
<h3 id="php-cgi与php-fpm的区别"><a href="#php-cgi与php-fpm的区别" class="headerlink" title="php-cgi与php-fpm的区别"></a>php-cgi与php-fpm的区别</h3><p>那么php-cgi与php-fpm又有什么不同？其实你可以认为“php-fpm”就是“php-cgi”的改进版，前面我说了php-cgi就是一个“遵循通用网关接口的php解释器”，而php-fpm是php-cgi的改进版，说明php-fpm同样也是一个“遵循通用网关接口的php解释器”，并且这里的“通用网关接口”指的是“FASTCGI”而不是“CGI”，因为前面都已经用实例证明了“php-cgi”是支持“FASTCGI”协议的，既然php-cgi都支持，那么它的改进版——php-fpm肯定就更支持了，从它的名字“fpm”里就能看出来，“fpm”是“Fastcgi Process Manager”，意思是“支持fastCGI协议的进程管理器”，那么“php-fpm”就是用于php的“支持fastCGI协议的进程管理器”，因为“支持fastCGI协议的进程管理器”不一定只有用于php，也许还有其他的呢？</p>
<p>好了，既然php-fpm也是“遵循通用网关接口的php解释器”，那么有一点可以确定的是，php-fpm不会调用php-cgi也不会依赖php-cgi，因为它本身就是“php-cgi”的改进版，没有理由去调用(去依赖php-cgi)，确定方法很简单，先停掉你的php-fpm，然后把php-cgi改个名或者移动到另一个目录，再启动php-fpm，看一切是否正常？答案是肯定正常的，php-fpm根本不依赖php-cgi。</p>
<p>前面说，“php-fpm”是“php-cgi”的改进版（当然这个“改进版”是我自己的说法，实际上php-fpm是不是在php-cgi的基础上改进的，我也不知道，但说它是改进版是没有问题的），既然是改进版，那改进了什么呢？请看官方文档：<a href="https://www.php.net/manual/zh/install.fpm.php">FastCGI 进程管理器(fpm)</a></p>
<ul>
<li>支持平滑停止&#x2F;启动的高级进程管理功能；</li>
<li>可以工作于不同的 uid&#x2F;gid&#x2F;chroot 环境下，并监听不同的端口和使用不同的 php.ini 配置文件（可取代 safe_mode 的设置）；</li>
<li>stdout 和 stderr 日志记录;</li>
<li>在发生意外情况的时候能够重新启动并缓存被破坏的 opcode;</li>
<li>文件上传优化支持;</li>
<li>“慢日志” – 记录脚本（不仅记录文件名，还记录 PHP backtrace 信息，可以使用 ptrace或者类似工具读取和分析远程进程的运行数据）运行所导致的异常缓慢;</li>
<li>fastcgi_finish_request() – 特殊功能：用于在请求完成和刷新数据后，继续在后台执行耗时的工作（录入视频转换、统计处理等）；</li>
<li>动态／静态子进程产生；</li>
<li>基本 SAPI 运行状态信息（类似Apache的 mod_status）；</li>
<li>基于 php.ini 的配置文件。</li>
</ul>
<p>由前面的phpStudy我们可以看到，运行php-cgi.exe(在Mac&#x2F;Linux上是php-cgi)时，只有一个进程，当网站并发数大时，这个进程很容易就“挂掉”，挂掉就再也无法处理nginx的请求了。而php-fpm是一个进程管理器，启动它时，它除了有一个“主进程(master)”外，还会创建很多“子进程”，如下图：</p>
<p><img src="/images/PHP/CGI_FastCGI_php-cgi_php-fpm/b5a89c.jpeg"></p>
<p>这些子进程，才是真正的“遵循通用网关接口的php解释器”，而主进程只不过是把请求分配给这些子进程而已，所以php-fpm才叫“php fastCGI进程管理器”，当网站并发数大时，主进程会不断把请求分配给这些子进程，从而可以同时处理高并发而不“挂掉”。</p>
<p>另外，子进程的多少，主进程还会“自动分配”，比如并发数大时，主进程会多创建一些子进程，用于同时处理更多的请求，而当并发数小时，则会自动关闭一些进程，从而“减少这些子进程对服务器内存的占用”，当然这个取决于php-fpm配置的进程管理方式(static方式不会自动)。</p>
<p><strong>注意：</strong>网上很多人说，php-fpm是用于管理php-cgi的，这个说法对也不对，说他对，是因为在php5.4以前确实是这样的，但php5.4以后，php-fpm已被php官方收编，本身已经自带了解析php的功能，不只是做进程管理，也不再依赖php-cgi来解析php了。</p>
<h3 id="php-fpm管理进程的三种方式"><a href="#php-fpm管理进程的三种方式" class="headerlink" title="php-fpm管理进程的三种方式"></a>php-fpm管理进程的三种方式</h3><p>php-fpm的进程管理方式有：</p>
<ul>
<li>static：静态方式，即子进程数是固定的，不会随着并发数的多少而自动调整子进程数，有两个缺点，1、当并发数少时，如果子进程太多会浪费内存，2、当并发数大时也不会自动增加子进程，比如“死板”，我们一般不会用这种方式。</li>
<li>dynamic：动态分配，当空闲时，会自动缩小到最少子进程数(通过pm.min_spare_servers指定)，当并发数大时，会按需求增加子进程数，当然这个增加并不是无止境的，而是有最大子进程数的(通过pm.max_children指定，另外也有空闲时的最大子进程数，通过pm.max_spare_servers指定)，一般我们都采用这种进程管理方式。</li>
<li>ondemand：启动php-fpm时，只有主进程，没有子进程，当有请求过来时，才会创建子进程，并发数越多创建的子进程数就越多，但有个极限值(由pm.max_children指定)，空闲的进程会在pm.process_idle_timeout秒内被关闭，这种方式无法及时的“响应并处理”nginx的请求，虽然这会让php-fpm在空闲时占用内存最小，但没有必要，因为服务器不缺这点内存，这种方式一般也不会使用。</li>
</ul>
<h3 id="php-fpm平滑重启原理"><a href="#php-fpm平滑重启原理" class="headerlink" title="php-fpm平滑重启原理"></a>php-fpm平滑重启原理</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill -SIGUSR2 主进程id</span><br></pre></td></tr></table></figure>

<p>因为php-fpm本身并没有类似nginx的<code>reload</code>之类的命令，你用<code>man php-fpm</code>也能看出来，确实没有，如果你有在网上看到过<code>php-fpm reload</code>或<code>service php-fpm reload</code>之类的命令或者你使用过，它本身并不是<code>php-fpm</code>，而是一个shell脚本而已，它所在的位置有在<code>/etc/init.d/php-fpm</code>，而这个<code>reload</code>的本质，其实就是给php-fpm主进程发送<code>-SIGUSR2</code>信号，而php-fpm规定了<code>-SIGUSR2</code>信号为平滑重启信号(参见<a href="https://www.jianshu.com/p/2ea78b789263">php-fpm信号，你造么？</a>)。</p>
<p><img src="/images/PHP/CGI_FastCGI_php-cgi_php-fpm/3f6876.jpg"></p>
<p><strong>平滑重启步骤：</strong></p>
<ul>
<li>master通过给子进程发送SIGQUIT信号的方式，平滑关闭所有的子进程</li>
<li>如果过一段时间，有些子进程还没退出，给子进程发送SIGTERM信号，强制关闭子进程</li>
<li>如果还没关闭，给子进程发送SIGKILL信号，强制关闭</li>
<li>等所有的子进程退出后，master重新启动</li>
</ul>
<div class="note default"><p>原文链接：<a href="https://www.xiebruce.top/606.html">CGI&#x2F;FastCGI&#x2F;php-cgi&#x2F;php-fpm的区别</a></p>
</div>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>CGI</tag>
        <tag>FastCGI</tag>
        <tag>php-cgi</tag>
        <tag>php-fpm</tag>
      </tags>
  </entry>
  <entry>
    <title>事务隔离级别</title>
    <url>/MySQL/isolation-levels-in-mysql/</url>
    <content><![CDATA[<h2 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h2><div class="note info"><p>mysql version 8.0.13</p>
</div>

<h2 id="事务隔离级别概述"><a href="#事务隔离级别概述" class="headerlink" title="事务隔离级别概述"></a>事务隔离级别概述</h2><p>mysql 中，InnoDB 所提供的事务符合 ACID 的要求，而事务通过事务日志中的 redo log 和 undo log 满足了原子性、一致性、持久性，事务还会通过锁机制满足隔离性，在 InnoDB 存储引擎中，有不同的隔离级别，它们有着不同的隔离性。</p>
<p>什么是事务的隔离级别？如果只是从概念上理解的话可能比较模糊，咱们直接看看不同隔离级别下的实际表现是什么样子的，再结合理论去理解，就会明了很多。首先，打开两个终端，同时连接到当前数据库，如下图所示，我们对两个回话进行编号，并且以颜色区分，1号会话使用黄色进行标识，2号会话使用红色进行标识。</p>
<p>两个会话使用相同的数据库。</p>
<p><img src="/images/MySQL/isolation-levels-in-mysql/20201204162840.png"></p>
<p>两个会话中同时各自开启一个事务。</p>
<p><img src="/images/MySQL/isolation-levels-in-mysql/20201204163421.png"></p>
<p>由于下面的所有操作会在两个会话中来回切换，所以，为了方便描述，我们为每个操作的顺序进行编号，例如下图中，我们先在会话1的事务1中执行了更新操作，然后在事务1中执行了查询操作，最后又在会话2中的事务2中执行了查询操作，按照操作顺序，为各个操作进行了顺序编号。</p>
<span id="more"></span>

<p><img src="/images/MySQL/isolation-levels-in-mysql/20201204163734.png"></p>
<p>从上图可以看到，在事务1中显示的数据已经发生了改变，第2条数据对应的字符串已经变为test，事务2中显示的数据未发生改变，没错，你肯定会说，那是因为事务1还没有提交，所以，事务2中还无法看到被修改的数据，那么，我们将会话1中的事务提交试试看，看看事务1提交后，事务2中的数据会不会发生改变。</p>
<p>那么，在事务提交之前，我们现在两个会话中再次查询一次，两个事务中的数据显示如下图中的操作1与操作2的显示结果。</p>
<p><img src="/images/MySQL/isolation-levels-in-mysql/20201204164108.png"></p>
<p>然后我们执行上图中的第3步，将事务1中的修改操作进行提交，在事务2中再次查看t1表中的数据（第4步），经过查看发现，t1表中的第2条数据对应的字符串仍然没有发生改变，这种情况可能和我们一厢情愿想象的状况有些不同，在不了解事务的隔离级别之前，你可能会认为，当上图中的事务1提交以后，在事务2中再次查询同一张表的数据时，应该会看到事务1中的修改，但是实际上并没有，在会话2没有提交之前，从t1表中查询出的数据一直都是不变的，直到会话2提交以后，再次查询t1表的数据，才发现t1表的第2条数据对应的字符串已经发生了改变，出现这种现象，是因为 mysql 默认的隔离级别造成的，而不同的隔离级别会体现出不同的隔离效果，所以，事务的隔离级别，决定了各个事务之间的隔离性，我想，看到这里，你已经对事务的隔离性有了一个大概的了解，但是具体有几个隔离级别，每个隔离级别下有哪些特性，我们慢慢总结。</p>
<p>此处，我们先列出innodb中事务的所有隔离级别，然后再逐个了解它们，事务的隔离级别一共有如下4种。</p>
<p><strong>READ-UNCOMMITTED</strong> : 此隔离级别翻译为 “读未提交”。<br><strong>READ-COMMITTED</strong> : 此隔离级别翻译为 “读已提交” 或者 “读提交”。<br><strong>REPEATABLE-READ</strong> : 此隔离级别翻译为 “可重复读” 或者 “可重读”。<br><strong>SERIALIZABLE</strong> : 此隔离级别翻译为”串行化”。</p>
<p>而 mysql 默认设置的隔离级别为 <code>REPEATABLE-READ</code>，即 “可重读”。使用如下语句可以查看当前设置的隔离级别</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select @@global.transaction_isolation,@@transaction_isolation;</span><br></pre></td></tr></table></figure>

<p>如下图所示，默认设置的隔离级别为可重读。</p>
<p><img src="/images/MySQL/isolation-levels-in-mysql/20201204164404.png"></p>
<h2 id="隔离级别：可重读"><a href="#隔离级别：可重读" class="headerlink" title="隔离级别：可重读"></a>隔离级别：可重读</h2><p>我们先来总结一下可重读隔离级别的特性，仍然以刚才文章开头的示例为例，下图中，再回话1与回话2中同时开启两个事务，在事务1的事务中修改了tl表的数据以后（将第二条数据的tlstr的值修改为test），事务2中查看到的数据仍然是事务1修改之前的数据，即使事务1提交了，在事务2没有提交之前，事务2中查看到的数据都是相同的，比如t1表中的第2条数据，不管事务1是否提交，在事务2没有提交之前，这条数据对于事务2来说一直都是没有发生改变的，这条数据在事务2中是可以重复的被读到，所以，这种隔离级别被称为”可重读”。</p>
<p><img src="/images/MySQL/isolation-levels-in-mysql/20201204165028.png"></p>
<p>但是，你可能会有个问题，之前说过，事务的隔离性是由锁来实现的，那么，当上图中的事务1中执行更新语句时，事务1中应该对数据增加了写锁，但是在事务2中，仍然可以进行查询操作，即进行读操作，可是写锁是排他锁，在事务1中已经添加了写锁的情况下，为什么事务2还可以读取呢？这是因为 InnoDB 采用了”一致性非锁定读”的机制提高了数据库并发性。一致性非锁定读表示在如果当前行被施加了排他锁，那么当需要读取行数据时，则不会等待行上的锁的释放，而是会去读取一个快照数据，如下图所示</p>
<p><img src="/images/MySQL/isolation-levels-in-mysql/02261710538155.png"></p>
<p>上图展示了 InnoDB 中一致性非锁定读的过程。之所以称其为非锁定读，是因为它不需要等待被访问的行上的排他锁的释放。而上图中的快照的实现是由事务日志所对应的undo段来完成，其实快照就是该行所对应的之前的版本的数据，即历史数据，一行记录可能有不止一个快照数据。并不是所有隔离级别都使用了一致性非锁定读，在”可重读”和”读提交”的隔离级别下，InnoDB 存储引擎使用了一致性非锁定读，但是在这两个隔离级别中，对于快照数据的定义也不相同，在”可重读”隔离级别下，快照数据是指当前事务开始时数据的样子，所以，在刚才的示例中，事务2中t1表对应的第二条记录的tlstr的值一直都是2，因为在事务2开始的时候，其值就是2，这也是其可重读的特性，但是在”读提交”的隔离级别下，由于对于快照的定义不同，所以显示的现象也不同，这在做”读提交”隔离级别的实验时我们自然就会明白。</p>
<p>在可重读的隔离级别下，可能会出现”幻读”的问题，那么什么是幻读，我们一起来看一下。<br>当前的隔离级别仍然是”可重读”，现在来看一个幻读的示例，根据序号顺序查看下图中的操作即可。</p>
<p><img src="/images/MySQL/isolation-levels-in-mysql/20201204170450.png"></p>
<p>从上图可以看出，从上图中的第5步开始，数据其实就已经发生了改变，到第7步时，事务2还是无法看到数据的改变，但是当事务2更新数据以后，发现莫名其妙的多出了一条数据。在同一个事务中，执行两次同样的 sql，第二次的 sql 会返回之前不存在的行，或者之前出现的数据不见了，这种现象被称之为”幻读”。</p>
<div class="note warning"><p>注意：上例中第8步执行的update语句并没有指定任何条件，相当于更新表中的所有行的对应字段，如果你指定了条件，并且没有更新到”隐藏”的行，那么可能无法看到幻读现象</p>
</div>

<h2 id="隔离级别：串行化"><a href="#隔离级别：串行化" class="headerlink" title="隔离级别：串行化"></a>隔离级别：串行化</h2><p>所以，经过上述实验我们可以发现，事务处于 <code>REPEATABLE-READ</code> :”可重复读” 级别时，会出现幻读的情况，而在之前，我们已经提到过，不同的隔离级别，所引入的问题会有所不同，隔离性也有所不同，那么，有没有一种隔离级别，能够解决幻读的问题呢？<br><code>SERIALIZABLE</code> : “串行化”隔离级别就不会出现幻读的问题，我们来试试将事务的隔离级别设置为串行化时，事务是怎样工作的。<br>首先，我们将两个会话中的事务的隔离级别都设置为 <code>SERIALIZABLE</code> : “串行化”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE;</span><br></pre></td></tr></table></figure>

<p><img src="/images/MySQL/isolation-levels-in-mysql/20201204171329.png"></p>
<p>如上图所示，当将两个会话中的事务隔离级别同时设置为串行化以后，分别在两个会话中开启了事务1与事务2，如上图中的第1步和第2步所示，然后，进行第3步，在事务1中插入了一条数据，此时，执行第4步，在事务2中查询表tl的数据，可以，第4步好像被”卡”住了，多等一会儿，发现第4步并未执行成功，而是报了一个错误，如下图。</p>
<p><img src="/images/MySQL/isolation-levels-in-mysql/20201204171558.png"></p>
<p>从报错信息可以发现，事务2中的锁请求超时了，我们之前提到，事务的隔离性是由锁来实现的，当我们使用串行化的隔离级别时，由于事务1先对t1表施加了写锁，所以当事务2对tl表请求读锁时，会被阻塞，那么，出现请求锁超时的情况，也就算是比较正常了，所以，此时，我们是无法在事务2中读到tl表的数据的。</p>
<p>那么，我们换一种实验方法，我们在事务1中插入一条数据，然后在事务2中执行查询tl表的语句，此时事务2中的查询语句会被阻塞，这时，我们提交事务1，看看会发生什么情况。</p>
<p>趁着事务2中的查询语句被阻塞的时候，将事务1进行提交，如下图所示。</p>
<p><img src="/images/MySQL/isolation-levels-in-mysql/20201204172455.png"></p>
<p>当在事务2中执行查询语句时，查询被阻塞，此时事务1被提交，当事务1被提交后的一瞬间，事务2中的语句已经查询出结果，从返回结果可以看出，这个查询语句被阻塞了20秒左右的时间，当事务1中的写锁释放时，事务2才读出了数据。从上述实验上来看，当事务处于串行化隔离级别时，是不可能出现幻读的情况的，因为如果另一个事务中对表添加了写锁，那么在当前事务中是无法读到数据的，必须等到另一个事务提交，另一个事务释放了对表的写锁，当前事务才能进行申请读锁，使用串行化的隔离级别不会出现幻读的情况，但是，聪明如你一定发现了，当事务的隔离级别设置为串行化时，数据库失去了并发的能力，所以，我们很少将隔离级别设置为串行化，因为这种隔离性过于严格了。</p>
<h2 id="隔离级别：读已提交"><a href="#隔离级别：读已提交" class="headerlink" title="隔离级别：读已提交"></a>隔离级别：读已提交</h2><p>现在，我们已经了解了两种隔离级别，可重读与串行化，而且，我们已经了解到，串行化隔离级别的隔离性是最强的，没有并发能力，可重读隔离级别的隔离性稍微次之，但是比较串行化而言，并发能力较好，不过存在”幻读”的问题。</p>
<p>修改会话隔离级别：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;</span><br></pre></td></tr></table></figure>

<p>那么，有了之前的基础，再去理解另外两个隔离级别就容易了，我们先来聊聊”读提交”。</p>
<p>同样，在两个会话中同时开启两个事务，在事务1中修改tl表中的第二条数据，如下图中的1、2步所示，此时，事务1并未提交，所以如第3步所示，在事务2中并无法看到事务1中的修改，而当事务1提交以后，事务2中即可看到事务1中的修改，换句话说，就是事务2能够读到事务1提交后的更改，这种隔离级别被称为”读提交”。</p>
<p><img src="/images/MySQL/isolation-levels-in-mysql/20201204173249.png"></p>
<p>在”读提交”的隔离级别下，也会出现”幻读”的问题，示例如下。</p>
<p><img src="/images/MySQL/isolation-levels-in-mysql/20201204173507.png"></p>
<p>在上述示例中，事务1向tl表中插入了一行数据，在事务1提交以后，事务2中即可看到，但是事务2还没有提交，在事务2中执行两次相同的查询语句，莫名其妙的多出了一行，出现了”幻读”的情况。</p>
<p>在读已提交的隔离级别下，除了会出现幻读的情况，还会出现不可重读的情况。”不可重读”表示”不一定可重读”，不要理解为”一定不可重读”。什么叫”不一定可重读”呢？</p>
<p>仍然以刚才的第一个示例为例，下图中的第3步中，获取到的第2条记录对应的tlstr字段值为”test”:，而在同一个事务中，第5步所查出第二条记录对应的tlstr字段却变成了”ttt”，所以，当我们想要再次重复读到刚才的”test”，就变成了”不可重读”。</p>
<p><img src="/images/MySQL/isolation-levels-in-mysql/20201204173941.png"></p>
<p>其实，”不可重读”与”幻读”的表象都非常相似，都是在同一个事务中，并没有操作某些数据，可是这些数据却莫名的被改变了，或者突然多出了某些数据，又或者突然少了某些数据，这些状况好像都能用”幻象”这个词去理解，所以我一开始总是分不清到底什么是幻读，而且，mysql 官方文档中也把不可重读归为幻读，只是大家为了更加的细化它们的区别，把他们分成了”不可重读”与”幻读”，如果我们实在无法分清他们，我们可以这样理解，”幻读”的重点在于莫名其妙的增加了或减少了某些数据，”不可重读”的重点在于莫名的情况下，数据被修改更新了。</p>
<p>那么我们再来总结一下”读提交”这个隔离级别，在”读提交”隔离级别下，回出现”不可重读”，”幻读”的问题，比”可重读”隔离级别的问题更多，但是它的并发能力比”可重读”更强，我们似乎发现了一个规律，隔离级别的隔离性越低，并发能力就越强，存在的问题就越多，那么现在，我们只剩下最后一个隔离级别没有了解了，那就是”读未提交”。它的并发能力更强吗，它会有更多的问题吗？我们来看看。</p>
<h2 id="隔离级别：读未提交"><a href="#隔离级别：读未提交" class="headerlink" title="隔离级别：读未提交"></a>隔离级别：读未提交</h2><p>修改会话隔离级别：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</span><br></pre></td></tr></table></figure>

<p>老规矩，我们在两个会话中同时开启两个事务，然后进行实验。</p>
<p>此时，我们将两个会话的事务隔离级别同时设置为读未提交，然后在两个会话中各自开启一个事务，然后在事务1中插入一条数据，并且删除一条数据，如下图中的第1步与第2步所示。</p>
<p><img src="/images/MySQL/isolation-levels-in-mysql/20201204174532.png"></p>
<p>第1、2步执行完毕以后，事务1并未提交，此时执行步骤3，在事务2中查看tl表中的数据，是可以看到事务1中所做出的修改的。</p>
<p>所以，我们可以发现，在读未提交这个隔离级别下，即使别的事务所做的修改并未提交，我们也能看到其修改的数据。</p>
<p>当前事务能够看到别的事务中未提交的数据，我们称这种现象为”脏读”，上例中，事务1并未提交，但是其所作出的修改已经能在事务2中查看到，由于事务1中的修改有可能被回滚，或者数据有可能继续被修改，所以事务2中看到数据是飘忽不定的，并不是最终的数据，并不是提交后的数据，是”脏”的，但是事务2中仍然能看到这些数据，所以，这种显现被称之为脏读，当事务的隔离级别处于”读未提交”时，其并发性能是最强的，但是其隔离性与安全性是最差的。</p>
<p>聪明如你一定想到了，当事务处于”读未提交”这种隔离级别时，会出现”脏读”的情况，同时，也会出现”不可重读”，”幻读”的问题。</p>
<h2 id="脏读、幻读、不可重读的区别"><a href="#脏读、幻读、不可重读的区别" class="headerlink" title="脏读、幻读、不可重读的区别"></a>脏读、幻读、不可重读的区别</h2><p>现在，我们是不是更容易把脏读、幻读、不可重读混淆了呢？</p>
<p>我们一起来总结一下它们之前的区别：</p>
<p><strong>脏读</strong>：当前事务可以查看到别的事务未提交的数据（侧重点在于别的事务未提交）。</p>
<p><strong>幻读</strong>：幻读的表象与不可重读的表象都让人”懵逼”，很容易搞混，但是如果非要细分的话，幻读的侧重点在于新增和删除。表示在同一事务中，使用相同的查询语句，第二次查询时，莫名的多出了一些之前不存在数据，或者莫名的不见了一些数据。</p>
<p><strong>不可重读</strong>：不可重读的侧重点在于更新修改数据。表示在同一事务中，查询相同的数据范围时，同一个数据资源莫名的改变了。</p>
<h2 id="不同的隔离级别所拥有的问题"><a href="#不同的隔离级别所拥有的问题" class="headerlink" title="不同的隔离级别所拥有的问题"></a>不同的隔离级别所拥有的问题</h2><p><img src="/images/MySQL/isolation-levels-in-mysql/20201204174835.png"></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>array_merge 和 array+ 的区别</title>
    <url>/PHP/combining-arrays-using-plus-versus-array-merge/</url>
    <content><![CDATA[<h2 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h2><div class="note info"><p>PHP version 7.1.26</p>
</div>

<h2 id="键名是string，两者区别"><a href="#键名是string，两者区别" class="headerlink" title="键名是string，两者区别"></a>键名是string，两者区别</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$arr1</span> = [<span class="string">&#x27;a&#x27;</span> =&gt; <span class="string">&#x27;PHP&#x27;</span>];</span><br><span class="line"><span class="variable">$arr2</span> = [<span class="string">&#x27;a&#x27;</span> =&gt; <span class="string">&#x27;PYTHON&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">array_merge</span>(<span class="variable">$arr1</span>, <span class="variable">$arr2</span>));</span><br><span class="line"><span class="comment">// Array ( [a] =&gt; PYTHON ) 如果键名为字符，且键名相同，array_merge()后面数组元素值会覆盖前面数组元素值</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$arr1</span> + <span class="variable">$arr2</span>);</span><br><span class="line"><span class="comment">// Array ( [a] =&gt; PHP )如果键名为字符，且键名相同，数组相加会将最先出现的值作为结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//再比如</span></span><br><span class="line"><span class="variable">$arr1</span> = [<span class="string">&#x27;a&#x27;</span> =&gt; <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;b&#x27;</span> =&gt; <span class="string">&#x27;2&#x27;</span>];</span><br><span class="line"><span class="variable">$arr2</span> = [<span class="string">&#x27;a&#x27;</span> =&gt; <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;b&#x27;</span> =&gt; <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;c&#x27;</span> =&gt; <span class="string">&#x27;2&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">array_merge</span>(<span class="variable">$arr1</span>,<span class="variable">$arr2</span>));</span><br><span class="line"><span class="comment">// Array ( [a] =&gt; 1 [b] =&gt; 3 [c] =&gt; 2 )</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$arr1</span> + <span class="variable">$arr2</span>);</span><br><span class="line"><span class="comment">// Array ( [a] =&gt; 1 [b] =&gt; 2 [c] =&gt; 2 )</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="键名是数字，两者区别"><a href="#键名是数字，两者区别" class="headerlink" title="键名是数字，两者区别"></a>键名是数字，两者区别</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$arr1</span> = [<span class="string">&#x27;JAVA&#x27;</span>, <span class="string">&#x27;PHP&#x27;</span>];</span><br><span class="line"><span class="variable">$arr2</span> = [<span class="string">&#x27;PYTHON&#x27;</span>, <span class="string">&#x27;PHP&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">array_merge</span>(<span class="variable">$arr1</span>, <span class="variable">$arr2</span>));</span><br><span class="line"><span class="comment">// Array ( [0] =&gt; JAVA [1] =&gt; PHP [2] =&gt; PYTHON [3] =&gt; PHP ) 如果键名为数字，array_merge()不会进行覆盖</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$arr1</span> + <span class="variable">$arr2</span>);</span><br><span class="line"><span class="comment">// Array ( [0] =&gt; JAVA [1] =&gt; PHP )如果键名为数字，数组相加会将最先出现的值作为结果，后面键名相同的会被抛弃</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//再比如</span></span><br><span class="line"><span class="variable">$arr1</span> = [<span class="number">1</span> =&gt; <span class="string">&#x27;1&#x27;</span>, <span class="number">2</span> =&gt; <span class="string">&#x27;2&#x27;</span>];</span><br><span class="line"><span class="variable">$arr2</span> = [<span class="number">1</span> =&gt; <span class="string">&#x27;1&#x27;</span>, <span class="number">2</span> =&gt; <span class="string">&#x27;3&#x27;</span>, <span class="number">8</span> =&gt; <span class="string">&#x27;2&#x27;</span>];</span><br><span class="line"><span class="variable">$ret</span> = <span class="title function_ invoke__">array_merge</span>(<span class="variable">$arr1</span>,<span class="variable">$arr2</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$ret</span>);</span><br><span class="line"><span class="comment">// Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 1 [3] =&gt; 3 [4] =&gt; 2 ) 如果数组中的键名为数字时，会格式化键名并保留所有键值。</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$arr1</span> + <span class="variable">$arr2</span>);</span><br><span class="line"><span class="comment">// Array ( [1] =&gt; 1 [2] =&gt; 2 [8] =&gt; 2 ) 如果数组中的键名为数字时，数组相加会将最先出现的值作为结果，后面键名相同的会被抛弃</span></span><br></pre></td></tr></table></figure>

<h2 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h2><p>如何最有效的获取字符键名相同，值不同的两个数组值集合呢</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr1</span> = [<span class="string">&#x27;a&#x27;</span> =&gt; <span class="string">&#x27;PHP&#x27;</span>, <span class="string">&#x27;C&#x27;</span>];</span><br><span class="line"><span class="variable">$arr2</span> = [<span class="string">&#x27;a&#x27;</span> =&gt; <span class="string">&#x27;JAVA&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;PYTHON&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">array_merge_recursive</span>(<span class="variable">$arr1</span>, <span class="variable">$arr2</span>));</span><br><span class="line"><span class="comment">// Array ( [a] =&gt; Array ( [0] =&gt; PHP [1] =&gt; JAVA ) [0] =&gt; C [1] =&gt; C [2] =&gt; PYTHON )</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 事务</title>
    <url>/Redis/redis-transactions/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>概念：</strong> 可以一次执行多个命令，本质是一组命令的集合。一个事务中的所有命令都会序列化，按顺序地串行化执行而不会被其它命令插入，不许加塞。</p>
<p><strong>Redis 部分支持事务，不支持的是：强一致性</strong></p>
<p><strong>能干嘛：</strong> 一个队列中，一次性、顺序性、排他性的执行一系列命令</p>
<p><strong>常用命令：</strong></p>
<ul>
<li><code>MULTI</code>：开启一个事务，<code>MULTI</code> 执行之后，客户端可以继续向服务器发送任意多条命令，这些命令不会立即被执行，而是被放到一个队列中。</li>
<li><code>EXEC</code>：执行队列中所有的命令</li>
<li><code>DISCARD</code>：清空事务队列,并放弃执行事务</li>
<li><code>UNWATCH</code>：取消 <code>WATCH</code> 命令对所有 key 的监视</li>
<li><code>WATCH key1 key2 ...</code>    ：监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><strong>正常执行：</strong></p>
<p><img src="/images/Redis/redis-transactions/16a167bf936bde78.png"></p>
<span id="more"></span>

<p><strong>放弃事务：</strong></p>
<p><img src="/images/Redis/redis-transactions/16a167bf97fab508.png"></p>
<p><strong>全体连坐：</strong></p>
<p>一个指令语法错误，注意：我说的是语法错误！EXEC执行报错。</p>
<p><img src="/images/Redis/redis-transactions/16a167bf9860844a.png"></p>
<p><strong>冤头债主（部分支持事务）：</strong></p>
<p>冤有头，债有主，对的放行，谁错找谁。这也就说明：Redis 部分支持事务，对的放行，错的报错。</p>
<p><img src="/images/Redis/redis-transactions/16a1cc44c6ab8001.png"></p>
<p><strong>WATCH监控：先监控，后开启事务</strong></p>
<p>缓存的数据，谁都可以拿，可以改，所以必须打标记来监控行为。这里涉及到锁的问题：悲观锁&#x2F;乐观锁&#x2F;CAS(Check And Set)</p>
<ul>
<li><code>悲观锁(Pessimistic Lock)</code>： 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。</li>
<li><code>乐观锁(Optimistic Lock)</code>： 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下，在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量，</li>
<li>乐观锁策略（常用）：提交版本必须大于记录当前版本才能执行更新。这样既不影响并发性，有可以满足需求。</li>
</ul>
<p><strong>案例演示：信用卡和欠额</strong></p>
<p>正常情况：无加塞篡改</p>
<p><img src="/images/Redis/redis-transactions/16a167ddd704b271.png"></p>
<p>有加塞篡改的情况：</p>
<p><img src="/images/Redis/redis-transactions/16a167c0051f8812.png"></p>
<p>在 WATCH 监控后，有人修改了balance，会导致事务会被打断，必须更新最新值，才能成功执行事务，类似于乐观锁的版本号机制。</p>
<h2 id="事务三阶段"><a href="#事务三阶段" class="headerlink" title="事务三阶段"></a>事务三阶段</h2><ol>
<li>开启：以 <code>MULTI</code> 开始一个事务</li>
<li>入队：将多个命令入队到事务中，接到这些命令并不会立即执行，而是放到等待执行的事务队列里面</li>
<li>执行：由 <code>EXEC</code> 命令触发事务</li>
</ol>
<h2 id="事务三特性"><a href="#事务三特性" class="headerlink" title="事务三特性"></a>事务三特性</h2><ol>
<li>单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li>
<li>没有隔离级别的概念：队列中的命令没有提交之前都不会实际的被执行，因为事务提交前任何指令都不会被实际执行，也就不存在”事务内的查询要看到事务里的更新，在事务外查询不能看到”这个让人万分头痛的问题</li>
<li><strong>（重点）</strong>不保证原子性：redis同一个事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚，这也就是：Redis 部分支持事务。</li>
</ol>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>通过 <code>WATCH</code> 命令在事务执行之前监控了多个 <code>Keys</code>，倘若在 <code>WATCH</code> 之后有任何 <code>Key</code> 的值发生了变化，<code>EXEC</code> 命令执行的事务都将被放弃，同时返回 <code>Null multi-bulk</code> 应答以通知调用者事务执行失败</p>
<div class="note default"><p>原文链接：<a href="https://juejin.im/post/6844903818010837006">谁说Redis不支持事务？</a></p>
</div>]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>事务</tag>
      </tags>
  </entry>
  <entry>
    <title>令人困惑的strtotime</title>
    <url>/PHP/confusing-strtotime/</url>
    <content><![CDATA[<p>今天是 <code>2018-07-31</code> 执行代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>,<span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;-1 month&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>按正常理解输出应该是 <code>2018-06-30</code>，但实际输出是 <code>2018-07-01</code></p>
<p>虽然这个问题看起来很迷惑，但从内部逻辑上来说呢，其实是”对”的。<br>我们来模拟下date内部的对于这种事情的处理逻辑：</p>
<ol>
<li>先做-1 month，那么当前是07-31，减去一以后就是06-31</li>
<li>再做日期规范化，因为6月没有31号，所以就好像2点60等于3点一样，6月31就等于了7月1</li>
</ol>
<p>是不是逻辑很”清晰”呢? 我们也可以手动验证第二个步骤，比如:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;2017-06-31&quot;</span>)));</span><br><span class="line"><span class="comment">//输出2017-07-01</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>也就是说，只要涉及到大小月的最后一天，都可能会有这个迷惑，我们也可以很轻松的验证类似的其他月份，印证这个结论:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;-1 month&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;2017-03-31&quot;</span>))));</span><br><span class="line"><span class="comment">//输出2017-03-03</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;+1 month&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;2017-08-31&quot;</span>))));</span><br><span class="line"><span class="comment">//输出2017-10-01</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;next month&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;2017-01-31&quot;</span>))));</span><br><span class="line"><span class="comment">//输出2017-03-03</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;last month&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;2017-03-31&quot;</span>))));</span><br><span class="line"><span class="comment">//输出2017-03-03</span></span><br></pre></td></tr></table></figure>

<p>那怎么办呢？</p>
<p>从PHP5.3开始呢，date新增了一系列修正短语，来明确这个问题，那就是”first day of” 和 “last day of”，也就是你可以限定好不要让date自动”规范化”：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;last day of -1 month&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;2017-03-31&quot;</span>))));</span><br><span class="line"><span class="comment">//输出2017-02-28</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;first day of +1 month&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;2017-08-31&quot;</span>))));</span><br><span class="line"><span class="comment">////输出2017-09-01</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;first day of next month&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;2017-01-31&quot;</span>))));</span><br><span class="line"><span class="comment">////输出2017-02-01</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;last day of last month&quot;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;2017-03-31&quot;</span>))));</span><br><span class="line"><span class="comment">////输出2017-02-28</span></span><br></pre></td></tr></table></figure>

<p>那如果是5.3之前的版本(还有人用么?)，你可以使用mktime之类的，把所有的日子忽略掉，比如都限定为每月1号就可以了，只不过就不如直接用first day来的更加优雅。</p>
<div class="note default"><p>原文链接：<a href="http://www.laruence.com/2018/07/31/3188.html">令人困惑的strtotime</a></p>
</div>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>strtotime</tag>
      </tags>
  </entry>
  <entry>
    <title>接口限流常用算法实践</title>
    <url>/PHP/api-rate-limiting-algorithm-practices/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>为了更好的说明几种算法，我们举个例子，下文就这个例子分别几种算法实现。</p>
<ul>
<li>如何限制每分钟访问 <code>/api/books</code> 接口不能超过 120 次 ？</li>
</ul>
<p>我们先定义一个接口：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">RateLimiter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">access</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="固定时间窗口算法"><a href="#固定时间窗口算法" class="headerlink" title="固定时间窗口算法"></a>固定时间窗口算法</h2><p>固定时间窗口算法又叫计数器算法，逻辑就是对固定时间段内的访问次数进行计数，如果计数结果超过次数限制，则拒绝访问。</p>
<p>固定时间窗口算法的劣势就在于其只关心时间段内的总访问次数，而忽略了瞬间集中请求的问题，换而言之，这种统计方法的粒度太粗了，然而我们无法保证请求在时间段内的分布是平均的。</p>
<p><img src="/images/PHP/api-rate-limiting-algorithm-practices/fixed_window.png"></p>
<p>举个例子，如果 A 用户访问接口的时间分布如下：</p>
<table>
<thead>
<tr>
<th>时间段</th>
<th>访问次数</th>
</tr>
</thead>
<tbody><tr>
<td>00:00 ~ 00:30</td>
<td>20</td>
</tr>
<tr>
<td>00:30 ~ 01:00</td>
<td>100</td>
</tr>
<tr>
<td>01:00 ~ 01:30</td>
<td>100</td>
</tr>
<tr>
<td>01:30 ~ 02:00</td>
<td>20</td>
</tr>
</tbody></table>
<p>显然在第一分钟，我们有 120 次请求，第二分钟也是 120 次请求，但是 <code>00:30 ~ 01:30</code> 这一分钟时间内，显然是请求书超过 120 次的，所以，这种情况虽然实现了需求，但是很勉强，粒度不够细。</p>
<span id="more"></span>

<h3 id="PHP实现"><a href="#PHP实现" class="headerlink" title="PHP实现"></a>PHP实现</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FixedWindowRateLimiter</span> <span class="keyword">implements</span> <span class="title">RateLimiter</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$prefix</span> = <span class="string">&quot;ratelimiter:&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$key</span>    = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$window</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$limit</span>  = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string  $key      计数KEY</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> integer $window   窗口时间（秒）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> integer $limit    次数限制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$key</span>, <span class="keyword">int</span> <span class="variable">$window</span>, <span class="keyword">int</span> <span class="variable">$limit</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key    = <span class="variable language_">$this</span>-&gt;prefix . <span class="variable">$key</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;window = <span class="variable">$window</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;limit  = <span class="variable">$limit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">access</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$count</span> = <span class="title class_">Redis</span>::<span class="title function_ invoke__">get</span>(<span class="variable language_">$this</span>-&gt;key);</span><br><span class="line">        <span class="comment">//首次访问</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$count</span>) &#123;</span><br><span class="line">            <span class="title class_">Redis</span>::<span class="title function_ invoke__">pipeline</span>(<span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$pipe</span></span>) </span>&#123;</span><br><span class="line">                <span class="variable">$pipe</span>-&gt;<span class="title function_ invoke__">incr</span>(<span class="variable language_">$this</span>-&gt;key);</span><br><span class="line">                <span class="variable">$pipe</span>-&gt;<span class="title function_ invoke__">expire</span>(<span class="variable language_">$this</span>-&gt;key, <span class="variable language_">$this</span>-&gt;window);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断计数</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$count</span> &gt;= <span class="variable language_">$this</span>-&gt;limit) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Redis</span>::<span class="title function_ invoke__">incr</span>(<span class="variable language_">$this</span>-&gt;key);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$rateLimiter</span> = <span class="keyword">new</span> <span class="title class_">FixedWindowRateLimiter</span>(<span class="string">&quot;api:books&quot;</span>, <span class="number">60</span>, <span class="number">120</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$rateLimiter</span>-&gt;<span class="title function_ invoke__">access</span>()) &#123;</span><br><span class="line">    <span class="title function_ invoke__">abort</span>(<span class="number">404</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Lua实现"><a href="#Lua实现" class="headerlink" title="Lua实现"></a>Lua实现</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--- 资源唯一标识</span></span><br><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>]</span><br><span class="line"><span class="comment">--- 时间窗最大并发数</span></span><br><span class="line"><span class="keyword">local</span> max_window_concurrency = <span class="built_in">tonumber</span>(ARGV[<span class="number">1</span>])  </span><br><span class="line"><span class="comment">--- 时间窗</span></span><br><span class="line"><span class="keyword">local</span> window = <span class="built_in">tonumber</span>(ARGV[<span class="number">2</span>])   </span><br><span class="line"><span class="comment">--- 时间窗内当前并发数</span></span><br><span class="line"><span class="keyword">local</span> curr_window_concurrency = <span class="built_in">tonumber</span>(redis.call(<span class="string">&#x27;get&#x27;</span>, key) <span class="keyword">or</span> <span class="number">0</span>)  </span><br><span class="line"><span class="keyword">if</span> current + <span class="number">1</span> &gt; limit <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    redis.call(<span class="string">&quot;INCRBY&quot;</span>, key,<span class="number">1</span>)    </span><br><span class="line">    <span class="keyword">if</span> window &gt; <span class="number">-1</span> <span class="keyword">then</span></span><br><span class="line">        redis.call(<span class="string">&quot;expire&quot;</span>, key,window)    </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h2 id="滑动时间窗口算法"><a href="#滑动时间窗口算法" class="headerlink" title="滑动时间窗口算法"></a>滑动时间窗口算法</h2><p>固定时间窗口算法的问题是统计区间太大，限流不够精确，而且在第二个统计区间 <code>01:00 ~ 02:00</code> 时没有考虑与前一个统计区间的关系与影响（第一个区间后半段 + 第二个区间前半段也是一分钟）。</p>
<p>为了解决上面我们提到的临界问题，我们试图把每个统计区间分为更小的统计区间，更精确的统计计数。</p>
<p><img src="/images/PHP/api-rate-limiting-algorithm-practices/sliding_window1.png"></p>
<p>如上图所示，我们把每分钟分为三份，每个小格是20秒，对每个小格都会分别计数：</p>
<table>
<thead>
<tr>
<th>时间段</th>
<th>访问次数</th>
</tr>
</thead>
<tbody><tr>
<td>00:00 ~ 00:20</td>
<td>2</td>
</tr>
<tr>
<td>00:20 ~ 00:40</td>
<td>2</td>
</tr>
<tr>
<td>00:40 ~ 01:00</td>
<td>116</td>
</tr>
<tr>
<td>01:00 ~ 01:20</td>
<td>116</td>
</tr>
</tbody></table>
<p>第一次统计，我们先看 <code>01:00 ~ 02:00</code>，计数 120 次，没有超过流量限制，然而在下一个 20 秒中，流量请求集中，在 <code>00:20 ~ 01:20</code> 这一分钟的统计范围内，流量超过了限制，则可以限制访问。</p>
<p>计数器算法其实就是滑动窗口算法。只是它没有对时间窗口做进一步地划分，所以只有1格；由此可见，当滑动窗口的格子划分的越多，那么滑动窗口的滚动就越平滑，限流的统计就会越精确。</p>
<h3 id="PHP实现v1"><a href="#PHP实现v1" class="headerlink" title="PHP实现v1"></a>PHP实现v1</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SlidingWindowRateLimiter</span> <span class="keyword">implements</span> <span class="title">RateLimiter</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span>    <span class="variable">$remaining</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$prefix</span>    = <span class="string">&quot;ratelimiter:sliding:&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$key</span>       = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$window</span>    = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$limit</span>     = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blocks</span>    = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string  $key      计数KEY</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> integer $window   窗口时间（秒）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> integer $limit    次数限制</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> integer $blocks   窗口分块数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$key</span>, <span class="keyword">int</span> <span class="variable">$window</span>, <span class="keyword">int</span> <span class="variable">$limit</span>, <span class="keyword">int</span> <span class="variable">$blocks</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key    = <span class="variable language_">$this</span>-&gt;prefix . <span class="variable">$key</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;window = <span class="variable">$window</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;limit  = <span class="variable">$limit</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;blocks = <span class="variable">$blocks</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">access</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$time</span>           = <span class="title function_ invoke__">time</span>();</span><br><span class="line">        <span class="variable">$lastBlockTime</span>  = <span class="variable">$time</span> - <span class="variable">$time</span> % (<span class="title function_ invoke__">ceil</span>(<span class="variable language_">$this</span>-&gt;window / <span class="variable language_">$this</span>-&gt;blocks));</span><br><span class="line">        <span class="variable">$firstBlockTime</span> = <span class="variable">$lastBlockTime</span> - <span class="variable language_">$this</span>-&gt;window;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//移除已经过期的 blocks</span></span><br><span class="line">        <span class="title class_">Redis</span>::<span class="title function_ invoke__">zremrangebylex</span>(<span class="variable language_">$this</span>-&gt;key, <span class="string">&#x27;[0&#x27;</span>, <span class="string">&#x27;(&#x27;</span>.<span class="variable">$firstBlockTime</span>);</span><br><span class="line">        <span class="variable">$blocks</span>    = <span class="title class_">Redis</span>::<span class="title function_ invoke__">zrange</span>(<span class="variable language_">$this</span>-&gt;key, <span class="number">0</span>, -<span class="number">1</span>, <span class="string">&#x27;WITHSCORES&#x27;</span>);</span><br><span class="line">        <span class="variable">$scores</span>    = <span class="title function_ invoke__">array_sum</span>(<span class="variable">$blocks</span>);</span><br><span class="line">        <span class="variable">$remaining</span> = <span class="variable language_">$this</span>-&gt;limit - <span class="variable">$scores</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$remaining</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Redis</span>::<span class="title function_ invoke__">zincrby</span>(<span class="variable language_">$this</span>-&gt;key, <span class="number">1</span>, <span class="variable">$lastBlockTime</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;remaining = <span class="variable">$remaining</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>滑动窗口真的可以解决临界问题么？</strong></p>
<p>我们再来看一个例子，在下面的例子中，流量主要集中于滑动窗口的 last block 和 窗口滑动后的 next block。</p>
<p><img src="/images/PHP/api-rate-limiting-algorithm-practices/sliding_window2.png"></p>
<p>同样的请求情况，我们先把一个滑动窗口分为三格，窗口滑动前后都是符合限流要求的；然后我们把原来的每一格都分为两格，如图2，那么此时，窗口滑动前后的状况就不同了。</p>
<p>由此可见，滑动窗口算法很难完全符合限流需求，除非我们把统计区间变得更小，更甚至细化到每个请求，随之带来的问题是我们需要消耗更多存储空间。</p>
<h3 id="PHP实现v2"><a href="#PHP实现v2" class="headerlink" title="PHP实现v2"></a>PHP实现v2</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SlidingWindowRateLimiter</span> <span class="keyword">implements</span> <span class="title">RateLimiter</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span>    <span class="variable">$remaining</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$prefix</span>    = <span class="string">&quot;ratelimiter:sliding:&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$key</span>       = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$window</span>    = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$limit</span>     = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blocks</span>    = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string  $key      计数KEY</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> integer $window   窗口时间（秒）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> integer $limit    次数限制</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> integer $blocks   窗口分块数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$key</span>, <span class="keyword">int</span> <span class="variable">$window</span>, <span class="keyword">int</span> <span class="variable">$limit</span>, <span class="keyword">int</span> <span class="variable">$blocks</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key    = <span class="variable language_">$this</span>-&gt;prefix . <span class="variable">$key</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;window = <span class="variable">$window</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;limit  = <span class="variable">$limit</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;blocks = <span class="variable">$blocks</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">access</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$now</span> = <span class="title function_ invoke__">microtime</span>(<span class="literal">true</span>);</span><br><span class="line">        <span class="variable">$result</span> = <span class="title class_">Redis</span>::<span class="title function_ invoke__">pipeline</span>(<span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$pipe</span></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$now</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable">$pipe</span>-&gt;<span class="title function_ invoke__">zrangebyscore</span>(<span class="variable language_">$this</span>-&gt;key, <span class="number">0</span>, <span class="variable">$now</span> - <span class="variable language_">$this</span>-&gt;window);</span><br><span class="line">            <span class="variable">$pipe</span>-&gt;<span class="title function_ invoke__">zrange</span>(<span class="variable language_">$this</span>-&gt;key, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">            <span class="variable">$pipe</span>-&gt;<span class="title function_ invoke__">zadd</span>(<span class="variable language_">$this</span>-&gt;key, <span class="variable">$now</span>, <span class="variable">$now</span>);</span><br><span class="line">            <span class="variable">$pipe</span>-&gt;<span class="title function_ invoke__">expire</span>(<span class="variable language_">$this</span>-&gt;key, <span class="variable language_">$this</span>-&gt;window);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The second command inside the transaction was ZRANGE,</span></span><br><span class="line">        <span class="comment">// which returns a list of timestamps within the last hour.</span></span><br><span class="line">        <span class="variable">$timestamps</span> = <span class="variable">$result</span>[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;remaining = <span class="title function_ invoke__">max</span>(<span class="number">0</span>, <span class="variable language_">$this</span>-&gt;limit - <span class="title function_ invoke__">count</span>(<span class="variable">$timestamps</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;remaining &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Lua实现v2"><a href="#Lua实现v2" class="headerlink" title="Lua实现v2"></a>Lua实现v2</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> token = KEYS[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">local</span> now = <span class="built_in">tonumber</span>(ARGV[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">local</span> window = <span class="built_in">tonumber</span>(ARGV[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">local</span> limit = <span class="built_in">tonumber</span>(ARGV[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> clearBefore = now - window</span><br><span class="line">redis.call(<span class="string">&#x27;ZREMRANGEBYSCORE&#x27;</span>, token, <span class="number">0</span>, clearBefore)</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> amount = redis.call(<span class="string">&#x27;ZCARD&#x27;</span>, token)</span><br><span class="line"><span class="keyword">if</span> amount &lt; limit <span class="keyword">then</span></span><br><span class="line">    redis.call(<span class="string">&#x27;ZADD&#x27;</span>, token, now, now)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">redis.call(<span class="string">&#x27;EXPIRE&#x27;</span>, token, window)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> limit - amount</span><br></pre></td></tr></table></figure>

<h2 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h2><p>漏桶算法（Leaky Bucket）是什么呢？大家都用过水龙头，打开龙头开关水就会流下滴到水桶里，而漏桶指的是水桶下面有个漏洞可以出水。如果水龙头开的特别大那么水流速就会过大，这样就可能导致水桶的水满了然后溢出。</p>
<p>而我们讨论的漏桶算法的思路也很简单，水龙头打开后流下的水（请求）以一定的速率流到漏桶里（限流容器），漏桶以一定的速度出水（接口响应速率），如果水流速度过大（请求过多）就可能会导致漏桶的水溢出（访问频率超过接口响应速率），这时候我们需要关掉水龙头（拒绝请求），下面是经典的漏桶算法图示：</p>
<p><img src="/images/PHP/api-rate-limiting-algorithm-practices/leaky_bucket.png"></p>
<h3 id="PHP实现v3"><a href="#PHP实现v3" class="headerlink" title="PHP实现v3"></a>PHP实现v3</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LeakyBucketRateLimiter</span> <span class="keyword">implements</span> <span class="title">RateLimiter</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$prefix</span>   = <span class="string">&quot;ratelimiter:leaky:&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$key</span>      = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$rate</span>     = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$capacity</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string  $key      计数KEY</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> integer $rate     请求处理速率（个/秒）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int     $capacity 漏桶容量（最大队列长度）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$key</span>, <span class="keyword">int</span> <span class="variable">$rate</span>, <span class="keyword">int</span> <span class="variable">$capacity</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;capacity = <span class="variable">$capacity</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key      = <span class="variable language_">$this</span>-&gt;prefix . <span class="variable">$key</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;rate     = <span class="variable">$rate</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">access</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//当前时间</span></span><br><span class="line">        <span class="variable">$time</span> = <span class="title function_ invoke__">time</span>();</span><br><span class="line">        [<span class="variable">$lastTime</span>, <span class="variable">$tokensPend</span>] = <span class="title class_">Redis</span>::<span class="title function_ invoke__">hmget</span>(<span class="variable language_">$this</span>-&gt;key, <span class="string">&#x27;last_time&#x27;</span>, <span class="string">&#x27;tokens_pend&#x27;</span>);</span><br><span class="line">        <span class="comment">//推算已经处理过的数量</span></span><br><span class="line">        <span class="variable">$tokensHandled</span> = (<span class="variable">$time</span> - <span class="variable">$lastTime</span>) * <span class="variable">$rate</span>;</span><br><span class="line">        <span class="comment">//当前剩余 tokens 数量（队列待处理）</span></span><br><span class="line">        <span class="variable">$tokensPend</span> = <span class="title function_ invoke__">max</span>(<span class="number">0</span>, <span class="variable">$tokensPend</span> - <span class="variable">$tokensHandled</span>);</span><br><span class="line">        <span class="comment">//更新上次请求的时间</span></span><br><span class="line">        <span class="title class_">Redis</span>::<span class="title function_ invoke__">hSet</span>(<span class="variable language_">$this</span>-&gt;key, <span class="string">&#x27;last_time&#x27;</span>, <span class="variable">$time</span>);</span><br><span class="line">        <span class="comment">//判断漏桶是否满了</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$tokensPend</span> &lt; <span class="variable language_">$this</span>-&gt;capacity) &#123;</span><br><span class="line">            <span class="comment">//可以加入队列等待处理</span></span><br><span class="line">            <span class="title class_">Redis</span>::<span class="title function_ invoke__">hSet</span>(<span class="variable language_">$this</span>-&gt;key, <span class="string">&#x27;tokens_pend&#x27;</span>, <span class="variable">$tokensPend</span> + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//队列已经满了</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>备注：</strong></p>
<ul>
<li>代码中对 redis 的操作存在并发问题，代码仅供参考程序逻辑，使用 redis+lua 脚本才是更靠谱的方案。</li>
<li>代码仅处理了漏桶满时溢出、漏桶不满时允许进入队列，但是实际请求的处理，还需要后续使用队列或延时处理保证漏桶流出的速率。</li>
</ul>
<p>调用：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$mobile</span>      = <span class="string">&quot;13888888888&quot;</span>;</span><br><span class="line"><span class="variable">$rateLimiter</span> = <span class="keyword">new</span> <span class="title class_">LeakyBucketRateLimiter</span>(<span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;api:sms:send:%s&quot;</span>, <span class="variable">$mobile</span>), <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$rateLimiter</span>-&gt;<span class="title function_ invoke__">access</span>()) &#123;</span><br><span class="line">    <span class="title function_ invoke__">abort</span>(<span class="number">404</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Queue</span>::<span class="title function_ invoke__">smsSend</span>(<span class="variable">$mobile</span>, <span class="variable">$sms</span>);</span><br></pre></td></tr></table></figure>

<p>漏桶算法中必须保证请求处理速率是恒定的，不然限流就只能做到『漏桶满时溢出』的程度了。<br>因此，在我看来，这种限流处理后置的算法，可能更适合异步任务或者离线处理。</p>
<h3 id="Lua实现v3"><a href="#Lua实现v3" class="headerlink" title="Lua实现v3"></a>Lua实现v3</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> token = KEYS[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">local</span> now = <span class="built_in">tonumber</span>(ARGV[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> rate = <span class="built_in">tonumber</span>(ARGV[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">local</span> capacity = <span class="built_in">tonumber</span>(ARGV[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> lastTime = <span class="built_in">tonumber</span>(redis.call(<span class="string">&#x27;HGET&#x27;</span>, token, <span class="string">&#x27;last_time&#x27;</span>) <span class="keyword">or</span> <span class="number">0</span>)</span><br><span class="line"><span class="keyword">local</span> tokensPend = <span class="built_in">tonumber</span>(redis.call(<span class="string">&#x27;HGET&#x27;</span>, token, <span class="string">&#x27;tokens_pend&#x27;</span>) <span class="keyword">or</span> <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">tokensPend = <span class="built_in">math</span>.<span class="built_in">max</span>(<span class="number">0</span>, tokensPend - (now - lastTime) * rate)</span><br><span class="line">redis.call(<span class="string">&#x27;HSET&#x27;</span>, token, <span class="string">&#x27;last_time&#x27;</span>, now)</span><br><span class="line"><span class="keyword">if</span> tokensPend &lt; capacity <span class="keyword">then</span></span><br><span class="line">    redis.call(<span class="string">&#x27;HSET&#x27;</span>, token, <span class="string">&#x27;tokens_pend&#x27;</span>, tokensPend + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>漏桶算法有以下特点：</p>
<ul>
<li>漏桶容量固定，漏洞出水速率是固定的（请求处理速度固定）</li>
<li>流量进入漏桶的速率是没有限制的（但不会立即处理，需要排队等待经过漏洞）</li>
<li>桶满了以后会溢出（拒绝新的请求）</li>
</ul>
<p>漏桶算法限制的关键『请求处理速度』，即使遇到突发流量，我们的处理速度依然不变，因此会有一部分请求在排队，会等待延迟处理，但结果输出始终不会超出『请求处理速度』的限制。</p>
<h2 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h2><p>令牌桶算法用来控制发送到网络上的数据的数目，并允许突发数据的发送。</p>
<p><img src="/images/PHP/api-rate-limiting-algorithm-practices/token_bucket_1.png"></p>
<p>令牌桶算法和漏桶算法的方向刚好是相反的，我们有一个固定的桶，桶里存放着令牌（token）。一开始桶是空的，系统按固定的时间（rate）往桶里添加令牌，直到桶里的令牌数满，多余的请求会被丢弃。当请求来的时候，从桶里移除一个令牌，如果桶是空的则拒绝请求或者阻塞。</p>
<p><img src="/images/PHP/api-rate-limiting-algorithm-practices/token_bucket.png"></p>
<h3 id="PHP实现v4"><a href="#PHP实现v4" class="headerlink" title="PHP实现v4"></a>PHP实现v4</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tokenBucketRateLimiter</span> <span class="keyword">implements</span> <span class="title">RateLimiter</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$prefix</span>   = <span class="string">&quot;ratelimiter:tokenbucket:&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$key</span>      = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$rate</span>     = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$capacity</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string  $key      计数KEY</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> integer $rate     产生令牌的速率（个/秒）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int     $capacity 漏桶容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$key</span>, <span class="keyword">int</span> <span class="variable">$rate</span>, <span class="keyword">int</span> <span class="variable">$capacity</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;capacity = <span class="variable">$capacity</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key      = <span class="variable language_">$this</span>-&gt;prefix . <span class="variable">$key</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;rate     = <span class="variable">$rate</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">access</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//当前时间</span></span><br><span class="line">        <span class="variable">$time</span> = <span class="title function_ invoke__">time</span>();</span><br><span class="line">        [<span class="variable">$lastTime</span>, <span class="variable">$tokensLeft</span>] = <span class="title class_">Predis</span>::<span class="title function_ invoke__">hmget</span>(<span class="variable language_">$this</span>-&gt;key, <span class="string">&#x27;last_time&#x27;</span>, <span class="string">&#x27;tokens_left&#x27;</span>);</span><br><span class="line">        <span class="comment">//推算新产生的token数量</span></span><br><span class="line">        <span class="variable">$tokensAppend</span> = (<span class="variable">$time</span> - <span class="variable">$lastTime</span>) * <span class="variable">$rate</span>;</span><br><span class="line">        <span class="comment">//当前剩余 tokens 数量</span></span><br><span class="line">        <span class="variable">$tokensLeft</span> = <span class="title function_ invoke__">min</span>(<span class="variable language_">$this</span>-&gt;capacity, <span class="variable">$tokensLeft</span> + <span class="variable">$tokensAppend</span>);</span><br><span class="line">        <span class="comment">//更新上次请求的时间</span></span><br><span class="line">        <span class="title class_">Predis</span>::<span class="title function_ invoke__">hSet</span>(<span class="variable language_">$this</span>-&gt;key, <span class="string">&#x27;last_time&#x27;</span>, <span class="variable">$time</span>);</span><br><span class="line">        <span class="comment">//判断token是否足够</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$tokensLeft</span> &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title class_">Predis</span>::<span class="title function_ invoke__">hSet</span>(<span class="variable language_">$this</span>-&gt;key, <span class="string">&#x27;tokens_left&#x27;</span>, <span class="variable">$tokensPend</span> - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Lua实现v4"><a href="#Lua实现v4" class="headerlink" title="Lua实现v4"></a>Lua实现v4</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> token = KEYS[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">local</span> now = <span class="built_in">tonumber</span>(ARGV[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> rate = <span class="built_in">tonumber</span>(ARGV[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">local</span> capacity = <span class="built_in">tonumber</span>(ARGV[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> lastTime = <span class="built_in">tonumber</span>(redis.call(<span class="string">&#x27;HGET&#x27;</span>, token, <span class="string">&#x27;last_time&#x27;</span>) <span class="keyword">or</span> <span class="number">0</span>)</span><br><span class="line"><span class="keyword">local</span> tokensLeft = <span class="built_in">tonumber</span>(redis.call(<span class="string">&#x27;HGET&#x27;</span>, token, <span class="string">&#x27;tokens_left&#x27;</span>) <span class="keyword">or</span> <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">tokensLeft = <span class="built_in">math</span>.<span class="built_in">min</span>(capacity, tokensLeft + (now - lastTime) * rate)</span><br><span class="line">redis.call(<span class="string">&#x27;HSET&#x27;</span>, token, <span class="string">&#x27;last_time&#x27;</span>, now)</span><br><span class="line"><span class="keyword">if</span> tokensLeft &gt;= <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">    redis.call(<span class="string">&#x27;HSET&#x27;</span>, token, <span class="string">&#x27;tokens_left&#x27;</span>, tokensLeft - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<ul>
<li>往令牌桶中以固定速率增加令牌</li>
<li>令牌桶的容量有限，如果桶满了，新令牌溢出丢弃</li>
<li>如果桶中可用令牌不足时，该请求会被限流</li>
</ul>
<p>令牌桶算法中流量的流入速率是不限制的，流出速率也是没有强制限制的（令牌消耗瞬间峰值是桶的大小），但是令牌的产生和积攒需要时间，因此既支持一定程度突发流量，又能满足总体限流的目标。</p>
<p>对比<code>漏桶算法</code>和<code>令牌桶算法</code>，我们发现，<code>漏桶算法</code>能够强行限制数据的传输速率，而<code>令牌桶算法</code>在能够限制数据的平均传输速率外，还允许某种程度的突发传输。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>Api</tag>
        <tag>rate-limiter</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 单一入口模式</title>
    <url>/PHP/php-single-entry-mode/</url>
    <content><![CDATA[<h2 id="单一入口"><a href="#单一入口" class="headerlink" title="单一入口"></a>单一入口</h2><blockquote>
<p>单一入口的概念其实很好理解，我们可以把整个应用想象为一个黑色的盒子，整个盒子只有一个入口，这个入口由一个文件把守，它要求所有的请求必须通过这个入口文件检验才能进入。</p>
</blockquote>
<p>在聊单一入口的应用之前，我们先来看一看传统应用的多入口模式，这里我们参考一下 ECSHOP 的网站根目录的部分目录结构：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">- article.php 文章内容</span><br><span class="line">- article_cat.php 文章分类</span><br><span class="line">- auction.php 拍卖前台文件</span><br><span class="line">- brand.php 品牌列表</span><br><span class="line">- captcha.php 生成验证码</span><br><span class="line">- catalog.php 列出所以分类及品牌</span><br><span class="line">- category.php 商品分类</span><br><span class="line">- comment.php 提交用户评论</span><br><span class="line">- compare.php 商品比较程序</span><br><span class="line">- cycle_image.php 轮播图片程序</span><br><span class="line">- feed.php RSS Feed 生成程序</span><br><span class="line">- flow.php 购物流程</span><br><span class="line">- gallery.php 商品相册</span><br><span class="line">- goods.php 商品详情</span><br><span class="line">- goods_script.php 生成商品列表</span><br><span class="line">- group_buy.php 团购商品前台文件</span><br><span class="line">- index.php 首页文件</span><br><span class="line">- myship.php 支付配送DEMO</span><br><span class="line">- pick_out.php 选购中心</span><br><span class="line">- receive.php 处理收回确认的页面</span><br><span class="line">- index.php 首页文件</span><br></pre></td></tr></table></figure>

<p>你可以看到上述目录就是网站的根目录，这个目录下存放着相应页面的响应代码，如果我们想要访问首页，我们就在网址中访问 <code>index.php</code>，如果我们想要访问商品页，那么我们就需要访问 <code>goods.php</code> 文件，这就是传统应用的多入口模式，我们可以通过不同的文件入口来得到应用响应。</p>
<span id="more"></span>

<p>谈到这里，你应该意识到了 <strong>网站的根目录</strong> 和 <strong>应用的根目录</strong> 是两个不同的定义。<br>我们看下 Laravel 应用的根目录下包含了多个目录，其目录结构如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">- app</span><br><span class="line">- bootstrap</span><br><span class="line">- config</span><br><span class="line">- database</span><br><span class="line">- public</span><br><span class="line">  - index.php</span><br><span class="line">- resources</span><br><span class="line">- storage</span><br><span class="line">- tests</span><br><span class="line">- vendor</span><br></pre></td></tr></table></figure>

<p>这其中 <code>public</code> 目录才是网站的根目录，<code>index.php</code> 就是整个应用的守卫，它需要视察所有进入应用的请求。</p>
<h2 id="单一入口的优势"><a href="#单一入口的优势" class="headerlink" title="单一入口的优势"></a>单一入口的优势</h2><p>聊到这里，你一定会有所疑惑，Laravel 为何要采用单一入口的模式，这种单一入口有什么优势？</p>
<p>如果说这种单一入口目录结构的优势，那么我们不得不提及应用核心代码与静态资源的分离，使用这种方式，我们可以非常完美的将服务端核心代码与静态资源完全分离开来，这就意味着如果你想要访问 <code>public</code> 目录外的资源都必须要经过守卫的审查。这就为统一的安全性提供了便利。</p>
<p>我曾经见到过这么一个有趣的情况，某人在 ECSHOP 程序的配置文件目录下拷贝了一份配置并重命名为 <code>config.php.bak</code>，原意可能是为了防止自己忘记数据库的密码，但是这就意味着任何用户都可以通过浏览器访问到这个文件了，因为对于 Nginx 或者 Apache 来说这些 HTTP 请求只要路径正确，如果不是 PHP 程序的话，他们就会以静态资源的方式进行输出，当然，这只是个个例，但却足以让你明白动静分离的好处了。</p>
<p>那么我们现在穿透到黑盒的内部看一下，如果说黑盒是一个工厂，守卫把一个请求交由工厂来处理，那么它一定需要通过一定的流程来产出一个响应。那么它的流程一般是这样的：</p>
<div class="note success"><ul>
<li>初始化应用所需的模块资源</li>
<li>根据不同的请求类型将其导向相应的业务</li>
<li>业务处理</li>
<li>返回响应</li>
</ul>
</div>

<p>那么我们应该可以看出，其实单一入口最大的优势就是规范了开发流程。</p>
<p>我们可能很难想象规范化的流程能带来多大的开发效率上的提升，但是它确实能最大化的提升效率。</p>
<p>基于传统的多入口应用中，如果我们想要保存一个用户的认证状态，那么我们一定会使用服务端的 session 功能。所以你会在这些应用的每个牵涉到用户相关的入口页面的 PHP 文件中发现被引入了相关的 session 实现。这样，每次我们增加一个页面就要手动的引入一次，这完全背离的 DRY（Don’t Repeat Yourself) 原则。</p>
<p>而在单入口应用中，如果抽象度非常高的话，那么我们完全可以把 session 实现抽象为其中的一个中间件，这样，我们也完全可以在请求被守卫进行分发时由程序自动的判断是否需要启用 session 功能，这完全可以是自动化的。</p>
<p>再比如说，如果我们想对应用的请求启用日志功能，那么基于传统的多入口应用，我们需要在每一个入口中都加入日志功能，才能达到记录所有日志的效果，而在单入口应用中我们只需要添加一个日志中间件就可以让它来记录所有的日志了。</p>
<p>对于多入口的应用每当我增加一个入口页面时，我一定不能忘记引入基层的组件库。</p>
<div class="note default"><p>原文链接：<a href="http://www.jianshu.com/p/d93d79b2699f">Laravel 源码分析系列 —— 单一入口</a></p>
</div>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP empty 函数判断结果为空，但实际值却为非空</title>
    <url>/PHP/When-empty-is-not-empty/</url>
    <content><![CDATA[<h2 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h2><div class="note info"><p>PHP 7.1.16</p>
</div>

<p>最近我在一个项目中使用 <code>empty</code> 时获取到了一些意料之外的结果。下面是我处理后的调试记录，在这里分享给你。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(</span><br><span class="line">    <span class="variable">$person</span>-&gt;firstName,</span><br><span class="line">    <span class="keyword">empty</span>(<span class="variable">$person</span>-&gt;firstName)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>它的结果是：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;Freek&quot;</span></span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>结果出人意料。为什么变量的值为字符串，但同时会是空值呢？让我们在 <code>$person-&gt;firstName</code> 变量上尝试使用其它一些函数来进行判断吧：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(</span><br><span class="line">    <span class="variable">$person</span>-&gt;firstName,</span><br><span class="line">    <span class="keyword">empty</span>(<span class="variable">$person</span>-&gt;firstName),</span><br><span class="line">    <span class="keyword">isset</span>(<span class="variable">$person</span>-&gt;firstName),</span><br><span class="line">    <span class="title function_ invoke__">is_null</span>(<span class="variable">$person</span>-&gt;firstName)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>以上结果为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;Freek&quot;</span></span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">true</span>) <span class="comment">// empty</span></span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">true</span>) <span class="comment">// isset</span></span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">false</span>) <span class="comment">// is_null</span></span><br></pre></td></tr></table></figure>

<div class="note info"><p>注：这边我测试结果 isset 的结果同样为 false，可以到 <a href="http://www.dooccn.com/php7/#id/3f2d2339a9c74415c472e8637cda74a9">这里</a> 去运行下查看结果。</p>
</div>

<p><code>isset</code> 和 <code>is_null</code> 函数执行结果符合预期判断，唯独 <code>empty</code> 函数返回了错误结果。</p>
<p>这里让我们来看看 <code>Person</code> 类的实现代码吧：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$attributes</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$attributes</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;attributes = <span class="variable">$attributes</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;attributes[<span class="variable">$name</span>] ?? <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上述代码我们可以看到 <code>Person</code> 对象的成员变量是通过 <code>__get</code> 魔术方法从 <code>$attributes</code> 数组中检索出来的。</p>
<p>当将变量传入一个普通函数时，<code>$person-&gt;firstName</code> 会先进行取值处理，然后再将获取到的结果作为参数传入函数内。</p>
<p>但是 <code>empty</code> 不是一个函数，而是一种数据结构。所以当将 <code>$person-&gt;firstName</code> 传入 <code>empty</code> 时，并不会先进行取值处理。而是会先判断 <code>$person</code> 对象成员属性 <code>firstName</code> 的内容，由于这个属性并未真实存在，所以返回 <code>false</code>。</p>
<p>在这种应用场景下，<a href="http://php.net/manual/zh/language.oop5.overloading.php">官方文档</a>有给出解释:</p>
<div class="note warning"><p>在除 isset() 外的其它语言结构中无法使用重载的属性，这意味着当对一个重载的属性使用 empty() 时，重载魔术方法将不会被调用。</p>
<p>为避开此限制，必须将重载属性赋值到本地变量再使用 empty()</p>
</div>

<p>所以如果你希望 <code>empty</code> 函数能够正常处理类属性，可以将类属性赋值到本地变量再使用 <code>empty()</code>，或者我们在类中实现 <code>__isset</code> 魔术方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$attributes</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$attributes</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;attributes = <span class="variable">$attributes</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;attributes[<span class="variable">$name</span>] ?? <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$attribute</span> = <span class="variable language_">$this</span>-&gt;<span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> !<span class="keyword">empty</span>(<span class="variable">$attribute</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是当 <code>empty</code> 进行控制判断时，会使用这个魔术方法来判断最终的结果。</p>
<p>我们再来看看输出结果：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(</span><br><span class="line">   <span class="variable">$person</span>-&gt;firstName,</span><br><span class="line">   <span class="keyword">empty</span>(<span class="variable">$person</span>-&gt;firstName)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>新的检测结果：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;Freek&quot;</span></span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">false</span>)</span><br></pre></td></tr></table></figure>

<p>完美！</p>
<div class="note default"><p>原文链接：<a href="https://murze.be/when-empty-is-not-empty">When empty is not empty</a></p>
</div>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>empty</tag>
      </tags>
  </entry>
  <entry>
    <title>必须了解的mysql三大日志-binlog、redo log和undo log</title>
    <url>/MySQL/redolog-undolog-binlog-of-MySQL/</url>
    <content><![CDATA[<p>日志是<code>mysql</code>数据库的重要组成部分，记录着数据库运行期间各种状态信息。<code>mysql</code>日志主要包括错误日志、查询日志、慢查询日志、事务日志、二进制日志几大类。作为开发，我们重点需要关注的是二进制日志(<code>binlog</code>)和事务日志(包括<code>redo log</code>和<code>undo log</code>)，本文接下来会详细介绍这三种日志。</p>
<h2 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h2><p><code>binlog</code>用于记录数据库执行的写入性操作(不包括查询)信息，以二进制的形式保存在磁盘中。<code>binlog</code>是<code>mysql</code>的逻辑日志，并且由<code>Server</code>层进行记录，使用任何存储引擎的<code>mysql</code>数据库都会记录<code>binlog</code>日志。</p>
<blockquote>
<p>逻辑日志：<strong>可以简单理解为记录的就是sql语句</strong>。<br>物理日志：<strong>因为<code>mysql</code>数据最终是保存在数据页中的，物理日志记录的就是数据页变更</strong>。</p>
</blockquote>
<p><code>binlog</code>是通过追加的方式进行写入的，可以通过<code>max_binlog_size</code>参数设置每个<code>binlog</code>文件的大小，当文件大小达到给定值之后，会生成新的文件来保存日志。</p>
<h3 id="binlog使用场景"><a href="#binlog使用场景" class="headerlink" title="binlog使用场景"></a>binlog使用场景</h3><p>在实际应用中，<code>binlog</code>的主要使用场景有两个，分别是<strong>主从复制</strong>和<strong>数据恢复</strong>。</p>
<ol>
<li><strong>主从复制</strong>：在<code>Master</code>端开启<code>binlog</code>，然后将<code>binlog</code>发送到各个<code>Slave</code>端，<code>Slave</code>端重放<code>binlog</code>从而达到主从数据一致。</li>
<li><strong>数据恢复</strong>：通过使用<code>mysqlbinlog</code>工具来恢复数据。</li>
</ol>
<h3 id="binlog刷盘时机"><a href="#binlog刷盘时机" class="headerlink" title="binlog刷盘时机"></a>binlog刷盘时机</h3><p>对于<code>InnoDB</code>存储引擎而言，只有在事务提交时才会记录<code>biglog</code>，此时记录还在内存中，那么<code>biglog</code>是什么时候刷到磁盘中的呢？<code>mysql</code>通过<code>sync_binlog</code>参数控制<code>biglog</code>的刷盘时机，取值范围是<code>0-N</code>：</p>
<ul>
<li>0：不去强制要求，由系统自行判断何时写入磁盘；</li>
<li>1：每次<code>commit</code>的时候都要将<code>binlog</code>写入磁盘；</li>
<li>N：每N个事务，才会将<code>binlog</code>写入磁盘。</li>
</ul>
<p>从上面可以看出，<code>sync_binlog</code>最安全的是设置是<code>1</code>，这也是<code>MySQL 5.7.7</code>之后版本的默认值。但是设置一个大一些的值可以提升数据库性能，因此实际情况下也可以将值适当调大，牺牲一定的一致性来获取更好的性能。</p>
<span id="more"></span>

<h3 id="binlog日志格式"><a href="#binlog日志格式" class="headerlink" title="binlog日志格式"></a>binlog日志格式</h3><p><code>binlog</code>日志有三种格式，分别为<code>STATMENT</code>、<code>ROW</code>和<code>MIXED</code>。</p>
<blockquote>
<p>在 <code>MySQL 5.7.7</code>之前，默认的格式是<code>STATEMENT</code>，<code>MySQL 5.7.7</code>之后，默认值是<code>ROW</code>。日志格式通过<code>binlog-format</code>指定。</p>
</blockquote>
<ul>
<li><code>STATMENT</code><br>基于<code>SQL</code>语句的复制(<code>statement-based replication, SBR</code>)，每一条会修改数据的sql语句会记录到<code>binlog</code>中。<br>优点：不需要记录每一行的变化，减少了<code>binlog</code>日志量，节约了<code>IO</code>, 从而提高了性能；<br>缺点：在某些情况下会导致主从数据不一致，比如执行<code>sysdate()</code>、<code>slepp()</code>等。</li>
<li><code>ROW</code><br>基于行的复制(<code>row-based replication, RBR</code>)，不记录每条sql语句的上下文信息，仅需记录哪条数据被修改了。<br>优点：不会出现某些特定情况下的存储过程、或function、或trigger的调用和触发无法被正确复制的问题；<br>缺点：会产生大量的日志，尤其是<code>alter table</code>的时候会让日志暴涨</li>
<li><code>MIXED</code><br>基于<code>STATMENT</code>和<code>ROW</code>两种模式的混合复制(<code>mixed-based replication, MBR</code>)，一般的复制使用<code>STATEMENT</code>模式保存<code>binlog</code>，对于<code>STATEMENT</code>模式无法复制的操作使用<code>ROW</code>模式保存<code>binlog</code></li>
</ul>
<h2 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h2><h3 id="为什么需要redo-log"><a href="#为什么需要redo-log" class="headerlink" title="为什么需要redo log"></a>为什么需要redo log</h3><p>我们都知道，事务的四大特性里面有一个是<strong>持久性</strong>，具体来说就是<strong>只要事务提交成功，那么对数据库做的修改就被永久保存下来了，不可能因为任何原因再回到原来的状态</strong>。那么<code>mysql</code>是如何保证一致性的呢？最简单的做法是在每次事务提交的时候，将该事务涉及修改的数据页全部刷新到磁盘中。但是这么做会有严重的性能问题，主要体现在两个方面：</p>
<ol>
<li>因为<code>Innodb</code>是以<code>页</code>为单位进行磁盘交互的，而一个事务很可能只修改一个数据页里面的几个字节，这个时候将完整的数据页刷到磁盘的话，太浪费资源了！</li>
<li>一个事务可能涉及修改多个数据页，并且这些数据页在物理上并不连续，使用随机IO写入性能太差！</li>
</ol>
<p>因此<code>mysql</code>设计了<code>redo log</code>，<strong>具体来说就是只记录事务对数据页做了哪些修改</strong>，这样就能完美地解决性能问题了(相对而言文件更小并且是顺序IO)。</p>
<h3 id="redo-log基本概念"><a href="#redo-log基本概念" class="headerlink" title="redo log基本概念"></a>redo log基本概念</h3><p><code>redo log</code>包括两部分：一个是内存中的日志缓冲(<code>redo log buffer</code>)，另一个是磁盘上的日志文件(<code>redo log file</code>)。<code>mysql</code>每执行一条<code>DML</code>语句，先将记录写入<code>redo log buffer</code>，后续某个时间点再一次性将多个操作记录写到<code>redo log file</code>。这种<strong>先写日志，再写磁盘</strong>的技术就是<code>MySQL</code>里经常说到的<code>WAL(Write-Ahead Logging)</code> 技术。</p>
<p>在计算机操作系统中，用户空间(<code>user space</code>)下的缓冲区数据一般情况下是无法直接写入磁盘的，中间必须经过操作系统内核空间(<code>kernel space</code>)缓冲区(<code>OS Buffer</code>)。因此，<code>redo log buffer</code>写入<code>redo log file</code>实际上是先写入<code>OS Buffer</code>，然后再通过系统调用<code>fsync()</code>将其刷到<code>redo log file</code>中，过程如下：<br><img src="/images/MySQL/redolog-undolog-binlog-of-MySQL/KjiB4LpnPY.png"></p>
<p><code>mysql</code>支持三种将<code>redo log buffer</code>写入<code>redo log file</code>的时机，可以通过<code>innodb_flush_log_at_trx_commit</code>参数配置，各参数值含义如下：</p>
<table>
<thead>
<tr>
<th>参数值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>0（延迟写）</td>
<td>事务提交时不会将<code>redo log buffer</code>中日志写入到<code>os buffer</code>，而是每秒写入<code>os buffer</code>并调用<code>fsync()</code>写入到<code>redo log file</code>中。也就是说设置为0时是(大约)每秒刷新写入到磁盘中的，当系统崩溃，会丢失1秒钟的数据。</td>
</tr>
<tr>
<td>1（实时写，实时刷）</td>
<td>事务每次提交都会将<code>redo log buffer</code>中的日志写入<code>os buffer</code>并调用<code>fsync()</code>刷到<code>redo log file</code>中。这种方式即使系统崩溃也不会丢失任何数据，但是因为每次提交都写入磁盘，IO的性能较差。</td>
</tr>
<tr>
<td>2（实时写，延迟刷）</td>
<td>每次提交都仅写入到<code>os buffer</code>，然后是每秒调用<code>fsync()</code>将<code>os buffer</code>中的日志写入到<code>redo log file</code>。</td>
</tr>
</tbody></table>
<p><img src="/images/MySQL/redolog-undolog-binlog-of-MySQL/TDIN69GdQ6.png"></p>
<h3 id="redo-log记录形式"><a href="#redo-log记录形式" class="headerlink" title="redo log记录形式"></a>redo log记录形式</h3><p>前面说过，<code>redo log</code>实际上记录数据页的变更，而这种变更记录是没必要全部保存，因此<code>redo log</code>实现上采用了大小固定，循环写入的方式，当写到结尾时，会回到开头循环写日志。如下图：<br><img src="/images/MySQL/redolog-undolog-binlog-of-MySQL/M1bGsdyr8a.png"><br>同时我们很容易得知，<strong>在innodb中，既有<code>redo log</code>需要刷盘，还有<code>数据页</code>也需要刷盘，<code>redo log</code>存在的意义主要就是降低对<code>数据页</code>刷盘的要求</strong>。在上图中，<code>write pos</code>表示<code>redo log</code>当前记录的<code>LSN</code>(逻辑序列号)位置，<code>check point</code>表示<strong>数据页更改记录</strong>刷盘后对应<code>redo log</code>所处的<code>LSN</code>(逻辑序列号)位置。<code>write pos</code>到<code>check point</code>之间的部分是<code>redo log</code>空着的部分，用于记录新的记录；<code>check point</code>到<code>write pos</code>之间是<code>redo log</code>待落盘的数据页更改记录。当<code>write pos</code>追上<code>check point</code>时，会先推动<code>check point</code>向前移动，空出位置再记录新的日志。</p>
<p>启动<code>innodb</code>的时候，不管上次是正常关闭还是异常关闭，总是会进行恢复操作。因为<code>redo log</code>记录的是数据页的物理变化，因此恢复的时候速度比逻辑日志(如<code>binlog</code>)要快很多。<br>重启<code>innodb</code>时，首先会检查磁盘中数据页的<code>LSN</code>，如果数据页的<code>LSN</code>小于日志中的<code>LSN</code>，则会从<code>checkpoint</code>开始恢复。<br>还有一种情况，在宕机前正处于<code>checkpoint</code>的刷盘过程，且数据页的刷盘进度超过了日志页的刷盘进度，此时会出现数据页中记录的<code>LSN</code>大于日志中的<code>LSN</code>，这时超出日志进度的部分将不会重做，因为这本身就表示已经做过的事情，无需再重做。</p>
<h3 id="redo-log与binlog区别"><a href="#redo-log与binlog区别" class="headerlink" title="redo log与binlog区别"></a>redo log与binlog区别</h3><table>
<thead>
<tr>
<th></th>
<th>redo log</th>
<th>binlog</th>
</tr>
</thead>
<tbody><tr>
<td>文件大小</td>
<td><code>redo log</code>的大小是固定的。</td>
<td><code>binlog</code>可通过配置参数<code>max_binlog_size</code>设置每个<code>binlog</code>文件的大小。</td>
</tr>
<tr>
<td>实现方式</td>
<td><code>redo log</code>是<code>InnoDB</code>引擎层实现的，并不是所有引擎都有。</td>
<td><code>binlog</code>是<code>Server</code>层实现的，所有引擎都可以使用 <code>binlog</code>日志</td>
</tr>
<tr>
<td>记录方式</td>
<td>redo log 采用循环写的方式记录，当写到结尾时，会回到开头循环写日志。</td>
<td>binlog 通过追加的方式记录，当文件大小大于给定值后，后续的日志会记录到新的文件上</td>
</tr>
<tr>
<td>适用场景</td>
<td><code>redo log</code>适用于崩溃恢复(crash-safe)</td>
<td><code>binlog</code>适用于主从复制和数据恢复</td>
</tr>
</tbody></table>
<p>由<code>binlog</code>和<code>redo log</code>的区别可知：<code>binlog</code>日志只用于归档，只依靠<code>binlog</code>是没有<code>crash-safe</code>能力的。但只有<code>redo log</code>也不行，因为<code>redo log</code>是<code>InnoDB</code>特有的，且日志上的记录落盘后会被覆盖掉。因此需要<code>binlog</code>和<code>redo log</code>二者同时记录，才能保证当数据库发生宕机重启时，数据不会丢失。</p>
<h2 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h2><p>数据库事务四大特性中有一个是<strong>原子性</strong>，具体来说就是 <strong>原子性是指对数据库的一系列操作，要么全部成功，要么全部失败，不可能出现部分成功的情况</strong>。实际上，<strong>原子性</strong>底层就是通过<code>undo log</code>实现的。<code>undo log</code>主要记录了数据的逻辑变化，比如一条<code>INSERT</code>语句，对应一条<code>DELETE</code>的<code>undo log</code>，对于每个<code>UPDATE</code>语句，对应一条相反的<code>UPDATE</code>的<code>undo log</code>，这样在发生错误时，就能回滚到事务之前的数据状态。同时，<code>undo log</code>也是<code>MVCC</code>(多版本并发控制)实现的关键，这部分内容在<a href="https://juejin.im/post/6855129007336521741">面试中的老大难-mysql事务和锁，一次性讲清楚！</a>中有介绍，不再赘述。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://juejin.im/post/6844903794073960455">https://juejin.im/post/6844903794073960455</a></li>
<li><a href="https://www.cnblogs.com/f-ck-need-u/archive/2018/05/08/9010872.html">https://www.cnblogs.com/f-ck-need-u/archive/2018/05/08/9010872.html</a></li>
<li><a href="https://www.cnblogs.com/ivy-zheng/p/11094528.html">https://www.cnblogs.com/ivy-zheng/p/11094528.html</a></li>
<li><a href="https://yq.aliyun.com/articles/592937">https://yq.aliyun.com/articles/592937</a></li>
<li><a href="https://www.jianshu.com/p/5af73b203f2a">https://www.jianshu.com/p/5af73b203f2a</a></li>
<li><a href="https://www.jianshu.com/p/20e10ed721d0">https://www.jianshu.com/p/20e10ed721d0</a></li>
</ol>
<div class="note default"><p>原文链接：<a href="https://juejin.cn/post/6860252224930070536">必须了解的mysql三大日志-binlog、redo log和undo log</a></p>
</div>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>foreach ($data as &amp;$item) 循环引用产生的问题</title>
    <url>/PHP/foreach_problems_caused_by_circular_references/</url>
    <content><![CDATA[<h2 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h2><div class="note info"><p>PHP version 7.4</p>
</div>

<h2 id="问题呈现"><a href="#问题呈现" class="headerlink" title="问题呈现"></a>问题呈现</h2><p>最小化分析代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$data</span> = [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$data</span> <span class="keyword">as</span> &amp;<span class="variable">$item</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$data</span> <span class="keyword">as</span> <span class="variable">$item</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$data</span>);</span><br></pre></td></tr></table></figure>


<p>输出结果：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">Array</span></span><br><span class="line">(</span><br><span class="line">[<span class="number">0</span>] =&gt; <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">[<span class="number">1</span>] =&gt; <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>我们可以发现，$data的值莫名奇妙变了，而它只是经过了两个空循环而已，发生了什么？！</p>
<p>先总结一下 PHP 中两条关于引用的两个规则：</p>
<ul>
<li>给引用变量赋值，实际上是给引用所指向的变量赋值</li>
<li>一个引用变量可以被修改为对另外一个变量的引用</li>
</ul>
<p>下面我来一行行代码分析产生这个问题的原因：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$data</span> = [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环开始，$item 变量不存在，新建一个$item 变量，且是一个引用变量，它不指向任何变量地址</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$data</span> <span class="keyword">as</span> &amp;<span class="variable">$item</span>) &#123;</span><br><span class="line">    <span class="comment">// loop 1: 执行了 $item = &amp;$data[0]；$item 指向 $data[0] 的地址</span></span><br><span class="line">    <span class="comment">// loop 2: 执行了 $item = &amp;$data[1]；$item 指向 $data[1] 的地址</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 提示：这个循环没有改变 $data 的数据，只是 $item 依然指向第二个元素 的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环开始，$item 变量存在，不会新建变量</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$data</span> <span class="keyword">as</span> <span class="variable">$item</span>) &#123;</span><br><span class="line">    <span class="comment">// loop 1: 执行了 $item = $data[0]；$item 所指向的变量（即 第二个元素）的值被修改为$data[0]（即&#x27;foo&#x27;），这里已经导致了$data 两个元素都等于 &#x27;foo&#x27;</span></span><br><span class="line">    <span class="comment">// loop 2: 执行了 $item = $data[1]；由于$item 指向的是$data[1]，实际上相当于执行$data[1] = $data[1]，没有任何意义</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最后$data 中的两个元素都是 &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如何避免这个问题1：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="variable">$data</span> <span class="keyword">as</span> &amp;<span class="variable">$item</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每次 loop 销毁$item （实际上只要在最后一次 loop 销毁即可，因此你可以把 unset 写到 foreach 后面，就是不是很好看）</span></span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$item</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如何避免这个问题2：</p>
<div class="note primary"><p>不使用引用</p>
</div>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL2 + Docker + Laradock 配置</title>
    <url>/WSL/WSL2+Docker+Laradock/</url>
    <content><![CDATA[<h2 id="系统环境介绍"><a href="#系统环境介绍" class="headerlink" title="系统环境介绍"></a>系统环境介绍</h2><div class="note info"><p>Win 10 2004<br>WSL2(Ubuntu 20.04)<br>Docker 19.03.13</p>
</div>

<h2 id="启用-Linux-子系统"><a href="#启用-Linux-子系统" class="headerlink" title="启用 Linux 子系统"></a>启用 Linux 子系统</h2><p>打开 <code>控制面板 -&gt; 程序 -&gt; 启用或关闭Windows功能</code>。找到<code>适用于Linux的Windows子系统</code>和<code>虚拟机平台</code>，勾选这两项之后确定，并重新启动计算机。</p>
<h2 id="切换系统-WSL-默认版本到-2"><a href="#切换系统-WSL-默认版本到-2" class="headerlink" title="切换系统 WSL 默认版本到 2"></a>切换系统 WSL 默认版本到 2</h2><p>使用管理员用户打开 <code>Windows PowerShell</code>，运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure>

<p>注意，有可能会出现如下提示：</p>
<div class="note warning"><p>WSL 2 需要更新其内核组件。有关信息，请访问 <a href="https://aka.ms/wsl2kernel">https://aka.ms/wsl2kernel</a></p>
</div>

<p>出现这个提示，说明需要更新 WSL2 的内核。按照提示打开链接。点击下图中的下载链接，下载并安装 WSL2 内核。</p>
<p><img src="/images/WSL/WSL2+Docker+Laradock/72ab658461070fe25ee5e27.png"></p>
<span id="more"></span>

<h2 id="安装-Ubuntu-发行版"><a href="#安装-Ubuntu-发行版" class="headerlink" title="安装 Ubuntu 发行版"></a>安装 Ubuntu 发行版</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>打开 <code>Microsoft Store</code>，搜索 Ubuntu，界面如下所示：</p>
<p><img src="/images/WSL/WSL2+Docker+Laradock/1327b4d296971908b11e2d.png"></p>
<p>根据自己的需要，选择对应的 Ubuntu 版本并安装。<br>完成之后在开始菜单会出现 Ubuntu 菜单项。打开它，Ubuntu 将会进行初始化操作。等待几分钟后按照提示，为 Ubuntu 设置用户名和密码。<br>最后，我们需要验证 Ubuntu 是否在 WSL2 的环境下启动。以管理员用户打开 <code>Windows PowerShell</code>，执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></table></figure>

<p>如果看到如下信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  NAME            STATE           VERSION</span><br><span class="line">* Ubuntu-20.04    Running         2</span><br></pre></td></tr></table></figure>

<p>说明 Ubuntu 在 WSL2 环境下运行。到此为止安装完毕。<br>如果发现 VERSION 为 1，说明 Ubuntu 运行在 WSL1 下。需要手工切换。<br>首先关闭 WSL下运行的 Linux，执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl --shutdown</span><br></pre></td></tr></table></figure>

<p>然后执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl --set-version &lt;Linux发行版名称&gt; 2</span><br><span class="line">这边就是输入 wsl --set-version Ubuntu-20.04 2</span><br></pre></td></tr></table></figure>

<p>其中 <code>Linux发行版名称</code> 为前面安装的 Linux 名称，可以通过 <code>wsl -l -v</code> 命令查看。执行命令后等待片刻。等命令行提示转换完成，我们已经成功将 Linux 切换到 WSL2 环境。</p>
<h3 id="systemctl-无法使用的问题"><a href="#systemctl-无法使用的问题" class="headerlink" title="systemctl 无法使用的问题"></a>systemctl 无法使用的问题</h3><p>WSL2 经过测试无法使用 <code>systemctl</code> 命令，报如下错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">System has not been booted with systemd as init system (PID 1). Can<span class="string">&#x27;t operate.</span></span><br><span class="line"><span class="string">Failed to connect to bus: Host is down</span></span><br></pre></td></tr></table></figure>

<p>参考了<a href="https://forum.snapcraft.io/t/running-snaps-on-wsl2-insiders-only-for-now/13033">Running Snaps on WSL2 (Insiders only for now)</a> 之后给出如下解决方案：</p>
<ol>
<li>安装 <code>daemonize</code> 和 <code>fontconfig</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install -y fontconfig daemonize</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编辑 <code>/etc/profile</code> 脚本，加入如下内容：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SYSTEMD_PID=$(ps -ef | grep <span class="string">&#x27;/lib/systemd/systemd --system-unit=basic.target$&#x27;</span> | grep -v unshare | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$SYSTEMD_PID</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">   sudo /usr/bin/daemonize /usr/bin/unshare --fork --pid --mount-proc /lib/systemd/systemd --system-unit=basic.target</span><br><span class="line">   SYSTEMD_PID=$(ps -ef | grep <span class="string">&#x27;/lib/systemd/systemd --system-unit=basic.target$&#x27;</span> | grep -v unshare | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$SYSTEMD_PID</span>&quot;</span> ] &amp;&amp; [ <span class="string">&quot;<span class="variable">$SYSTEMD_PID</span>&quot;</span> != <span class="string">&quot;1&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">exec</span> sudo /usr/bin/nsenter -t <span class="variable">$SYSTEMD_PID</span> -a su - <span class="variable">$LOGNAME</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改 <code>/etc/sudoers</code> 文件，加入如下内容：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%sudo ALL=(ALL) NOPASSWD: /usr/sbin/daemonize /usr/bin/unshare --fork --pid --mount-proc /lib/systemd/systemd --system-unit=basic.target</span><br><span class="line">%sudo ALL=(ALL) NOPASSWD: /usr/bin/nsenter -t [0-9]* -a su - [a-zA-Z0-9]*</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>执行 <code>source /etc/profile</code> 或者是重新打开 <code>terminal</code>，执行 <code>systemctl</code> 验证是否能够正常操作。</li>
</ol>
<h3 id="开启-ssh"><a href="#开启-ssh" class="headerlink" title="开启 ssh"></a>开启 ssh</h3><ul>
<li>卸载旧 ssh server</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt remove openssh-server</span><br></pre></td></tr></table></figure>

<ul>
<li>安装 ssh server</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install openssh-server</span><br></pre></td></tr></table></figure>

<ul>
<li>修改 ssh server 配置</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>

<p>修改以下配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Port 22 #默认即可，如果有端口占用可以自己修改</span><br><span class="line">PasswordAuthentication yes（允许用户名密码方式登录）</span><br><span class="line">PermitRootLogin yes （允许root用户远程登录，有需要 root 登录就开起来）</span><br></pre></td></tr></table></figure>

<ul>
<li>重启服务</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service ssh --full-restart</span><br></pre></td></tr></table></figure>

<ul>
<li>连接</li>
</ul>
<p><img src="/images/WSL/WSL2+Docker+Laradock/200d2ce9b2c039eed97770.png"></p>
<ul>
<li>设置 ssh 开机自动启动</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开机自动启动ssh命令</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭ssh开机自动启动命令</span></span><br><span class="line">sudo systemctl <span class="built_in">disable</span> ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单次开启ssh</span></span><br><span class="line">sudo systemctl start ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单次关闭ssh</span></span><br><span class="line">sudo systemctl stop ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置好后重启系统</span></span><br><span class="line">reboot</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看ssh是否启动，看到Active: active (running)即表示成功</span></span><br><span class="line">sudo systemctl status ssh</span><br></pre></td></tr></table></figure>

<h2 id="安装-Docker-Desktop-in-Windows-10"><a href="#安装-Docker-Desktop-in-Windows-10" class="headerlink" title="安装 Docker Desktop in Windows 10"></a>安装 Docker Desktop in Windows 10</h2><p>官网：<a href="https://www.docker.com/products/Docker-desktop">https://www.Docker.com/products/Docker-desktop</a></p>
<p>现在 <code>Docker Desktop Windows</code> 版已经能够支持 WSL 作为 Docker Engine 运行，可以同时支持在 Linux 和 Windows 命令行下操作 Docker。</p>
<ul>
<li>确保 Ubuntu 内的 Docker 已经卸载，如果没有卸载，可以执行：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt remove docker-ce</span><br><span class="line">sudo apt remove docker-ce-cli</span><br></pre></td></tr></table></figure>

<p>注意：如果发现在 Ubuntu 内无法执行 <code>docker</code> 命令，可以通过如下操作打开：<br>进入 Docker Desktop 的 settings，如下所示：</p>
<p><img src="/images/WSL/WSL2+Docker+Laradock/6ed5b7509e226ff601af04fc.png"></p>
<p>保存下，即可在 Ubuntu 内直接使用 <code>docker</code> 命令。</p>
<h2 id="迁移-WSL-到非系统盘"><a href="#迁移-WSL-到非系统盘" class="headerlink" title="迁移 WSL 到非系统盘"></a>迁移 WSL 到非系统盘</h2><p>默认 WSL 总是安装到 C 盘，这样对于C盘空间紧张的用户完全不友好。</p>
<p>我们可以使用 <code>LxRunOffline</code> 工具来迁移WSL到其他磁盘分区。</p>
<p><code>LxRunOffline</code> 的<a href="https://github.com/DDoSolitary/LxRunOffline/releases">下载链接</a>。在 Windows PowerShell 运行需要下载 <code>LxRunOffline-vx.x.x-msvc.zip</code> 版本。解压到任意目录即可使用。</p>
<blockquote>
<p><code>LxRunOffline</code> 是一个第三方 WSL Linux 发行版管理工具，可以认为是 WSL 命令的增强版。它可以安装和卸载 Linux 发行版，迁移，复制，导入导出和设置环境变量等。具体的使用帮助可执行 <code>.\LxRunOffline.exe \h</code> 查看命令介绍。</p>
</blockquote>
<p>迁移过程分为3步：</p>
<ol>
<li>获取准备迁移的发行版名称。执行：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\xxx\Desktop&gt; .\LxRunOffline.exe list</span><br><span class="line">Ubuntu-20.04</span><br></pre></td></tr></table></figure>

<p>获取系统当前已安装的发行版。例子中返回的发行版名称为 <code>Ubuntu-20.04</code></p>
<ol start="2">
<li>执行迁移命令。格式如下：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.\LxRunOffline.exe m -n &lt;发行版名称&gt; -d &lt;目标路径&gt;</span><br></pre></td></tr></table></figure>

<p>比如我们要将 <code>Ubuntu-20.04</code> 移动到 <code>D:\wsl\Ubuntu-20.04</code>(要确保 D:\wsl 目录存在)，执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.\LxRunOffline.exe m -n Ubuntu-20.04 -d D:\wsl\Ubuntu-20.04</span><br></pre></td></tr></table></figure>

<p>如果 Ubuntu 正在运行，需要先关闭在进行迁移，关闭命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\xxx\Desktop&gt; wsl --shutdown</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动命令为 wsl -d Ubuntu-20.04</span></span><br></pre></td></tr></table></figure>

<p>等待命令执行完毕返回。</p>
<ol start="3">
<li>查看迁移后发行版的安装路径。执行：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS C:\Users\xxx\Desktop&gt; .\LxRunOffline.exe di -n Ubuntu-20.04</span><br><span class="line">D:\wsl\Ubuntu-20.04</span><br></pre></td></tr></table></figure>

<p>返回的安装位置是 <code>D:\wsl\Ubuntu-20.04</code>，说明迁移成功。</p>
<h2 id="文件系统相互访问"><a href="#文件系统相互访问" class="headerlink" title="文件系统相互访问"></a>文件系统相互访问</h2><h3 id="在-Win10-下访问-Linux-子系统文件"><a href="#在-Win10-下访问-Linux-子系统文件" class="headerlink" title="在 Win10 下访问 Linux 子系统文件"></a>在 Win10 下访问 Linux 子系统文件</h3><p>进入 <code>CMD</code> 或者 <code>Windows PowerShell</code>，输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> \\wsl$\Ubuntu-20.04\</span><br></pre></td></tr></table></figure>

<p>可以进入到 Linux 子系统根目录。如下图所示：</p>
<p><img src="/images/WSL/WSL2+Docker+Laradock/c1d97508855edd74660c4.png"></p>
<p>或者打开文件资源管理器，在地址栏输入 <code>\\wsl$\Ubuntu-20.04</code>，也可以跳转到 Linux 子系统根目录。</p>
<p><img src="/images/WSL/WSL2+Docker+Laradock/b35aa3e075c9c062cf121ae7d5.png"></p>
<p>或者在 Linux 子系统中，输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">explorer.exe .</span><br></pre></td></tr></table></figure>

<p>会自动打开Linux 子系统目录。</p>
<h3 id="Linux-子系统访问-Win10-文件"><a href="#Linux-子系统访问-Win10-文件" class="headerlink" title="Linux 子系统访问 Win10 文件"></a>Linux 子系统访问 Win10 文件</h3><p>进入Linux子系统运行 <code>df -h</code>，看到如下输出：</p>
<p><img src="/images/WSL/WSL2+Docker+Laradock/bab99324dd79668c4ff76.png"></p>
<p>注意观察后两行。本人电脑有两个分区。<code>/mnt/c</code> 和 <code>/mnt/d</code> 正好分别对应本机的C盘和D盘。</p>
<h2 id="Laradock"><a href="#Laradock" class="headerlink" title="Laradock"></a>Laradock</h2><h3 id="下载-Laradock，在-Ubuntu-里运行："><a href="#下载-Laradock，在-Ubuntu-里运行：" class="headerlink" title="下载 Laradock，在 Ubuntu 里运行："></a>下载 Laradock，在 Ubuntu 里运行：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /www <span class="comment"># 目录自己随意</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/laradock/laradock.git</span><br></pre></td></tr></table></figure>

<p>进入 <code>./laradock</code> 目录，将 <code>env-example</code> 复制为 <code>.env</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> laradock/</span><br><span class="line"><span class="built_in">cp</span> env-example .<span class="built_in">env</span></span><br></pre></td></tr></table></figure>

<p><code>.env</code> 文件中部分需要注意的变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 这个变量通常默认就行，最后此时的项目目录会映射到 workspace 容器的 `/var/www/` 目录中</span><br><span class="line">APP_CODE_PATH_HOST=../</span><br><span class="line"></span><br><span class="line"># 像mysql等需要volume的数据会存放在宿主机中的位置，如果有需要可以修改一下</span><br><span class="line">DATA_PATH_HOST=~/.laradock/data</span><br><span class="line"></span><br><span class="line"># php版本（7.4 - 7.3 - 7.2 - 7.1 - 7.0 - 5.6）</span><br><span class="line">PHP_VERSION=7.4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### MYSQL #################################################</span><br><span class="line"># mysql版本，默认是lastest，根据需要修改</span><br><span class="line">MYSQL_VERSION=5.7</span><br><span class="line"># 默认数据库名字</span><br><span class="line">MYSQL_DATABASE=laravel</span><br><span class="line"># 数据库用户名</span><br><span class="line">MYSQL_USER=default</span><br><span class="line"># 数据库用户密码</span><br><span class="line">MYSQL_PASSWORD=secret</span><br><span class="line"># 数据库端口</span><br><span class="line">MYSQL_PORT=3306</span><br><span class="line"># 数据库root用户的密码</span><br><span class="line">MYSQL_ROOT_PASSWORD=root</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 更换中国镜像源，改为true</span><br><span class="line">CHANGE_SOURCE=true</span><br><span class="line"># 上面 `CHANGE_SOURCE` 改为`true`之后，就会更换为aliyun镜像源</span><br><span class="line">UBUNTU_SOURCE=aliyun</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### WORKSPACE #############################################</span><br><span class="line"># 将comoser更换为阿里镜像源（更改为其他国内镜像源也可以，否则速度不稳定）</span><br><span class="line">WORKSPACE_COMPOSER_REPO_PACKAGIST=https://mirrors.aliyun.com/composer/</span><br><span class="line"># 设置NVM安装node的淘宝镜像源</span><br><span class="line">WORKSPACE_NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node</span><br><span class="line"># 设置node的淘宝的registry</span><br><span class="line">WORKSPACE_NPM_REGISTRY=https://registry.npm.taobao.org/</span><br><span class="line"># 时间改为PRC</span><br><span class="line">WORKSPACE_TIMEZONE=PRC</span><br></pre></td></tr></table></figure>

<p>如果不需要 node，可以将以下配置改为 false，上面的 node 淘宝镜像源就不需要配置了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WORKSPACE_INSTALL_NODE=false</span><br><span class="line">WORKSPACE_INSTALL_YARN=false</span><br><span class="line">WORKSPACE_INSTALL_NPM_GULP=false</span><br><span class="line">WORKSPACE_INSTALL_NPM_BOWER=false</span><br><span class="line">WORKSPACE_INSTALL_NPM_VUE_CLI=false</span><br><span class="line">WORKSPACE_INSTALL_NPM_ANGULAR_CLI=false</span><br></pre></td></tr></table></figure>

<h3 id="构建并启动-Docker-容器"><a href="#构建并启动-Docker-容器" class="headerlink" title="构建并启动 Docker 容器"></a>构建并启动 Docker 容器</h3><div class="note default"><p>要在 .&#x2F;laradock 目录下 执行命令</p>
</div>

<p>默认会启动 <code>workspace</code>、<code>php-fpm</code> 和 <code>composer</code> 等，都会自动配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d nginx mysql</span><br></pre></td></tr></table></figure>

<div class="note success"><p>每次打 <code>docker-compose</code> 命令太长了，这边设置个 <code>dc</code> 别名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim  ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>添加别名：<code>alias dc=&#39;docker-compose&#39;</code></p>
<p>保存退出，然后执行命令：<code>source ~/.bashrc</code></p>
</div>

<p>构建完成后，进入 workspace，安装 Laravel 框架</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入workspace容器</span></span><br><span class="line">$ dc <span class="built_in">exec</span> workspace bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在容器中执行composer命令将Laravel框架安装在 ./laravel 目录中</span></span><br><span class="line">root@b0cf8f8333e4:/var/www<span class="comment"># composer create-project --prefer-dist laravel/laravel laravel</span></span><br></pre></td></tr></table></figure>

<p>配置 nginx 站点：<code>./laradock/nginx/sites/</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> laravel.conf.example laravel.conf</span><br></pre></td></tr></table></figure>

<p>修改 <code>laravel.conf</code> 配置：</p>
<p><img src="/images/WSL/WSL2+Docker+Laradock/ef5861f77083d6f5c2a25.png"></p>
<p>重启 nginx 容器，使站点配置文件生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dc restart nginx</span><br><span class="line">或者</span><br><span class="line">dc <span class="built_in">exec</span> nginx nginx -s reload</span><br></pre></td></tr></table></figure>

<p>在 <strong>Win10 hosts 文件</strong> 中加入对应的 ip 和域名，即可访问。</p>
<p><img src="/images/WSL/WSL2+Docker+Laradock/a003d1980439b74f569cda3ff6.png"></p>
<p>出现这个错误，说明目录没有权限，需要更改目录权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> -R www-data:www-data /var/www/laravel</span><br><span class="line">项目目录的 storage 文件夹没有写入权限。在项目目录执行 <span class="built_in">chmod</span> -R 777 storage</span><br></pre></td></tr></table></figure>

<h3 id="Laravel-中数据库配置：-laravel-env"><a href="#Laravel-中数据库配置：-laravel-env" class="headerlink" title="Laravel 中数据库配置：./laravel/.env"></a>Laravel 中数据库配置：<code>./laravel/.env</code></h3><blockquote>
<p>laradock 的 mysql 容器不是以 ip 地址连接的，而是以 mysql 标签名连接的所以 .&#x2F;laravel&#x2F;.env 中关于 DB_HOST 的值不是 ip 地址，而是 mysql 这个单词</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DB_CONNECTION=mysql</span><br><span class="line">DB_HOST=mysql</span><br><span class="line">DB_PORT=3306</span><br><span class="line">DB_DATABASE=laravel</span><br><span class="line">DB_USERNAME=root</span><br><span class="line">DB_PASSWORD=root</span><br></pre></td></tr></table></figure>

<h3 id="关于-mysql-数据库管理工具"><a href="#关于-mysql-数据库管理工具" class="headerlink" title="关于 mysql 数据库管理工具"></a>关于 mysql 数据库管理工具</h3><ul>
<li>途径一：通过 phpmyadmin</li>
</ul>
<p>workspace 占用着 8080 端口，所以需要修改 <code>./laradock/.env</code> 中的端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 把phpmyadmin默认的8080改为不被占用的端口</span><br><span class="line">PMA_PORT=8081</span><br></pre></td></tr></table></figure>

<p>启动 phpmyadmin</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dc up -d phpmyadmin</span><br></pre></td></tr></table></figure>

<p>浏览器网址：<code>localhost:8081</code></p>
<p><img src="/images/WSL/WSL2+Docker+Laradock/bb86447b7020a080ece5cfc0a0cd1467.png"></p>
<div class="note warning"><p>如果用户名：root，密码：root 并不能正常登录 phpmyadmin</p>
</div>

<p>这是 PHP7 和 MySQL8 的 authentication 方法不一致的问题，重新修改用户名密码即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;root&#x27;;</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;root&#x27;;</span><br><span class="line">ALTER USER &#x27;default&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;secret&#x27;;</span><br></pre></td></tr></table></figure>

<p>回到 phpmyadmin 中，使用 host: mysql, user: root, password: root 就可以正常登录了</p>
<ul>
<li>途径二：通过 adminer</li>
</ul>
<p>修改 <code>./laradock/.env</code> 中的端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 把adminer默认的8080改为不被占用的端口</span><br><span class="line">ADM_PORT=8082</span><br></pre></td></tr></table></figure>

<p>启动 adminer</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dc up -d adminer</span><br></pre></td></tr></table></figure>

<p>浏览器网址：<code>localhost:8082</code></p>
<p><img src="/images/WSL/WSL2+Docker+Laradock/fec42f8e94bef61b14a6ce.png"></p>
<ul>
<li>途径三：通过宿主机数据库管理工具管理</li>
</ul>
<p>修改 <code>./laradock/.env</code> 中 mysql 客户端端口号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MYSQL_PORT=3308</span><br></pre></td></tr></table></figure>

<p><img src="/images/WSL/WSL2+Docker+Laradock/b8cd1be2af0c5eb55946633.png"></p>
<p>至此，基本的配置和安装都结束了。</p>
<h2 id="WSL2-的一些网络访问问题"><a href="#WSL2-的一些网络访问问题" class="headerlink" title="WSL2 的一些网络访问问题"></a>WSL2 的一些网络访问问题</h2><p>参考此<a href="https://lengthmin.me/posts/wsl2-network-tricks/">链接</a></p>
]]></content>
      <categories>
        <category>WSL</category>
      </categories>
      <tags>
        <tag>WSL2</tag>
        <tag>Docker</tag>
        <tag>Laradock</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP7中的异常与错误处理</title>
    <url>/PHP/throwable-exceptions-and-errors-in-php7/</url>
    <content><![CDATA[<h2 id="PHP-中的-Exception-Error-Throwable"><a href="#PHP-中的-Exception-Error-Throwable" class="headerlink" title="PHP 中的 Exception, Error, Throwable"></a>PHP 中的 Exception, Error, Throwable</h2><ul>
<li>PHP 中将代码自身异常(一般是环境或者语法非法所致)称作错误 <code>Error</code>，将运行中出现的逻辑错误称为异常 <code>Exception</code></li>
<li>错误是没法通过代码处理的，而异常则可以通过 <code>try/catch</code> 来处理</li>
<li>PHP7 中出现了 <code>Throwable</code> 接口，该接口由 <code>Error</code> 和 <code>Exception</code> 实现，用户不能直接实现 <code>Throwable</code> 接口，而只能通过继承 <code>Exception</code> 来实现接口</li>
</ul>
<h2 id="PHP7-异常处理机制"><a href="#PHP7-异常处理机制" class="headerlink" title="PHP7 异常处理机制"></a>PHP7 异常处理机制</h2><p>过去的 PHP，处理致命错误几乎是不可能的。致命错误不会调用由 <code>set_error_handler()</code> 设置的处理方式，而是简单的停止脚本的执行。</p>
<p>在 PHP7 中，当致命错误和可捕获的错误(<code>E_ERROR</code> 和 <code>E_RECOVERABLE_ERROR</code>)发生时会抛出异常，而不是直接停止脚本的运行。对于某些情况，比如内存溢出，致命错误则仍然像之前一样直接停止脚本执行。在 PHP7 中，<strong>一个未捕获的异常也会是一个致命错误</strong>。这意味着在 PHP5.x 中致命错误抛出的异常未捕获，在 PHP7 中也是致命错误。</p>
<div class="note danger"><p>注意：其他级别的错误如 <code>warning</code> 和 <code>notice</code>，和之前一样不会抛出异常，只有 <code>fatal</code> 和 <code>recoverable</code> 级别的错误会抛出异常。</p>
</div>

<span id="more"></span>

<p>从 <code>fatal</code> 和 <code>recoverable</code> 级别错误抛出的异常并非继承自 <code>Exception</code> 类。这种分离是为了防止现有 PHP5.x 的用于停止脚本运行的代码也捕获到错误抛出的异常。<code>fatal</code> 和 <code>recoverable</code> 级别的错误抛出的异常是一个全新分离出来的类 <code>Error</code> 类的实例。跟其他异常一样，<code>Error</code> 类异常也能被捕获和处理，同样允许在 <code>finally</code> 之类的块结构中运行。</p>
<h2 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h2><p>为了统一两个异常分支，<code>Exception</code> 和 <code>Error</code> 都实现了一个全新的接口：<code>Throwable</code></p>
<p>PHP7 中新的异常结构如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface Throwable</span><br><span class="line">    |- Exception implements Throwable</span><br><span class="line">        |- ...</span><br><span class="line">    |- Error implements Throwable</span><br><span class="line">        |- TypeError extends Error</span><br><span class="line">        |- ParseError extends Error</span><br><span class="line">        |- ArithmeticError extends Error</span><br><span class="line">            |- DivisionByZeroError extends ArithmeticError</span><br><span class="line">        |- AssertionError extends Error</span><br></pre></td></tr></table></figure>

<p>如果在 PHP7 的代码中定义了 <code>Throwable</code> 类，它将会是如下这样：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Throwable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getMessage</span>(<span class="params"></span>): <span class="title">string</span></span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCode</span>(<span class="params"></span>): <span class="title">int</span></span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFile</span>(<span class="params"></span>): <span class="title">string</span></span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getLine</span>(<span class="params"></span>): <span class="title">int</span></span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTrace</span>(<span class="params"></span>): <span class="title">array</span></span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTraceAsString</span>(<span class="params"></span>): <span class="title">string</span></span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPrevious</span>(<span class="params"></span>): <span class="title">Throwable</span></span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>): <span class="title">string</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个接口看起来很熟悉。<code>Throwable</code> 规定的方法跟 <code>Exception</code> 几乎是一样的。唯一不同的是 <code>Throwable::getPrevious()</code> 返回的是 <code>Throwable</code> 的实例而不是 <code>Exception</code> 的。<code>Exception</code> 和 <code>Error</code> 的构造函数跟之前 <code>Exception</code> 一样，可以接受任何 <code>Throwable</code> 的实例。<br><code>Throwable</code> 可以用于 <code>try/catch</code> 块中捕获 <code>Exception</code> 和 <code>Error</code> 对象(或是任何未来可能的异常类型)。记住捕获更多特定类型的异常并且对之做相应的处理是更好的实践。然而在某种情况下我们想捕获任何类型的异常(比如日志或框架中错误处理)。**在 PHP7 中，要捕获所有的应该使用 <code>Throwable</code> 而不是 <code>Exception</code>**。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Code that may throw an Exception or Error.</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="built_in">Throwable</span> <span class="variable">$t</span>) &#123;</span><br><span class="line"><span class="comment">// Handle exception</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用户定义的类不能实现 <code>Throwable</code> 接口。做出这个决定一定程度上是为了预测性和一致性——只有 <code>Exception</code> 和 <code>Error</code> 的对象可以被抛出。此外，异常需要携带对象在追溯堆栈中创建位置的信息，而用户定义的对象不会自动的有参数来存储这些信息。<br><code>Throwable</code> 可以被继承从而创建特定的包接口或者添加额外的方法。一个继承自 <code>Throwable</code> 的接口只能被 <code>Exception</code> 或 <code>Error</code> 的子类来实现。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyPackageThrowable</span> <span class="keyword">extends</span> <span class="title">Throwable</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPackageException</span> <span class="keyword">extends</span> <span class="title">Exception</span> <span class="keyword">implements</span> <span class="title">MyPackageThrowable</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyPackageException</span>();</span><br></pre></td></tr></table></figure>

<h2 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h2><p>事实上，PHP5.x 中所有的错误都是 <code>fatal</code> 或 <code>recoverable</code> 级别的错误，在 PHP7 中都能抛出一个 <code>Error</code> 实例。跟其他任何异常一样，<code>Error</code> 对象可以使用 <code>try/catch</code> 块来捕获。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$var</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="variable">$var</span>-&gt;<span class="title function_ invoke__">method</span>(); <span class="comment">// Throws an Error object in PHP 7.</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="built_in">Error</span> <span class="variable">$e</span>) &#123;</span><br><span class="line"><span class="comment">// Handle error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通常情况下，之前的致命错误都会抛出一个基本的 <code>Error</code> 类实例，但某些错误会抛出一个更具体的 <code>Error</code> 子类：<code>TypeError</code>、<code>ParseError</code> 以及 <code>AssertionError</code>。</p>
<h3 id="TypeError"><a href="#TypeError" class="headerlink" title="TypeError"></a>TypeError</h3><p>当函数参数或返回值不符合声明的类型时，<code>TypeError</code> 的实例会被抛出。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$left</span>, <span class="keyword">int</span> <span class="variable">$right</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$left</span> + <span class="variable">$right</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="variable">$value</span> = <span class="title function_ invoke__">add</span>(<span class="string">&#x27;left&#x27;</span>, <span class="string">&#x27;right&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="built_in">TypeError</span> <span class="variable">$e</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>(), <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Argument 1 passed to add() must be of the type integer, string given</span></span><br></pre></td></tr></table></figure>

<h3 id="ParseError"><a href="#ParseError" class="headerlink" title="ParseError"></a>ParseError</h3><p>当 <code>include/require</code> 文件或 <code>eval()</code> 代码存在语法错误时，<code>ParseError</code> 会被抛出。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;file-with-parse-error.php&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="built_in">ParseError</span> <span class="variable">$e</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>(), <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ArithmeticError"><a href="#ArithmeticError" class="headerlink" title="ArithmeticError"></a>ArithmeticError</h3><p><code>ArithmeticError</code> 在两种情况下会被抛出。一是位移操作负数位。二是调用 <code>intdiv()</code> 时分子是 <code>PHP_INT_MIN</code> 且分母是 -1 (这个使用除法运算符的表达式：<code>PHP_INT_MIN / -1</code>，结果是浮点型)。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="variable">$value</span> = <span class="number">1</span> &lt;&lt; -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">catch</span> (<span class="built_in">ArithmeticError</span> <span class="variable">$e</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();<span class="comment">//Bit shift by negative number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="DevisionByZeroError"><a href="#DevisionByZeroError" class="headerlink" title="DevisionByZeroError"></a>DevisionByZeroError</h3><p>当 <code>intdiv()</code> 的分母是 0 或者取模操作 (%) 中分母是 0 时，<code>DivisionByZeroError</code> 会被抛出。注意在除法运算符 (&#x2F;) 中使用 0 作除数（也即xxx&#x2F;0这样写）时只会触发一个 warning，这时候若分子非零结果是 INF，若分子是 0 结果是 NaN。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="variable">$value</span> = <span class="number">1</span> % <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="built_in">DivisionByZeroError</span> <span class="variable">$e</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();<span class="comment">//Modulo by zero</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="AssertionError"><a href="#AssertionError" class="headerlink" title="AssertionError"></a>AssertionError</h3><p>当 <code>assert()</code> 的条件不满足时，<code>AssertionError</code> 会被抛出。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;zend.assertions&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;assert.exception&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$test</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">assert</span>(<span class="variable">$test</span> === <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Fatal error: Uncaught AssertionError: assert($test === 0)</span></span><br></pre></td></tr></table></figure>

<p>只有断言启用并且是设置 ini 配置的 <code>zend.assertions = 1</code> 和 <code>assert.exception = 1</code> 时，<code>assert()</code> 才会执行并抛 <code>AssertionError</code>。</p>
<h2 id="在你的代码中使用-Error"><a href="#在你的代码中使用-Error" class="headerlink" title="在你的代码中使用 Error"></a>在你的代码中使用 Error</h2><p>用户可以通过继承 <code>Error</code> 来创建符合自己层级要求的 <code>Error</code> 类。这就形成了一个问题：什么情况下应该抛出 <code>Exception</code>，什么情况下应该抛出 <code>Error</code>。</p>
<p><code>Error</code> 应该用来表示需要程序员关注的代码问题。从 PHP 引擎抛出的 <code>Error</code> 对象属于这些分类，通常都是代码级别的错误，比如传递了错误类型的参数给一个函数或者解析一个文件发生错误。<code>Exception</code> 则应该用于在运行时能安全的处理，并且另一个动作能继续执行的情况。</p>
<p>由于 <code>Error</code> 对象不应该在运行时被处理，因此捕获 <code>Error</code> 对象也应该是不频繁的。一般来说，<code>Error</code> 对象仅被捕获用于日志记录、执行必要的清理以及展示错误信息给用户。</p>
<h2 id="编写代码支持-PHP5-x-和-PHP7-的异常"><a href="#编写代码支持-PHP5-x-和-PHP7-的异常" class="headerlink" title="编写代码支持 PHP5.x 和 PHP7 的异常"></a>编写代码支持 PHP5.x 和 PHP7 的异常</h2><p>为了在同样的代码中捕获任何 PHP5.x 和 PHP7 的异常，可以使用多个 <code>catch</code>，先捕获 <code>Throwable</code>，然后是 <code>Exception</code>。当 PHP5.x 不再需要支持时，捕获 <code>Exception</code> 的 <code>catch</code> 块可以移除。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Code that may throw an Exception or Error.</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="built_in">Throwable</span> <span class="variable">$t</span>) &#123;</span><br><span class="line"><span class="comment">// Executed only in PHP 7, will not match in PHP 5.x</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line"><span class="comment">// Executed only in PHP 5.x, will not be reached in PHP 7</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不幸的是，处理异常的函数中的类型声明不容易确定。当 <code>Exception</code> 用于函数参数类型声明时，如果函数调用时候能用 <code>Error</code> 的实例，这个类型声明就要去掉。当 PHP5.x 不需要被支持时，类型声明则可以还原为 <code>Throwable</code>。</p>
<div class="note default"><p>原文链接：<a href="https://trowski.com/2015/06/24/throwable-exceptions-and-errors-in-php7/">Throwable Exceptions and Errors in PHP 7</a></p>
</div>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>PHP7</tag>
        <tag>Exception</tag>
        <tag>Error</tag>
        <tag>Throwable</tag>
      </tags>
  </entry>
  <entry>
    <title>解决在 Chrome network preview 标签中不能渲染 dd 方法</title>
    <url>/PHP/resolve-cannot-render-dd-function-in-chrome-network-preview-tab/</url>
    <content><![CDATA[<h2 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h2><div class="note info"><p>Chrome version 63.0.3239.84</p>
</div>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote>
<p><code>dd</code> 方法指的是 <a href="../php-global-uses-the-laravel-helper-function-dd">PHP 全局使用 Laravel 辅助函数 dd</a> 中设置的方法。</p>
</blockquote>
<p>在 Chrome 63 中，preview 并没有渲染 html 标签，如下图所示：</p>
<p><img src="/images/PHP/resolve-cannot-render-dd-function-in-chrome-network-preview-tab/bd9f206bgy1fmafyt9sgsj213s09j3yv.png"></p>
<span id="more"></span>

<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>这是 Chrome 的一个 bug，目前可以设置 http response code 为 500 暂时解决这个问题</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">http_response_code</span>(<span class="number">500</span>);</span><br><span class="line"><span class="title function_ invoke__">dd</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>或者在 <code>dd</code> 方法里面直接设置</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dd</span>(<span class="params">...<span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">http_response_code</span>(<span class="number">500</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$args</span> <span class="keyword">as</span> <span class="variable">$x</span>) &#123;</span><br><span class="line">        (<span class="keyword">new</span> Dumper)-&gt;<span class="title function_ invoke__">dump</span>(<span class="variable">$x</span>);</span><br><span class="line">    &#125;        </span><br><span class="line">    <span class="keyword">die</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更新一下 Composer 自动加载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer dump-autoload</span><br></pre></td></tr></table></figure>

<p>现在再使用 <code>dd</code> 方法的时候一切正常了</p>
<p><img src="/images/PHP/resolve-cannot-render-dd-function-in-chrome-network-preview-tab/bd9f206bgy1fmag3truzjj20mp06hdfo.png"></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>dd</tag>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>迭代器和生成器</title>
    <url>/PHP/iterator-and-generator/</url>
    <content><![CDATA[<h2 id="一道面试题"><a href="#一道面试题" class="headerlink" title="一道面试题"></a>一道面试题</h2><div class="note primary"><p>如果让你用 PHP 生成从 1 到100 万个数值，请问怎么做才能最省内存？</p>
</div>

<p>没错，这是一道面试题，如果让你写出答案，你会有什么样的思路呢？请先独自思考几分钟。</p>
<p>可能你想到的会是这种方式：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 我自己本地测试大概用了 34MB 内存</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeLargeArray</span>(<span class="params"><span class="variable">$length</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$dataset</span> = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$dataset</span>[] = <span class="variable">$i</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$dataset</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$customRange</span> = <span class="title function_ invoke__">makeLargeArray</span>(<span class="number">1000000</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$customRange</span> <span class="keyword">as</span> <span class="variable">$i</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span>, PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录使用的内存</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatBytes</span>(<span class="params"><span class="variable">$bytes</span>, <span class="variable">$precision</span> = <span class="number">2</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$units</span> = <span class="keyword">array</span>(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;kb&quot;</span>, <span class="string">&quot;mb&quot;</span>, <span class="string">&quot;gb&quot;</span>, <span class="string">&quot;tb&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$bytes</span> = <span class="title function_ invoke__">max</span>(<span class="variable">$bytes</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="variable">$pow</span> = <span class="title function_ invoke__">floor</span>((<span class="variable">$bytes</span> ? <span class="title function_ invoke__">log</span>(<span class="variable">$bytes</span>) : <span class="number">0</span>) / <span class="title function_ invoke__">log</span>(<span class="number">1024</span>));</span><br><span class="line">    <span class="variable">$pow</span> = <span class="title function_ invoke__">min</span>(<span class="variable">$pow</span>, <span class="title function_ invoke__">count</span>(<span class="variable">$units</span>) - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$bytes</span> /= (<span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="variable">$pow</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">round</span>(<span class="variable">$bytes</span>, <span class="variable">$precision</span>) . <span class="string">&quot; &quot;</span> . <span class="variable">$units</span>[<span class="variable">$pow</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="title function_ invoke__">formatBytes</span>(<span class="title function_ invoke__">memory_get_peak_usage</span>());</span><br></pre></td></tr></table></figure>

<p>你如果给出这种答案的话，肯定不会让面试官满意的。因为这道题的重点是节省内存，如果是如上的程序，虽然能够实现题目的前半部分要求，但实际运行起来却是一个非常吃内存的老虎。因为从 PHP 底层分析， <code>makeLargeArray()</code> 会预先创建一个由一百万个整数组成的数组分配内存！</p>
<p>那么到底要怎么做才能既节省内存，又能实现这道题的目标呢？</p>
<span id="more"></span>

<p>正确答案是，使用 <strong>PHP生成器</strong> ，代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 我本地测试大概用了 718KB 内存</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeLargeArray</span>(<span class="params"><span class="variable">$length</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="variable">$i</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="title function_ invoke__">makeLargeArray</span>(<span class="number">1000000</span>) <span class="keyword">as</span> <span class="variable">$i</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span>, PHP_EOL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很少用 PHP 生成器的同学是不是看不太懂？没关系，本文才刚刚开始。</p>
<h2 id="PHP-迭代器"><a href="#PHP-迭代器" class="headerlink" title="PHP 迭代器"></a>PHP 迭代器</h2><p>在讲 PHP 生成器之前，我觉得有必要给大家讲一讲迭代器的概念。如果你对 PHP 迭代器的概念很了解，可以直接跳过这个章节，直接前往文中下半部分。</p>
<p>迭代是指反复执行一个过程，每执行一次叫做一次迭代。这么说你可能不是很理解，事实上，我们每天都在和迭代打交道，就比如 PHP 的 <code>foreach()</code> 函数，像这样：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$home</span> = [</span><br><span class="line">    <span class="string">&#x27;bed&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;television&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;computer&#x27;</span></span><br><span class="line">];</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$home</span> <span class="keyword">as</span> <span class="variable">$furniture</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;There is a &#x27;</span>.<span class="variable">$furniture</span>.<span class="string">&#x27;in my home!&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面一个简单的 <code>foreach()</code> 就是一个迭代器，它将 <code>home</code> 一次又一次的遍历，输出三个家具 <code>furniture</code>。实际上，发生变化的是 <code>home</code> 这个数组，你可以把它当做是一个对象，<code>foreach</code> 在每次遍历它时，都会调用这个对象里的一个方法，让数组在自己内部的指针发生一次变化（迭代）。</p>
<p>所以，我们可以称 <code>home</code> 数组为 迭代器对象，而 <code>foreach</code> 就是一个 迭代器接口（<code>Iterator</code>）。</p>
<h2 id="PHP-生成器"><a href="#PHP-生成器" class="headerlink" title="PHP 生成器"></a>PHP 生成器</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>通过上面的例子，想必大家对生成器有一个大概的理解，先来看看官方的解释（慢点儿度读，好好理解）：生成器允许你在 <code>foreach</code> 代码块中写代码来迭代一组数据而不需要在内存中创建一个数组, 那会使你的内存达到上限，或者会占据可观的处理时间。相反，你可以写一个生成器函数，就像一个普通的自定义函数一样, 和普通函数只返回一次不同的是, 生成器可以根据需要 <code>yield</code> 多次，以便生成需要迭代的值。</p>
<p>生成器（<code>Generator</code>）是 PHP5.5 引入的功能，往往没有被大家充分利用。其实这是一个非常有用的功能，我相信大多数开发者和我一样不知道有生成器这种东西，因为平时工作中不常用，其实很简单，生成器就是迭代器，仅此而已。</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>生成器提供了一种更容易的方法来实现简单的对象迭代，相比较定义类实现 <code>Iterator</code> 接口的方式，性能开销和复杂性大大降低。</p>
<h3 id="生成器的用法"><a href="#生成器的用法" class="headerlink" title="生成器的用法"></a>生成器的用法</h3><p>我觉得除了我给的第一个例子，官方给的用例是也能很好的解释生成器的益处。比如 PHP 的一个函数：range ，它可以建立一个包含指定范围单元的数组，标准的 <code>range()</code> 函数需要在内存中生成一个数组包含每一个在它范围内的值，然后返回该数组, 结果就是会产生多个很大的数组。 比如，调用 <code>range(0, 1000000)</code> 将导致内存占用超过 <strong>100 MB</strong>。</p>
<p>做为一种替代方法, 我们可以实现一个 <code>xrange()</code> 生成器, 只需要足够的内存来创建 <code>Iterator</code> 对象并在内部跟踪生成器的当前状态，这样只需要不到 <strong>1K</strong> 字节的内存。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xrange</span>(<span class="params"><span class="variable">$start</span>, <span class="variable">$limit</span>, <span class="variable">$step</span> = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$start</span> &lt; <span class="variable">$limit</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$step</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">LogicException</span>(<span class="string">&#x27;Step must be +ve&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="variable">$start</span>; <span class="variable">$i</span> &lt;= <span class="variable">$limit</span>; <span class="variable">$i</span> += <span class="variable">$step</span>) &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="variable">$i</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$step</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">LogicException</span>(<span class="string">&#x27;Step must be -ve&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="variable">$start</span>; <span class="variable">$i</span> &gt;= <span class="variable">$limit</span>; <span class="variable">$i</span> += <span class="variable">$step</span>) &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="variable">$i</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 注意下面range()和xrange()输出的结果是一样的。 */</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Single digit odd numbers from range():  &#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="title function_ invoke__">range</span>(<span class="number">1</span>, <span class="number">9</span>, <span class="number">2</span>) <span class="keyword">as</span> <span class="variable">$number</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$number</span> &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Single digit odd numbers from xrange(): &#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="title function_ invoke__">xrange</span>(<span class="number">1</span>, <span class="number">9</span>, <span class="number">2</span>) <span class="keyword">as</span> <span class="variable">$number</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$number</span> &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 以上例程会输出：</span></span><br><span class="line">Single digit odd numbers <span class="keyword">from</span> <span class="title function_ invoke__">range</span>():  <span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span></span><br><span class="line">Single digit odd numbers <span class="keyword">from</span> <span class="title function_ invoke__">xrange</span>(): <span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>我们需要注意的关键是 <code>yield</code>，这是生成器的关键。我们通过上面例子，可以看得出，<code>yield</code> 会将当前一个值传递给 <code>foreach</code>，换句话说， <code>foreach</code> 每一次迭代过程都会从 <code>yield</code> 处取一个值，直到整个遍历过程不再存在 <code>yield</code> 为止的时候，遍历结束。</p>
<p>我们也可以发现， <code>yield</code> 和 <code>return</code> 都会返回值，但区别在于一个 <code>return</code> 是返回既定结果，一次返回完毕就不再返回新的结果，而 <code>yield</code> 是 不断产出 直到无法产出为止。</p>
<p>实际上存在 <code>yield</code> 的函数返回值返回的是一个 <code>Generator</code> 对象（这个对象不能手动通过 new 实例化），该对象实现了 <code>Iterator</code> 接口。</p>
<p>你可能觉得以上例子没啥实际用途，我再举一个比较有用的例子（来自 Modern PHP 一书），比如我想导入一个大小约为 4GB 的 CSV 文件（你可以理解为 Excel），而且我们的服务器运行在一个共享的 VPS 中，只提供了 1 GB 的内存，所以不能直接把 CSV 这个生成的数组直接都放在内存里。那我们怎么用生成器+迭代器来实现呢？代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成器产出</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRows</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$handel</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$file</span>, <span class="string">&#x27;rb&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$handel</span> === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;Error Processing&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="title function_ invoke__">feof</span>(<span class="variable">$handel</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="title function_ invoke__">fgetcsv</span>(<span class="variable">$handel</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$handel</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 迭代器读取</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="title function_ invoke__">getRows</span>(<span class="string">&#x27;./data.csv&#x27;</span>) <span class="keyword">as</span> <span class="variable">$row</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$row</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>导入导出这种需求在现实场景中是不是很常见，大家可以在项目里尝试使用生成器来取代传统的数组声明，可以帮公司省掉一大笔内存购买费用~</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>生成器是功能多样性和简洁性之间的折中方案。生成器是只能向前进的迭代器，这意味着不能使用生成器在数据集中执行后退、快进或査找操作，只能让生成器计算并产生下一个值。迭代大型数据集或数列时最适合使用生成器，因为这样占用的系统内存量极小。生成器也能完成迭代器能完成的简单任务，而且使用的代码较少。</p>
<div class="note default"><p>原文链接：<a href="https://wowphp.com/square/KW7p046mxOMedpeq1ogAQ3N82n">述迭代器和生成器</a></p>
</div>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Iterator</tag>
        <tag>Generator</tag>
      </tags>
  </entry>
  <entry>
    <title>使用四舍六入保证精确的结算金额</title>
    <url>/PHP/ensure-accurate-for-digital-transformation/</url>
    <content><![CDATA[<p>我们在计算金额时，难免存在保留位数有限，计算结果需要取舍的情况。往往在电商、银行系统中，金额是以整数形式保存，单位为货币最小单位，例如分。但是在结算时额外的参数如折扣、利率、税率等存在着大量的浮点数，计算结果则需要转换为整数。</p>
<p>简单处理一般是四舍五入，但是这样存在很明显的问题，就是 “入” 的概率大于 “舍”，明显的，遇到 1、2、3、4 舍，遇到 5、6、7、8、9 入，粗看这种就可以发现问题。如果想要两边平衡，则 “四舍六入” 才是合理的，但是，5 怎么办？</p>
<h2 id="有趣的推理"><a href="#有趣的推理" class="headerlink" title="有趣的推理"></a>有趣的推理</h2><p>转自知乎用户给出的一个例子（<a href="https://www.zhihu.com/question/28943072/answer/42673180">知乎答案地址</a>）</p>
<p>某实数 r &#x3D; 0.4445。也就是说，比九分之四稍微大一点点。（构造其他小数也可以，有限小数还是无限小数、纯小数还是带小数都没关系）</p>
<p>好了，根据四舍五入算法 f，直接把这个 r 保留到整数。那么，明显，结果是 0，小数点后第一位是 4 么。</p>
<p>这时，请开放一下脑洞。有一群科学家拿到了这个数字。然后……</p>
<p>科学家 s3 把 r 保留到小数点后第 3 位，得 r3 &#x3D; 0.445。第 4 位是 5 么，按四舍五入的精神，把这个 1 进到第 3 位，使之变成 5。</p>
<span id="more"></span>

<p>科学家 s2 把 r 保留到小数点后第 2 位，得 r3 &#x3D; 0.45。第 3 位是 5 么，按四舍五入的精神，把这个 1 进到第 2 位，使之变成 5。</p>
<p>科学家 s1 把 r 保留到小数点后第 1 位，得 r1 &#x3D; 0.5。第 2 位是 5 么，按四舍五入的精神，把这个 1 进到第 1 位，使之变成 5。</p>
<p>科学家 s0 把 r 保留到小数点后第 0 位，得 r0 &#x3D; 1。第 1 位是 5 么，按四舍五入的精神，把这个 1 进到第 0 位，使之变成 1。</p>
<p>最终结果和 0.4445 直接四舍五入结果存在明显差异。</p>
<p>还有个例子也能说明：</p>
<p>2.55 + 3.45 &#x3D; 6</p>
<p>如果我们把 2.55 和 3.45 四舍五入保留一位小数，那么上述式子就成了：</p>
<p>2.6 + 3.5 &#x3D; 6.1</p>
<p>这样的问题非常常见，也导致了在大量样本中，四舍五入后计算结果的总和会明显大于直接计算总和的结果，对于金融单位计算利息而言，这样很显然是一个亏本的行为。如果不亏本的算，依旧是简单处理可能结果相反，那么客户就不开心了。</p>
<h2 id="银行家舍入（Banker’s-Round）"><a href="#银行家舍入（Banker’s-Round）" class="headerlink" title="银行家舍入（Banker’s Round）"></a>银行家舍入（Banker’s Round）</h2><p>亦叫做 “四舍六入五成双” ，四舍六入，使得两头（即进和舍）概率相等，但是，在 4 和 6 之间的 5 就需要特别对待。具体规则如下：</p>
<div class="note info"><ul>
<li>舍去位的数值小于5时，直接舍去；</li>
<li>舍去位的数值大于等于6时，进位后舍去；</li>
<li>当舍去位的数值等于5时，分两种情况：5后面还有其他数字（非0），则进位后舍去；若5后面是0（即5是最后一位），则根据5前一位数的奇偶性来判断是否需要进位，奇数进位，偶数舍去。</li>
</ul>
</div>

<p>舍去位，当小于 5，即 0 ~ 4.999999…… 则舍去，大于 6，即 6 ~ 10 则进位，则中间区间那个数字，5 ~ 5.999999…… ，只要使该区间内存在的数字平均分布，即可保证取舍概率相等。于是得到上述算法。</p>
<p>按上述规则，之前的 2.55 + 3.45 &#x3D; 6 得出的结果如下：</p>
<p>2.6 + 3.4 &#x3D; 6</p>
<p>结果正确。</p>
<h2 id="PHP-四舍六入"><a href="#PHP-四舍六入" class="headerlink" title="PHP 四舍六入"></a>PHP 四舍六入</h2><p>其实 PHP 早就支持四舍六入，使用 <code>round()</code> 函数，第三个参数传入 <code>PHP_ROUND_HALF_EVEN</code> 即可实现上述规则。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ouput 2.6</span></span><br><span class="line"><span class="title function_ invoke__">round</span>(<span class="number">2.55</span>, <span class="number">1</span>, PHP_ROUND_HALF_EVEN);</span><br><span class="line"><span class="comment">// ouput 3.4</span></span><br><span class="line"><span class="title function_ invoke__">round</span>(<span class="number">3.45</span>, <span class="number">1</span>, PHP_ROUND_HALF_EVEN);</span><br></pre></td></tr></table></figure>

<h2 id="关于浮点数运算"><a href="#关于浮点数运算" class="headerlink" title="关于浮点数运算"></a>关于浮点数运算</h2><p>请牢记，<strong>不要使用 PHP 内置的 +-*&#x2F; 操作符</strong>，请使用 <a href="http://php.net/manual/en/ref.bc.php">BC Math Functions</a>，执行下面这段代码就知道原因了：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// output 0.099999999999998</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">19.45</span>-<span class="number">19.35</span>;</span><br></pre></td></tr></table></figure>

<div class="note default"><p>原文链接：<a href="https://www.insp.top/article/how-to-ensure-accurate-for-digital-transformation">四舍五入不可取！结算金额，如何保证精确？</a></p>
</div>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PhpStorm + Xdebug 调试配置</title>
    <url>/PhpStorm/PhpStorm-Xdebug-configuration/</url>
    <content><![CDATA[<h2 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h2><div class="note info"><p>PhpStorm 2017.3.3<br>Postman 5.5.0<br>php-7.1.12-Win32-VC14-x64 TS</p>
</div>

<h2 id="安装-xdebug-模块"><a href="#安装-xdebug-模块" class="headerlink" title="安装 xdebug 模块"></a>安装 xdebug 模块</h2><p>前往 <a href="https://xdebug.org/download.php">xdebug 官方网站</a> 下载与自己的 PHP 版本匹配的 xdebug模块文件，如果不知道要选择哪个版本的 <code>xdebug</code>，可以在浏览器上查看 <code>phpinfo()</code>，复制全部 <code>phpinfo()</code> 到<a href="https://xdebug.org/wizard.php">这里</a>自动解析。最后，将 <code>xdebug</code> 模块文件放入PHP安装目录&#x2F;ext文件夹中。</p>
<h2 id="配置-php-ini"><a href="#配置-php-ini" class="headerlink" title="配置 php.ini"></a>配置 php.ini</h2><p><code>php.ini</code> 添加如下几行配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[xdebug]</span><br><span class="line">;指定Xdebug扩展文件</span><br><span class="line">zend_extension = php_xdebug.dll</span><br><span class="line">xdebug.default_enable = 1</span><br><span class="line">;远程调试</span><br><span class="line">xdebug.remote_enable = on</span><br><span class="line">;自动打开远程调试</span><br><span class="line">xdebug.remote_autostart = 1</span><br><span class="line">;代码自动跟踪</span><br><span class="line">xdebug.auto_trace = off</span><br><span class="line">;收集传递给函数的参数变量</span><br><span class="line">xdebug.collect_params=on</span><br><span class="line">;收集函数调用的返回值</span><br><span class="line">xdebug.collect_return=on</span><br><span class="line">;性能检测分析</span><br><span class="line">xdebug.profiler_enable_trigger = on</span><br><span class="line">;生成的分析文件</span><br><span class="line">xdebug.profiler_output_name = cachegrind.out.%t.%p</span><br><span class="line">;堆栈跟踪文件的存放目录</span><br><span class="line">xdebug.profiler_output_dir = &quot;D:/laragon/tmp&quot;</span><br><span class="line">extension=php_printer.dll</span><br><span class="line">;指定传递给DBGp调试器处理程序的IDE Key 在Chrome以及FireFox中插件配置的时候要用到</span><br><span class="line">xdebug.idekey=PHPSTORM</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>重启服务器，查看 <code>phpinfo()</code>，即可看到 <code>xdebug</code>模块的相关信息</p>
<p><img src="/images/PhpStorm/PhpStorm-Xdebug-configuration/bd9f206bgy1fnqo4lrkfaj20s303vt8m.jpg"></p>
<h2 id="配置-PhpStorm"><a href="#配置-PhpStorm" class="headerlink" title="配置 PhpStorm"></a>配置 PhpStorm</h2><ul>
<li>设置xdebug端口号</li>
</ul>
<p><img src="/images/PhpStorm/PhpStorm-Xdebug-configuration/bd9f206bgy1fnqo81tanhj20t60lojt7.jpg"></p>
<ul>
<li>设置 servers</li>
</ul>
<p><img src="/images/PhpStorm/PhpStorm-Xdebug-configuration/bd9f206bgy1fnqoc4r7s6j20t40lnmya.jpg"></p>
<ul>
<li>开启监听</li>
</ul>
<p><img src="/images/PhpStorm/PhpStorm-Xdebug-configuration/bd9f206bgy1fnqoj40trwj20o601nt8s.jpg"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在需要打断点的地方打断点，访问相应的 web 页面或接口即可启动断点，还可以看到执行到该断点前的所有变量。</p>
]]></content>
      <categories>
        <category>PhpStorm</category>
      </categories>
      <tags>
        <tag>PhpStorm</tag>
        <tag>Xdebug</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 全局使用 Laravel 辅助函数 dd</title>
    <url>/PHP/php-global-uses-the-laravel-helper-function-dd/</url>
    <content><![CDATA[<h2 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ composer global require symfony/var-dumper 2.7.*</span><br></pre></td></tr></table></figure>

<div class="note warning"><p>加上固定版本号是因为如果本地低版本的 Laravel 项目(比如 Laravel 5.1)，它里面依赖的版本是 <code>2.7.*</code> ，如果不指定版本会安装最新的 <code>3.3.*</code>，由于在 Laravel 项目中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (! function_exists(&#x27;dd&#x27;)) &#123;</span><br><span class="line">     function dd()&#123;</span><br><span class="line">        ...</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>的缘故，导致使用全局定义的 dd function 。会出现不兼容报错的情况。</p>
</div>

<h2 id="配置-php-ini"><a href="#配置-php-ini" class="headerlink" title="配置 php.ini"></a>配置 php.ini</h2><p>在 php.ini 中找到 <code>auto_prepend_file</code>，然后写上你相对应的路径，比如我的路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto_prepend_file = &quot;C:/Users/Administrator.N27NDU1NHONBOGF/AppData/Roaming/Composer/vendor/autoload.php&quot;</span><br></pre></td></tr></table></figure>

<h2 id="更新-composer"><a href="#更新-composer" class="headerlink" title="更新 composer"></a>更新 composer</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ composer global update</span><br></pre></td></tr></table></figure>

<p>这样一来就可以使用 <code>dump()</code> 了。不过还不够，我们还要把 <code>dd()</code> 的代码放进来。</p>
<span id="more"></span>

<h2 id="准备-dd"><a href="#准备-dd" class="headerlink" title="准备 dd()"></a>准备 dd()</h2><p>找个地方复制以下代码（我直接命名成 <code>debugHelper.php</code> ）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># install symfony/var-dump to your project</span></span><br><span class="line"><span class="comment"># composer require symfony/var-dumper</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// use namespace</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">VarDumper</span>\<span class="title">Cloner</span>\<span class="title">VarCloner</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">VarDumper</span>\<span class="title">Dumper</span>\<span class="title">CliDumper</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">VarDumper</span>\<span class="title">Dumper</span>\<span class="title">HtmlDumper</span> <span class="keyword">as</span> <span class="title">SymfonyHtmlDumper</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class HtmlDumper</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HtmlDumper</span> <span class="keyword">extends</span> <span class="title">SymfonyHtmlDumper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Colour definitions for output.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$styles</span> = [</span><br><span class="line">        <span class="string">&#x27;default&#x27;</span> =&gt; <span class="string">&#x27;background-color:#fff; color:#222; line-height:1.2em; font-weight:normal; font:12px Monaco, Consolas, monospace; word-wrap: break-word; white-space: pre-wrap; position:relative; z-index:100000&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;num&#x27;</span> =&gt; <span class="string">&#x27;color:#a71d5d&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;const&#x27;</span> =&gt; <span class="string">&#x27;color:#795da3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;str&#x27;</span> =&gt; <span class="string">&#x27;color:#df5000&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;cchr&#x27;</span> =&gt; <span class="string">&#x27;color:#222&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;note&#x27;</span> =&gt; <span class="string">&#x27;color:#a71d5d&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;ref&#x27;</span> =&gt; <span class="string">&#x27;color:#a0a0a0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;public&#x27;</span> =&gt; <span class="string">&#x27;color:#795da3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;protected&#x27;</span> =&gt; <span class="string">&#x27;color:#795da3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;private&#x27;</span> =&gt; <span class="string">&#x27;color:#795da3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;meta&#x27;</span> =&gt; <span class="string">&#x27;color:#b729d9&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;key&#x27;</span> =&gt; <span class="string">&#x27;color:#df5000&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;index&#x27;</span> =&gt; <span class="string">&#x27;color:#a71d5d&#x27;</span>,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Dumper</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dumper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Dump a value with elegance.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  mixed  $value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dump</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">class_exists</span>(<span class="title class_">CliDumper</span>::<span class="variable language_">class</span>)) &#123;</span><br><span class="line">            <span class="variable">$dumper</span> = <span class="string">&#x27;cli&#x27;</span> === PHP_SAPI ? <span class="keyword">new</span> CliDumper : <span class="keyword">new</span> HtmlDumper;</span><br><span class="line">            <span class="variable">$dumper</span>-&gt;<span class="title function_ invoke__">dump</span>((<span class="keyword">new</span> VarCloner)-&gt;<span class="title function_ invoke__">cloneVar</span>(<span class="variable">$value</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_ invoke__">var_dump</span>(<span class="variable">$value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (! <span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;dd&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Dump the passed variables and end the script.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  mixed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dd</span>(<span class="params">...<span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$args</span> <span class="keyword">as</span> <span class="variable">$x</span>) &#123;</span><br><span class="line">            (<span class="keyword">new</span> Dumper)-&gt;<span class="title function_ invoke__">dump</span>(<span class="variable">$x</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">die</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (! <span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;dda&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Dump the passed array variables and end the script.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  mixed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dda</span>(<span class="params">...<span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$args</span> <span class="keyword">as</span> <span class="variable">$x</span>) &#123;</span><br><span class="line">            (<span class="keyword">new</span> Dumper)-&gt;<span class="title function_ invoke__">dump</span>(<span class="variable">$x</span>-&gt;<span class="title function_ invoke__">toArray</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">die</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>记下这个文件的路径，比如我的是：<code>D:/composer/debugHelper.php</code></p>
<h2 id="更改全局-composer-json"><a href="#更改全局-composer-json" class="headerlink" title="更改全局 composer.json"></a>更改全局 composer.json</h2><p>然后我们找到全局的 <code>composer.json</code> 所在的位置，通常在用户根目录下，在 autoload 中增加这个文件的路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ....</span><br><span class="line">    &quot;require&quot;: &#123;</span><br><span class="line">        .....</span><br><span class="line">        &quot;symfony/var-dumper&quot;: &quot;2.7.*&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;autoload&quot;: &#123;</span><br><span class="line">        &quot;files&quot;: [</span><br><span class="line">                &quot;D:/composer/debugHelper.php&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后更新一下，就可以 dd 用起来了！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ composer global dump-autoload</span><br></pre></td></tr></table></figure>

<div class="note default"><p>原文链接：<a href="https://laravel-china.org/articles/5075/php-global-uses-the-laravel-helper-function-dd">PHP 全局使用 Laravel 辅助函数 dd</a> </p>
</div>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Laravel</tag>
        <tag>dd</tag>
      </tags>
  </entry>
  <entry>
    <title>六个鲜为人知的 Composer 命令</title>
    <url>/Composer/six-lesser-known-composer-commands-you-should-know/</url>
    <content><![CDATA[<p>Composer 是 PHP 的一个依赖管理工具。 如果你是一名 PHP 开发人员，那么你很可能每天都在使用它并且频繁的运行命令 <code>require</code>， <code>install</code> 和 <code>update</code>。也许你并没有意识到， 我们可以使用一些其他的 Composer 命令，来更加轻松的使用它。</p>
<p>它有许多的命令可以使用，但今天我将分享我使用的并且每天都有帮助的 6 个命令。</p>
<h2 id="show"><a href="#show" class="headerlink" title="show"></a>show</h2><p>先说下 <code>show</code> 命令。它允许您查看项目的所有已安装包(包括依赖项)，以及查看相关包的说明。所有这些信息都可以在Composer锁文件(composer.lock)中找到, 但是使用 <code>show</code> 命令相对来说是一种更简单、更方便的一种查看包信息的方法。</p>
<p>要列出所有已安装的包及其版本号和说明，只需使用 <code>show</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer show</span><br></pre></td></tr></table></figure>

<p>有时候把这些信息用依赖关系树的形式查看会更容易理解， 可以通过 <code>--tree</code> or <code>-t</code> 参数:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer show -t</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>如果要筛选返回的包，可以使用通配符传递一个额外的字符串参数 <code>*</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer show &#x27;symfony/*&#x27;</span><br></pre></td></tr></table></figure>

<p>这将返回所有已安装的symfony包。注意这里的引号, 如果您使用的是 bash shell，不需要加这个引号, 但是如果您使用的是 zsh 你不用引号的话就会报 ‘no matches found’ 错误。</p>
<p>如果要查看有关特定包的信息，需要完整包名:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer show laravel/framework</span><br></pre></td></tr></table></figure>

<p>这将向您显示安装的版本、它的许可证和依赖项以及它在本地安装的位置等信息。</p>
<h2 id="why"><a href="#why" class="headerlink" title="why"></a>why</h2><p>如果您想知道安装特定软件包的原因，可以使用 why 命令来确定哪些依赖项需要它：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer why vlucas/phpdotenv</span><br></pre></td></tr></table></figure>

<p><code>why</code>  为什么是depends命令的别名，但就我个人而言，我发现使用 ‘why’ 更容易记住。您可以使用<code>--tree</code>或<code>-t</code>标志在依赖树中查看此信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer why vlucas/phpdotenv -t</span><br></pre></td></tr></table></figure>


<h2 id="why-not"><a href="#why-not" class="headerlink" title="why-not"></a>why-not</h2><p>有时，一个或多个已安装的软件包将阻止安装或更新软件包。 为了检查是哪些安装包，我们可以使用 <code>why-not</code> 命令（别名为 <code>prohibits</code>）。 例如，Laravel 最近发布了一个新的5.8版本的框架; 我们可以使用 <code>why-not</code> 命令检查任何阻止我们更新 <code>laravel/framework</code> 包的包：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer why-not laravel/framework 5.8</span><br></pre></td></tr></table></figure>

<p>同样，我们可以使用 <code>--tree</code> 或 <code>-t</code> 标记在依赖关系树中查看此信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer why-not laravel/framework 5.8 -t</span><br></pre></td></tr></table></figure>



<h2 id="outdated"><a href="#outdated" class="headerlink" title="outdated"></a>outdated</h2><p>在使用 <code>composer update</code> 命令前，你也许想检测一下已安装的包，哪些有可以升级的。这可以使用 <code>outdated</code> 命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer outdated</span><br></pre></td></tr></table></figure>

<p>此命令是 <code>composer show -lo</code> 的别名之一。</p>
<p>根据语义化的版本，返回着色的代码，来标明每个包的状态：</p>
<ul>
<li><strong>Green:</strong> 当前安装包已是最新版本</li>
<li><strong>Yellow:</strong> 有可升级的更新, 但可能有不兼容的修改。</li>
<li><strong>Red:</strong> 有可用的小版本升级 (一般是bug修复)</li>
</ul>
<p>如果希望高亮显示小的升级版本, 可以使用 <code>outdated</code> 命令，以<code>--minor-only</code> 或者 <code>-m</code> 参数 ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer outdated -m</span><br></pre></td></tr></table></figure>


<h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><p>我发现自己经常会使用 <code>install</code> 、<code>update</code> 命令的参数 <code>--prefer-source</code> 来处理源代码安装的依赖项。 然后，如果我修改了任何这些依赖项，我需要一种快速检查哪些包已被修改的方法。 <code>status</code> 命令提供了一种方便的方法。</p>
<p>您可以使用 <code>--verbose</code> 或 <code>-v</code> 参数来查看本地修改的软件包和文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer status -v</span><br></pre></td></tr></table></figure>

<p>我发现使用 verbose 标记是使用此命令最有用的方法。</p>
<h2 id="许可"><a href="#许可" class="headerlink" title="许可"></a>许可</h2><p>最后，知道您安装的每个软件包的许可证是非常有用的。 Composer 有一个方便的 <code>licenses</code> 命令，用于查询许可的完整列表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer licenses</span><br></pre></td></tr></table></figure>

<div class="note default"><p>原文链接：<a href="https://learnku.com/laravel/t/28678">推荐六个鲜为人知的 Composer 命令</a></p>
</div>]]></content>
      <categories>
        <category>Composer</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Composer</tag>
      </tags>
  </entry>
  <entry>
    <title>PHPStorm 实用的快捷键</title>
    <url>/PhpStorm/phpstorm-useful-shortcuts/</url>
    <content><![CDATA[<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h3 id="控制光标位置"><a href="#控制光标位置" class="headerlink" title="控制光标位置"></a>控制光标位置</h3><ul>
<li><code>ctrl + m</code> 将光标定位到文件中心</li>
<li><code>alt + j</code> 多列模式进行选中,只会选择相同的单词</li>
<li><code>alt + shift + j</code> 取消多列模式</li>
<li><code>home, end</code> 移动到行首或行末</li>
<li><code>ctrl + shift + m</code> 匹配括号的位置，会将光标移动到对应正括号和反括号位置</li>
<li><code>ctrl + [ 或 ]</code> 具有相似功能</li>
<li><code>ctrl + shift + [ 或 ]</code> 可已选中对应的括号区域</li>
<li><code>ctrl + pageup</code> 将光标移动到页面顶头</li>
<li><code>ctrl + pagedown</code> 将光标移动到页面底部</li>
<li><code>ctrl + g</code> 输入:行号:列号快速定位文件位置</li>
</ul>
<h3 id="编辑文档"><a href="#编辑文档" class="headerlink" title="编辑文档"></a>编辑文档</h3><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><ul>
<li><code>ctrl + y</code> 删除一行</li>
<li><code>ctrl + delete</code> 删除光标后内容</li>
<li><code>ctrl + backspace</code> 删除光标前一个字的内容</li>
<li><code>ctrl + enter</code> 在行首会在该行前创建新行，行末会在改行后创建新行</li>
</ul>
<h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><ul>
<li><code>ctrl + d</code> 复制选中块，若没有则只是复制当前行</li>
<li><code>ctrl + shift + v</code> 粘贴文档时可以选择行数，多选时按住 shift，也可以显示剪切板历史</li>
</ul>
<span id="more"></span>

<h4 id="选择移动"><a href="#选择移动" class="headerlink" title="选择移动"></a>选择移动</h4><ul>
<li><code>ctrl + w</code> 进行选择扩展，加 shift 反向操作扩展</li>
<li><code>shift + ↑ 或 ↓</code> 向上或向下移动一行</li>
<li><code>shift + home 或 end</code> 选择光标到行首或行末的内容</li>
<li><code>pageup, pagedown</code> 向上或向下移动一页</li>
<li><code>shift pageup, pagedown</code> 向上或向下选择一页</li>
<li><code>ctrl + shift + [ 或 ]</code> 选择匹配括号的内容，注意使用时光标要放在括号前后才起作用</li>
<li><code>shift + alt + ↑ 或 ↓</code> 将光标对应行向上或向下移动，也可以选中多行进行移动</li>
<li><code>shift + ctrl + ↑ 或 ↓</code> 对于函数等内容，它是向上或向下移动整个函数</li>
<li><code>ctrl + shift + l</code> 格式化代码，再加上 alt 可以格式化全局</li>
<li><code>alt + shift + insert</code> 实现按照矩形格式来选择文本的功能</li>
</ul>
<h4 id="文件控制"><a href="#文件控制" class="headerlink" title="文件控制"></a>文件控制</h4><ul>
<li><code>ctrl + b</code> 跳转到函数 ，或者按住 ctrl 点击函数也可实现该效果。</li>
<li><code>ctrl + f12</code> 显示函数之间的结构关系</li>
<li><code>alt + ↑ 或 ↓</code> 函数跳转的上下切换</li>
<li><code>ctrl + alt + ← 或 →</code> 实现前进和返回，但是在 windows 中这两个快捷键被用来转换屏幕,所以建议自定义快捷键</li>
<li><code>ctrl + alt + backspace</code> 也可实现返回的功能</li>
<li><code>F2</code> 当出现规则检查错误时进行导航，加 shift 为反向导航，利用 ctrl+f1 查看错误原因，alt+enter 查看解决办法</li>
<li><code>F6 和 F5</code> 移动和复制文件，在弹出框中写入路径即可</li>
<li><code>ctrl + alt + shift + t</code> 在项目文件树中使用，会出现对文件移动、复制等操作</li>
<li><code>shift + f6</code> 项目窗口中使用可以重命名文件，在编辑模式下没有作用</li>
<li><code>alt + insert</code> 新建文件</li>
<li><code>ctrl + shift + f</code> 在工程中查找内容</li>
<li><code>ctrl + shift + U</code> 或者 edit | toggle case 修改字母大小写</li>
</ul>
<h4 id="设置与查找"><a href="#设置与查找" class="headerlink" title="设置与查找"></a>设置与查找</h4><ul>
<li><code>ctrl + n</code> 全局查找类</li>
<li><code>ctrl + f</code> 文件中查找,支持正则</li>
<li><code>ctrl + shift + f</code> 支持在整个项目中查找,甚至是整个磁盘中</li>
<li><code>ctrl + r</code> 文件替换,支持正则</li>
<li><code>ctrl + shift + r</code> 支持在项目中进行批量替换</li>
<li><code>shift + f6</code> 可以利用该功能实现项目中变量或文件的重命名</li>
<li><code>ctrl + shift + n</code> 全局查找文件，你可以在查找时追加:行号:列号快速定位文件位置</li>
<li><code>ctrl + shift + n</code> 使用该方法也可以查找目录，只需要在搜索关键字后加上&#x2F;的路径索引符即可</li>
<li><code>ctrl + shift + a</code> 查找 PhpStorm 命令的名称，及快捷键，可以迅速执行</li>
<li><code>ctrl + q</code> 快速查找文档帮助在阅读函数时非常有用</li>
<li><code>ctrl + alt + t</code> 利用此实现环绕</li>
</ul>
<h4 id="设置标签"><a href="#设置标签" class="headerlink" title="设置标签"></a>设置标签</h4><p><code>shift + f11, f11</code> 设置和清除标签,利用标签来进行文件的修改</p>
<h4 id="添加注释"><a href="#添加注释" class="headerlink" title="添加注释"></a>添加注释</h4><ul>
<li><code>ctrl + /</code> 添加单行注释</li>
<li><code>ctrl + shift +\</code> 添加多行注释</li>
</ul>
<div class="note success"><p>注释模式会随着使用语言自动变化</p>
</div>

<h4 id="高级编辑功能"><a href="#高级编辑功能" class="headerlink" title="高级编辑功能"></a>高级编辑功能</h4><ul>
<li><code>alt + enter</code> 在编辑 php 时，若字符串为 HTML 片段，可以利用该功能实现片段代码编写</li>
<li><code>alt + enter</code> 该命令在不同环境有多种操作非常重要</li>
<li><code>ctrl + alt + m</code> 在编码时，可以将选择的块新建成函数</li>
<li><code>shift + F6</code> 在修改函数或文件名的同时，引用该函数或文件的地方也会同时修改</li>
<li><code>ctrl + alt + n</code> 当光标在函数变量附近时，使用该快捷键会将变量内容变成内联模式</li>
</ul>
<h3 id="工作窗口切换"><a href="#工作窗口切换" class="headerlink" title="工作窗口切换"></a>工作窗口切换</h3><h4 id="项目树和文件之间的切换"><a href="#项目树和文件之间的切换" class="headerlink" title="项目树和文件之间的切换"></a>项目树和文件之间的切换</h4><ul>
<li><code>alt + f1 + 1</code> 在全局查找到文件以后，利用该快捷键迅速定位在项目树中的的位置</li>
<li><code>f4</code> 实现在查找到的文件和项目树之间进行切换</li>
<li><code>alt + 左右方向键</code> 进行文件切换</li>
</ul>
<h4 id="工作窗口切换-1"><a href="#工作窗口切换-1" class="headerlink" title="工作窗口切换"></a>工作窗口切换</h4><ul>
<li><code>ctrl + tab + 左右方向键</code> 切换所有工作选项</li>
<li><code>alt + number</code> 例如 alt + 1 打开关闭工程</li>
<li><code>alt + 1</code> 打开关闭工程文件夹，可以直接在项目树中输入字符进行查找，也可利用上下左右键进行展开</li>
<li><code>alt + 6</code> 查看 todo 信息</li>
<li><code>alt + 7</code> 打开函数结构显示</li>
<li><code>ctrl + tab</code> 切换显示工具栏</li>
<li><code>alt + f12</code> 快速打开控制台</li>
<li><code>F12</code> 打开最近关闭的窗口</li>
<li><code>shift + esc</code> 退出，esc 也有退出功能。</li>
<li><code>ctrl + f4</code> 在非编辑窗口下会退出，在编辑窗口下会关闭当前窗口</li>
<li><code>f4 和 shift + f4</code> 打开工程文件夹中所在位置的文件，在新窗口中打开</li>
<li><code>ctrl + shift + e</code> 打开最近编辑的文件列表，ctrl + e 相似</li>
<li><code>alt + home</code> 迅速回到顶层导航栏位置，利用上下左右箭头切换文件，这是可以利用上下左右键进行切换和展开</li>
<li><code>f2</code> 导航到下一个错误</li>
<li><code>shift + f2</code> 上一个错误</li>
<li><code>alt + f12</code> 打开终端</li>
<li><code>ctrl + shift + t</code> 在打开终端下创建新终端</li>
<li><code>ctrl + shift + w</code> 在打开终端下关闭终端</li>
</ul>
<div class="note success"><p>拖动工作路径和文件到终端下会创建一个指向该路径的新终端</p>
</div>

<h4 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h4><ul>
<li><code>ctrl + j</code> 查询当前文件支持的自定义模板</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>PhpStorm 极其占用缓存，当电脑变慢时，利用 <code>file -&gt; invalidate caches/restart</code> 重启应用</p>
<h3 id="工具栏消失"><a href="#工具栏消失" class="headerlink" title="工具栏消失"></a>工具栏消失</h3><p>进入 view 菜单选择 <code>tool bar</code> 和 <code>tool button</code> 即可</p>
<h3 id="清除无用的-css-样式"><a href="#清除无用的-css-样式" class="headerlink" title="清除无用的 css 样式"></a>清除无用的 css 样式</h3><ol>
<li><code>code -&gt; run inspection by name</code> 或者利用快捷键 <code>alt + ctrl + shift + i</code></li>
<li>输入 <code>unused css</code></li>
<li>选择删除无效的 css 样式</li>
</ol>
<h3 id="文件恢复"><a href="#文件恢复" class="headerlink" title="文件恢复"></a>文件恢复</h3><ol>
<li>右键点击工程文件夹</li>
<li>选择 <code>local history</code></li>
<li>选择 <code>show history</code></li>
<li>选中想要还原的状态，点击返回箭头即可</li>
</ol>
<h3 id="文本对齐"><a href="#文本对齐" class="headerlink" title="文本对齐"></a>文本对齐</h3><ol>
<li>键值对对齐</li>
</ol>
<p><img src="/images/PhpStorm/phpstorm-useful-shortcuts/bd9f206bgy1fivscil9ydj20sg0ljmz8.png"></p>
<ol start="2">
<li>变量申明对齐</li>
</ol>
<p><img src="/images/PhpStorm/phpstorm-useful-shortcuts/bd9f206bgy1fivsdsl1tqj20sg0lhmzp.png"></p>
<div class="note default"><p>原文链接：<a href="https://segmentfault.com/a/1190000010630844">phpstorm 使用指南</a></p>
</div>]]></content>
      <categories>
        <category>PhpStorm</category>
      </categories>
      <tags>
        <tag>PhpStorm</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx基本配置与参数说明</title>
    <url>/Nginx/example-nginx-configuration/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#运行用户</span><br><span class="line">user nobody;</span><br><span class="line">#启动进程,通常设置成和cpu的数量相等</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#全局错误日志及PID文件</span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">#工作模式及连接数上限</span><br><span class="line">events &#123;</span><br><span class="line">    #epoll是多路复用IO(I/O Multiplexing)中的一种方式,</span><br><span class="line">    #仅用于linux2.6以上内核,可以大大提高nginx的性能</span><br><span class="line">    use   epoll; </span><br><span class="line"></span><br><span class="line">    #单个后台worker process进程的最大并发链接数    </span><br><span class="line">    worker_connections  1024;</span><br><span class="line"></span><br><span class="line">    # 并发总数是 worker_processes 和 worker_connections 的乘积</span><br><span class="line">    # 即 max_clients = worker_processes * worker_connections</span><br><span class="line">    # 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4  为什么</span><br><span class="line">    # 为什么上面反向代理要除以4，应该说是一个经验值</span><br><span class="line">    # 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 = 32000</span><br><span class="line">    # worker_connections 值的设置跟物理内存大小有关</span><br><span class="line">    # 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数</span><br><span class="line">    # 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右</span><br><span class="line">    # 我们来看看360M内存的VPS可以打开的文件句柄数是多少：</span><br><span class="line">    # $ cat /proc/sys/fs/file-max</span><br><span class="line">    # 输出 34336</span><br><span class="line">    # 32000 &lt; 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内</span><br><span class="line">    # 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置</span><br><span class="line">    # 使得并发总数小于操作系统可以打开的最大文件数目</span><br><span class="line">    # 其实质也就是根据主机的物理CPU和内存进行配置</span><br><span class="line">    # 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。</span><br><span class="line">    # ulimit -SHn 65535</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    #设定mime类型,类型由mime.type文件定义</span><br><span class="line">    include    mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    #设定日志格式</span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，</span><br><span class="line">    #对于普通应用，必须设为 on,</span><br><span class="line">    #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，</span><br><span class="line">    #以平衡磁盘与网络I/O处理速度，降低系统的uptime.</span><br><span class="line">    sendfile     on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #连接超时时间</span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    tcp_nodelay     on;</span><br><span class="line"></span><br><span class="line">    #开启gzip压缩</span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_disable &quot;MSIE [1-6].&quot;;</span><br><span class="line"></span><br><span class="line">    #设定请求缓冲</span><br><span class="line">    client_header_buffer_size    128k;</span><br><span class="line">    large_client_header_buffers  4 128k;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #设定虚拟主机配置</span><br><span class="line">    server &#123;</span><br><span class="line">        #侦听80端口</span><br><span class="line">        listen    80;</span><br><span class="line">        #定义使用 www.nginx.cn访问</span><br><span class="line">        server_name  www.nginx.cn;</span><br><span class="line"></span><br><span class="line">        #定义服务器的默认网站根目录位置</span><br><span class="line">        root html;</span><br><span class="line"></span><br><span class="line">        #设定本虚拟主机的访问日志</span><br><span class="line">        access_log  logs/nginx.access.log  main;</span><br><span class="line"></span><br><span class="line">        #默认请求</span><br><span class="line">        location / &#123;</span><br><span class="line">            </span><br><span class="line">            #定义首页索引文件的名称</span><br><span class="line">            index index.php index.html index.htm;   </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 定义错误提示页面</span><br><span class="line">        error_page   500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #静态文件，nginx自己处理</span><br><span class="line">        location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123;</span><br><span class="line">            </span><br><span class="line">            #过期30天，静态文件不怎么更新，过期可以设大一点，</span><br><span class="line">            #如果频繁更新，则可以设置得小一点。</span><br><span class="line">            expires 30d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.</span><br><span class="line">        location ~ .php$ &#123;</span><br><span class="line">            fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">            fastcgi_index index.php;</span><br><span class="line">            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">            include fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #禁止访问 .htxxx 文件</span><br><span class="line">            location ~ /.ht &#123;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<div class="note default"><p>原文链接：<a href="http://www.nginx.cn/76.html">nginx基本配置与参数说明</a></p>
</div>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>微信退款异步通知 aes-256-ecb 解密</title>
    <url>/Weixin/wxpay-refund/</url>
    <content><![CDATA[<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对微信退款回调的加密数据进行解密</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $encryptData 原始加密数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $key 商户 key</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string 解密后的 xml 数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">decryptData</span>(<span class="params"> <span class="variable">$encryptData</span>, <span class="variable">$key</span> = <span class="string">&#x27;&#x27;</span> </span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1. base64_decode</span></span><br><span class="line">    <span class="variable">$encryptData</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$encryptData</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//2. md5 original key</span></span><br><span class="line">    <span class="variable">$md5LowerKey</span> = <span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$key</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//3. decrypt AES ECB</span></span><br><span class="line">    <span class="variable">$decrypted</span> = <span class="title function_ invoke__">openssl_decrypt</span>(<span class="variable">$encryptData</span>, <span class="string">&#x27;AES-256-ECB&#x27;</span>, <span class="variable">$md5LowerKey</span>, OPENSSL_RAW_DATA);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$decrypted</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><ul>
<li><code>openssl_decrypt</code> 第四个参数一定要使用 <code>OPENSSL_RAW_DATA</code></li>
</ul>
]]></content>
      <categories>
        <category>weixin</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>wxpay</tag>
      </tags>
  </entry>
  <entry>
    <title>你生产环境的 Composer 是这样吗？</title>
    <url>/Composer/introduction-to-composer/</url>
    <content><![CDATA[<h2 id="composer-配置项"><a href="#composer-配置项" class="headerlink" title="composer 配置项"></a>composer 配置项</h2><blockquote>
<p>具体的每个配置项细节请参考  <a href="https://docs.phpcomposer.com/04-schema.html">Composer 官网</a></p>
</blockquote>
<h3 id="配置列表"><a href="#配置列表" class="headerlink" title="配置列表"></a>配置列表</h3><table>
<thead>
<tr>
<th>ID</th>
<th>配置项</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td><code>name</code></td>
<td>包的名称，它包括供应商名称和项目名称，使用 &#x2F; 分隔。</td>
</tr>
<tr>
<td>2</td>
<td><code>description</code></td>
<td>包描述</td>
</tr>
<tr>
<td>3</td>
<td><code>version</code></td>
<td>版本</td>
</tr>
<tr>
<td>4</td>
<td><code>type</code></td>
<td>安装类型</td>
</tr>
<tr>
<td>5</td>
<td><code>keywords</code></td>
<td>关键字</td>
</tr>
<tr>
<td>6</td>
<td><code>homepage</code></td>
<td>项目主页</td>
</tr>
<tr>
<td>7</td>
<td><code>time</code></td>
<td>版本发布时间</td>
</tr>
<tr>
<td>8</td>
<td><code>license</code></td>
<td>许可协议</td>
</tr>
<tr>
<td>9</td>
<td><code>authors</code></td>
<td>作者</td>
</tr>
<tr>
<td>10</td>
<td><code>support</code></td>
<td>支持,获取项目支持的向相关信息对象。</td>
</tr>
<tr>
<td>11</td>
<td><code>require</code></td>
<td>自动加载的包</td>
</tr>
<tr>
<td>12</td>
<td><code>require-dev</code></td>
<td>在DEV下自动加载的包</td>
</tr>
<tr>
<td>13</td>
<td><code>conflict</code></td>
<td>此列表中的包与当前包的这个版本冲突。它们将不允许同时被安装</td>
</tr>
<tr>
<td>14</td>
<td><code>suggest</code></td>
<td>建议安装的包，它们增强或能够与当前包良好的工作。这些只是信息，并显示在依赖包安装完成之后，给你的用户一个建议，他们可以添加更多的包。</td>
</tr>
<tr>
<td>15</td>
<td><code>autoload</code></td>
<td>自动加载,分别有四种加载机制 <code>psr-4</code> <code>psr-0</code> <code>classmap</code> <code>file</code></td>
</tr>
<tr>
<td>16</td>
<td><code>include-path</code></td>
<td>保留传统,不建议使用</td>
</tr>
<tr>
<td>17</td>
<td><code>target-dir</code></td>
<td>定义当前包安装的目标文件夹</td>
</tr>
<tr>
<td>18</td>
<td><code>minimum-stability</code></td>
<td>安装包的时候通过稳定性过滤包的默认行为, <code>dev</code> <code>alpha</code> <code>beta</code> <code>RC</code> <code>stable</code> 可选</td>
</tr>
<tr>
<td>19</td>
<td><code>prefer-stable</code></td>
<td>安装包的时候优先使用更稳定的包版本, <code>&quot;prefer-stable&quot;: true</code></td>
</tr>
<tr>
<td>20</td>
<td><code>repositories</code></td>
<td>使用自定义的包资源库。默认情况下 composer 只使用 packagist 作为包的资源库。通过指定资源库，你可以从其他地方获取资源包。</td>
</tr>
<tr>
<td>21</td>
<td><code>config</code></td>
<td>配置参数，eg：<code>process-timeout</code> <code>vendor-dir</code></td>
</tr>
<tr>
<td>22</td>
<td><code>scripts </code></td>
<td>Composer 允许你在安装过程中的各个阶段挂接脚本。</td>
</tr>
<tr>
<td>23</td>
<td><code>extra</code></td>
<td>任意的，供 <code>scripts</code> 使用的额外数据。</td>
</tr>
<tr>
<td>24</td>
<td><code>bin</code></td>
<td>该属性用于标注一组应被视为二进制脚本的文件，他们会被软链接到（config 对象中的）bin-dir 属性所标注的目录，以供其他依赖包调用。</td>
</tr>
<tr>
<td>25</td>
<td><code>archive</code></td>
<td>这些选项在创建包存档时使用。</td>
</tr>
</tbody></table>
<span id="more"></span>

<h3 id="开发种配置详细说明"><a href="#开发种配置详细说明" class="headerlink" title="开发种配置详细说明"></a>开发种配置详细说明</h3><h4 id="11-require"><a href="#11-require" class="headerlink" title="11. require"></a>11. <code>require</code></h4><table>
<thead>
<tr>
<th>标识符</th>
<th>含义</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td><code>^</code></td>
<td>安装的最新版本</td>
<td><code>&quot;barryvdh/laravel-cors&quot;: &quot;^0.10.0&quot;</code> 安装laravel-cors最新版本</td>
</tr>
<tr>
<td><code>~</code></td>
<td>标识安装的最后一位区间版本</td>
<td><code>&quot;barryvdh/laravel-cors&quot;: &quot;~0.10.0&quot;,</code> 安装laravel-cors <code>0.10.0-0.10.9</code></td>
</tr>
</tbody></table>
<h4 id="12-require-dev"><a href="#12-require-dev" class="headerlink" title="12. require-dev"></a>12. <code>require-dev</code></h4><ol>
<li><code>composer install</code> 会安装<code>require-dev</code>中的包,<code>require</code>中的包</li>
<li><code>composer install --no-dev</code> 只会安装<code>require</code>中的包</li>
</ol>
<h4 id="22-scripts"><a href="#22-scripts" class="headerlink" title="22. scripts"></a>22. <code>scripts</code></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;post-root-package-install&quot;: [</span><br><span class="line">        &quot;@php -r \&quot;file_exists(&#x27;.env&#x27;) || copy(&#x27;.env.example&#x27;, &#x27;.env&#x27;);\&quot;&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;post-create-project-cmd&quot;: [</span><br><span class="line">        &quot;@php artisan key:generate&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;post-autoload-dump&quot;: [</span><br><span class="line">        &quot;Illuminate\\Foundation\\ComposerScripts::postAutoloadDump&quot;,</span><br><span class="line">        &quot;@php artisan package:discover&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>scripts</code> 是自定义执行SHELL命令，如上代码中，执行<code>post-root-package-install</code> 执行复制文件。</p>
<h4 id="15-autoload"><a href="#15-autoload" class="headerlink" title="15 autoload"></a>15 <code>autoload</code></h4><blockquote>
<p>PHP 自动加载文件,分别有四种加载机制 <code>psr-4</code> <code>psr-0</code> <code>classmap</code> <code>file</code></p>
</blockquote>
<blockquote>
<p><strong>修改完 autoload 的内容之后要记得执行<code>composer dump-autoload</code> 来重新生成加载文件</strong></p>
</blockquote>
<h5 id="prs-4"><a href="#prs-4" class="headerlink" title="prs-4"></a><code>prs-4</code></h5><ol>
<li>该目录下的 PHP 文件 采用 PSR-4 自动加载标准</li>
<li><strong>Composer会将该结构下的文件映射关系写入 <code>autoload_classmap.php</code></strong></li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;autoload&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;psr-4&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;App\\&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app/&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="prs-0"><a href="#prs-0" class="headerlink" title="prs-0"></a><code>prs-0</code></h5><ol>
<li>该目录下的 PHP 文件 采用 PSR-0 自动加载标准</li>
<li><strong>Composer会将该结构下的文件映射关系写入 <code>autoload_namespaces.php</code></strong></li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;autoload&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;psr-4&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Cx\\&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prs0/&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="classmap"><a href="#classmap" class="headerlink" title="classmap"></a><code>classmap</code></h5><ol>
<li><strong>Composer 加载 <code>lib/</code> 目录下的所有文件,放入到 <code>autoload_classmap.php</code></strong></li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;classmap&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;lib/&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="file"><a href="#file" class="headerlink" title="file"></a><code>file</code></h5><ol>
<li><strong>Composer 加载 <code>src/test.php</code> 该文件,放入到 <code>autoload_files.php</code></strong></li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;src/test.php&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>


<hr>
<h2 id="命令篇"><a href="#命令篇" class="headerlink" title="命令篇"></a>命令篇</h2><blockquote>
<p>详细命名请参考 <a href="https://docs.phpcomposer.com/03-cli.html">Composer 命令行</a></p>
</blockquote>
<h3 id="composer-install"><a href="#composer-install" class="headerlink" title="composer install"></a><code>composer install</code></h3><p>先安装<code>composer.lock</code> 文件中<code>packages</code>中的版本；即使<code>composer.json</code> 与 <code>composer.lock</code> 中版本不一致</p>
<p>安装流程图</p>
<p><img src="/images/Composer/introduction-to-composer/pTpMMsHsDK.png" alt="安装流程图"></p>
<h3 id="composer-update"><a href="#composer-update" class="headerlink" title="composer update"></a><code>composer update</code></h3><p>先安装<code>composer.json</code>的版本，并且更新<code>composer.lock</code>中 <code>packages</code> 中的版本 </p>
<p>安装流程图</p>
<p><img src="/images/Composer/introduction-to-composer/1czjx90v61.png" alt="你生产环境的 composer 是这样吗？"></p>
<h3 id="composer-dump-autoload"><a href="#composer-dump-autoload" class="headerlink" title="composer dump-autoload"></a><code>composer dump-autoload</code></h3><table>
<thead>
<tr>
<th>CMD</th>
<th>说明</th>
<th>应用场景</th>
</tr>
</thead>
<tbody><tr>
<td><code>composer dump-autoload</code></td>
<td>打印自动加载索引,就是将 <code>autoload</code> 中的各项加载到本该指定的目录。</td>
<td>开发环境 你更新了 <code>autoload</code> 中的各项,</td>
</tr>
<tr>
<td><code>composer dump-autoload -o</code></td>
<td>转换 PSR-0&#x2F;4 autoloading 到 classmap 获得更快的载入速度</td>
<td>适用于生产环境</td>
</tr>
<tr>
<td><code>composer dump-autoload -o --no-dev</code></td>
<td>禁用 autoload-dev 规则</td>
<td>适用于生产环境</td>
</tr>
<tr>
<td><code>composer dump-autoload --classmap-authoritative</code></td>
<td>只加载 ClassMap中的文件，必到磁盘文件系统进行任何检查</td>
<td>适用于生产环境</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>因此生产请使用 <code>composer dump-autoload -o --no-dev --classmap-authoritative</code></strong></p>
</blockquote>
<div class="note default"><p>原文链接：<a href="https://learnku.com/articles/26343">你生产环境的 Composer 是这样吗？</a></p>
</div>]]></content>
      <categories>
        <category>Composer</category>
      </categories>
      <tags>
        <tag>Composer</tag>
      </tags>
  </entry>
  <entry>
    <title>Composer 修改项目依赖为新的镜像地址</title>
    <url>/Composer/modify-the-project-dependency-to-the-new-mirror-address/</url>
    <content><![CDATA[<h2 id="前置说明"><a href="#前置说明" class="headerlink" title="前置说明"></a>前置说明</h2><p>本文以从 <code>https://pkg.phpcomposer.com</code> 镜像切换到 <code>https://packagist.laravel-china.org</code> 为例子来讲解。请自行修改命令行中对应的链接。</p>
<h2 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h2><p>Composer 在安装时会在 <code>composer.lock</code> 文件中写入扩展包下载地址，如：</p>
<p><img src="/images/Composer/modify-the-project-dependency-to-the-new-mirror-address/l5HYA3LOTP.png"></p>
<p>一些年代久远的项目中使用了 <code>https://pkg.phpcomposer.com/</code> 的中文加速镜像，然后最近因为其镜像访问出了故障：</p>
<span id="more"></span>

<p><img src="/images/Composer/modify-the-project-dependency-to-the-new-mirror-address/RZrFXkZutF.png"></p>
<p>运行 <code>composer install</code> 后会出现 404 并从源仓库开始下载，导致下载速度非常慢。这种情况即使是你全局配置了加速镜像也会出现：</p>
<p><img src="/images/Composer/modify-the-project-dependency-to-the-new-mirror-address/ZgbahVqjwT.png"></p>
<p><strong>问题：</strong> 如何把  <code>composer.lock</code> 文件里的这些 <code>&quot;url&quot;: &quot;https://packagist.phpcomposer.com/file...</code>  下载地址变为新的加速进行的地址呢？</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-配置新镜像"><a href="#1-配置新镜像" class="headerlink" title="1. 配置新镜像"></a>1. 配置新镜像</h3><p>首先配置你的新镜像为全局镜像：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ composer config -g repo.packagist composer https://packagist.laravel-china.org</span><br></pre></td></tr></table></figure>

<h3 id="2-刷新-composer-lock-文件"><a href="#2-刷新-composer-lock-文件" class="headerlink" title="2. 刷新 composer.lock 文件"></a>2. 刷新 composer.lock 文件</h3><p>使用以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ composer update nothing</span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ composer update --lock</span><br></pre></td></tr></table></figure>

<blockquote>
<p>–lock: 只升级 lock 文件的哈希以消除 lock 文件过期的警告。</p>
</blockquote>
<p>执行成功后：</p>
<p><img src="/images/Composer/modify-the-project-dependency-to-the-new-mirror-address/I1rGE9nT8A.png"></p>
<h3 id="3-测试一下"><a href="#3-测试一下" class="headerlink" title="3. 测试一下"></a>3. 测试一下</h3><p>清空本地缓存：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ rm -rf vendor</span><br><span class="line">$ composer clear-cache</span><br></pre></td></tr></table></figure>

<p>执行安装命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ composer install -vvv</span><br></pre></td></tr></table></figure>

<p>享受高速下载：</p>
<p><img src="/images/Composer/modify-the-project-dependency-to-the-new-mirror-address/f1bYWcxUp2.png"></p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><strong>问：</strong> 此操作是否会升级依赖版本？<br><strong>答：</strong> 不会，只会在 <code>composer.lock</code> 中将旧的依赖下载地址更新为新的，版本保持不变。</p>
<p><strong>问：</strong> 线上环境里已经下载了依赖到 <code>vendor</code> 文件夹，是否需要删了再重新下载？<br><strong>答：</strong> 不需要，如上所讲，只是更新了下载链接，代码包连哈希都是一样，无需重新下载。</p>
<div class="note default"><p>原文链接：<a href="https://learnku.com/laravel/wikis/16722">Laravel 安装和开发环境：修改项目依赖为新的镜像地址</a></p>
</div>]]></content>
      <categories>
        <category>Composer</category>
      </categories>
      <tags>
        <tag>Composer</tag>
      </tags>
  </entry>
  <entry>
    <title>Composer 自动加载的原理</title>
    <url>/Composer/source-code-to-achieve-autoload/</url>
    <content><![CDATA[<blockquote>
<p>当 PHP 引擎试图实例化未知类的操作时，就会调用 <code>__autoload()</code> ,并将类名当做字符串传递给它。但 <code>__autoload()</code> 有个缺点，就是 一个进程中只能定义一次。它是全局唯一的，如果框架占了这个名字，便会导致框架的用户用不了其它的 <code>__autoload()</code> 了，包括用户自定义的和其它类库带的。这时候就可以使用 <code>spl_autoload_register()</code> 函数。它可以把函数注册到 <code>__autoload</code> 队列中。 </p>
</blockquote>
<h2 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h2><div class="note info"><p>Composer version 1.5.1 </p>
</div>

<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>以 Laravel 项目为例，<code>composer.json</code> 文件：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;autoload&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;classmap&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;app/controllers&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;app/models&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p>当我们执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer dump-autoload</span><br></pre></td></tr></table></figure>

<p>文件 <code>/vendor/composer/autoload_clasmap.php</code> 会把类名和绝对地址做个映射，返回一个 <strong>类名 &#x3D;&gt; 文件地址</strong> 这种对应关系的数组。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$vendorDir</span> = <span class="title function_ invoke__">dirname</span>(<span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>));</span><br><span class="line"><span class="variable">$baseDir</span> = <span class="title function_ invoke__">dirname</span>(<span class="variable">$vendorDir</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;Article&#x27;</span> =&gt; <span class="variable">$baseDir</span> . <span class="string">&#x27;/app/models/Article.php&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;BaseController&#x27;</span> =&gt; <span class="variable">$baseDir</span> . <span class="string">&#x27;/app/controllers/BaseController.php&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;HomeController&#x27;</span> =&gt; <span class="variable">$baseDir</span> . <span class="string">&#x27;/app/controllers/HomeController.php&#x27;</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>首页 <code>index.php</code> 调用 composer 的 autoload 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">require &#x27;../vendor/autoload.php&#x27;;</span><br></pre></td></tr></table></figure>

<p>会调用 <code>ComposerAutoloaderInit</code> 类的静态方法 <code>getLoader()</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/composer&#x27;</span> . <span class="string">&#x27;/autoload_real.php&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="title class_">ComposerAutoloaderInita488c85ce5c077906f9c1829b6492f6b</span>::<span class="title function_ invoke__">getLoader</span>();</span><br></pre></td></tr></table></figure>
<p>verdor&#x2F;composer&#x2F; 目录下有四个配置文件：</p>
<ul>
<li>autoload_classmap.php 要加载的class映射</li>
<li>autoload_files.php 要加载的文件</li>
<li>autoload_namespaces.php psr-0标准</li>
<li>psr4.php psr-4标准</li>
</ul>
<p><code>getLoader()</code> 这个方法会先把这些配置文件放到 <code>ClassLoader</code> 的私有属性中。</p>
<p>然后通过 <code>$loader-&gt;register(true)</code> 来调用 <code>spl_autoload_register()</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"><span class="variable">$prepend</span> = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">spl_autoload_register</span>(<span class="keyword">array</span>(<span class="variable language_">$this</span>, <span class="string">&#x27;loadClass&#x27;</span>), <span class="literal">true</span>, <span class="variable">$prepend</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>spl_autoload_register()</code> 把 <code>loadClass()</code> 方法注册到了 autoload 队列中，然后当PHP引擎试图实例化未知类的操作时，就会根据类名和命名空间加载这个类文件。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">loadClass</span>(<span class="params"><span class="variable">$class</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$file</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">findFile</span>(<span class="variable">$class</span>)) &#123;</span><br><span class="line">        <span class="title function_ invoke__">includeFile</span>(<span class="variable">$file</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="classmap"><a href="#classmap" class="headerlink" title="classmap"></a>classmap</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;autoload&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;classmap&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;database&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>classmap 做的是类名和文件所在位置的映射</p>
<h2 id="PSR-0-与-PSR-4-的不同"><a href="#PSR-0-与-PSR-4-的不同" class="headerlink" title="PSR-0 与 PSR-4 的不同"></a>PSR-0 与 PSR-4 的不同</h2><p>PSR-4 中，在类名中使用下划线没有任何特殊含义。而 PSR-0 则规定类名中的下划线_会被转化成目录分隔符。</p>
<h3 id="PSR-0"><a href="#PSR-0" class="headerlink" title="PSR-0"></a>PSR-0</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;psr-0&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">       <span class="attr">&quot;Foo\\&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>PSR-0 有此配置，那么会去寻找 <code>src/Foo/Bar/Baz.php</code></p>
<p>PSR-0 当试图自动加载 <code>Foo\A_B</code> 这个class时，会去寻找 <code>src/Foo/A/B.php</code> 这个文件。</p>
<h3 id="PSR-4"><a href="#PSR-4" class="headerlink" title="PSR-4"></a>PSR-4</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;psr-4&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">       <span class="attr">&quot;Foo\\&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>按照 PSR-4 的规则，当试图自动加载 <code>Foo\Bar\Baz</code> 这个 class 时，会去寻找 <code>src/Bar/Baz.php</code> 这个文件，如果它存在则进行加载。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>composer 的 PSR-4 带来更简洁的文件结构</li>
<li>命名空间前缀对应相应的文件夹</li>
<li>类名和文件名相同，文件后缀为 PHP</li>
</ol>
]]></content>
      <categories>
        <category>Composer</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Composer</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang的协程调度器原理及GMP设计思想</title>
    <url>/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/</url>
    <content><![CDATA[<p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/GPM%E5%B0%81%E9%9D%A2.png"></p>
<p>视频链接地址：<a href="https://www.bilibili.com/video/BV19r4y1w7Nx">https://www.bilibili.com/video/BV19r4y1w7Nx</a></p>
<h4 id="一、Golang“调度器”的由来？"><a href="#一、Golang“调度器”的由来？" class="headerlink" title="一、Golang“调度器”的由来？"></a>一、Golang“调度器”的由来？</h4><h5 id="1-单进程时代不需要调度器"><a href="#1-单进程时代不需要调度器" class="headerlink" title="(1) 单进程时代不需要调度器"></a>(1) 单进程时代不需要调度器</h5><p>我们知道，一切的软件都是跑在操作系统上，真正用来干活(计算)的是CPU。早期的操作系统每个程序就是一个进程，直到一个程序运行完，才能进行下一个进程，就是“单进程时代”</p>
<p>一切的程序只能串行发生。<br><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/5-%E5%8D%95%E8%BF%9B%E7%A8%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.png"></p>
<p>早期的单进程操作系统，面临2个问题：</p>
<p>1.单一的执行流程，计算机只能一个任务一个任务处理。</p>
<p>2.进程阻塞所带来的CPU时间浪费。</p>
<p>那么能不能有多个进程来宏观一起来执行多个任务呢？</p>
<p>后来操作系统就具有了<strong>最早的并发能力：多进程并发</strong>，当一个进程阻塞的时候，切换到另外等待执行的进程，这样就能尽量把CPU利用起来，CPU就不浪费了。</p>
<span id="more"></span>

<h5 id="2-多进程-x2F-线程时代有了调度器需求"><a href="#2-多进程-x2F-线程时代有了调度器需求" class="headerlink" title="(2)多进程&#x2F;线程时代有了调度器需求"></a>(2)多进程&#x2F;线程时代有了调度器需求</h5><p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/6-%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.png"></p>
<p>在多进程&#x2F;多线程的操作系统中，就解决了阻塞的问题，因为一个进程阻塞cpu可以立刻切换到其他进程中去执行，而且调度cpu的算法可以保证在运行的进程都可以被分配到cpu的运行时间片。这样从宏观来看，似乎多个进程是在同时被运行。</p>
<p>但新的问题就又出现了，进程拥有太多的资源，进程的创建、切换、销毁，都会占用很长的时间，CPU虽然利用起来了，但如果进程过多，CPU有很大的一部分都被用来进行进程调度了。</p>
<p><strong>怎么才能提高CPU的利用率呢？</strong> </p>
<p>但是对于Linux操作系统来讲，cpu对进程的态度和线程的态度是一样的。</p>
<p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/7-cpu%E5%88%87%E6%8D%A2%E6%B5%AA%E8%B4%B9%E6%88%90%E6%9C%AC.png"></p>
<p>很明显，CPU调度切换的是进程和线程。尽管线程看起来很美好，但实际上多线程开发设计会变得更加复杂，要考虑很多同步竞争等问题，如锁、竞争冲突等。</p>
<h5 id="3-协程来提高CPU利用率"><a href="#3-协程来提高CPU利用率" class="headerlink" title="(3)协程来提高CPU利用率"></a>(3)协程来提高CPU利用率</h5><p>多进程、多线程已经提高了系统的并发能力，但是在当今互联网高并发场景下，为每个任务都创建一个线程是不现实的，因为会消耗大量的内存(进程虚拟内存会占用4GB[32位操作系统], 而线程也要大约4MB)。</p>
<p>大量的进程&#x2F;线程出现了新的问题</p>
<ul>
<li>高内存占用</li>
<li>调度的高消耗CPU</li>
</ul>
<p>好了，然后工程师们就发现，其实一个线程分为“内核态“线程和”用户态“线程。</p>
<p>一个“用户态线程”必须要绑定一个“内核态线程”，但是CPU并不知道有“用户态线程”的存在，它只知道它运行的是一个“内核态线程”(Linux的PCB进程控制块)。</p>
<p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/8-%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%86%85%E6%A0%B8%E5%92%8C%E7%94%A8%E6%88%B7%E6%80%81.png"></p>
<p>这样，我们再去细化去分类一下，内核线程依然叫“线程(thread)”，用户线程叫“协程(co-routine)”.</p>
<p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/9-%E5%8D%8F%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B.png"></p>
<p>​    看到这里，我们就要开脑洞了，既然一个协程(co-routine)可以绑定一个线程(thread)，那么能不能多个协程(co-routine)绑定一个或者多个线程(thread)上呢。</p>
<p>​        之后，我们就看到了有3中协程和线程的映射关系：</p>
<blockquote>
<h4 id="N-1关系"><a href="#N-1关系" class="headerlink" title="N:1关系"></a>N:1关系</h4></blockquote>
<p>N个协程绑定1个线程，优点就是<strong>协程在用户态线程即完成切换，不会陷入到内核态，这种切换非常的轻量快速</strong>。但也有很大的缺点，1个进程的所有协程都绑定在1个线程上</p>
<p>缺点：</p>
<ul>
<li>某个程序用不了硬件的多核加速能力</li>
<li>一旦某协程阻塞，造成线程阻塞，本进程的其他协程都无法执行了，根本就没有并发的能力了。</li>
</ul>
<p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/10-N-1%E5%85%B3%E7%B3%BB.png"></p>
<blockquote>
<h4 id="1-1-关系"><a href="#1-1-关系" class="headerlink" title="1:1 关系"></a>1:1 关系</h4></blockquote>
<p>1个协程绑定1个线程，这种最容易实现。协程的调度都由CPU完成了，不存在N:1缺点，</p>
<p>缺点：</p>
<ul>
<li>协程的创建、删除和切换的代价都由CPU完成，有点略显昂贵了。</li>
</ul>
<p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/11-1-1.png"></p>
<blockquote>
<h4 id="M-N关系"><a href="#M-N关系" class="headerlink" title="M:N关系"></a>M:N关系</h4></blockquote>
<p>M个协程绑定1个线程，是N:1和1:1类型的结合，克服了以上2种模型的缺点，但实现起来最为复杂。</p>
<p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/12-m-n.png"></p>
<p>​    协程跟线程是有区别的，线程由CPU调度是抢占式的，<strong>协程由用户态调度是协作式的</strong>，一个协程让出CPU后，才执行下一个协程。</p>
<h5 id="4-Go语言的协程goroutine"><a href="#4-Go语言的协程goroutine" class="headerlink" title="(4)Go语言的协程goroutine"></a>(4)Go语言的协程goroutine</h5><p><strong>Go为了提供更容易使用的并发方法，使用了goroutine和channel</strong>。goroutine来自协程的概念，让一组可复用的函数运行在一组线程之上，即使有协程阻塞，该线程的其他协程也可以被<code>runtime</code>调度，转移到其他可运行的线程上。最关键的是，程序员看不到这些底层的细节，这就降低了编程的难度，提供了更容易的并发。</p>
<p>Go中，协程被称为goroutine，它非常轻量，一个goroutine只占几KB，并且这几KB就足够goroutine运行完，这就能在有限的内存空间内支持大量goroutine，支持了更多的并发。虽然一个goroutine的栈只占几KB，但实际是可伸缩的，如果需要更多内容，<code>runtime</code>会自动为goroutine分配。</p>
<p>Goroutine特点：</p>
<ul>
<li>占用内存更小（几kb）</li>
<li>调度更灵活(runtime调度)</li>
</ul>
<h5 id="5-被废弃的goroutine调度器"><a href="#5-被废弃的goroutine调度器" class="headerlink" title="(5)被废弃的goroutine调度器"></a>(5)被废弃的goroutine调度器</h5><p>​    好了，既然我们知道了协程和线程的关系，那么最关键的一点就是调度协程的调度器的实现了。</p>
<p>Go目前使用的调度器是2012年重新设计的，因为之前的调度器性能存在问题，所以使用4年就被废弃了，那么我们先来分析一下被废弃的调度器是如何运作的？</p>
<blockquote>
<p>大部分文章都是会用G来表示Goroutine，用M来表示线程，那么我们也会用这种表达的对应关系。</p>
</blockquote>
<p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/13-gm.png"></p>
<p>下面我们来看看被废弃的golang调度器是如何实现的？</p>
<p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/14-old%E8%B0%83%E5%BA%A6%E5%99%A8.png"></p>
<p>M想要执行、放回G都必须访问全局G队列，并且M有多个，即多线程访问同一资源需要加锁进行保证互斥&#x2F;同步，所以全局G队列是有互斥锁进行保护的。</p>
<p>老调度器有几个缺点：</p>
<ol>
<li>创建、销毁、调度G都需要每个M获取锁，这就形成了<strong>激烈的锁竞争</strong>。</li>
<li>M转移G会造成<strong>延迟和额外的系统负载</strong>。比如当G中包含创建新协程的时候，M创建了G’，为了继续执行G，需要把G’交给M’执行，也造成了<strong>很差的局部性</strong>，因为G’和G是相关的，最好放在M上执行，而不是其他M’。</li>
<li>系统调用(CPU在M之间的切换)导致频繁的线程阻塞和取消阻塞操作增加了系统开销。</li>
</ol>
<h4 id="二、Goroutine调度器的GMP模型的设计思想"><a href="#二、Goroutine调度器的GMP模型的设计思想" class="headerlink" title="二、Goroutine调度器的GMP模型的设计思想"></a>二、Goroutine调度器的GMP模型的设计思想</h4><p>面对之前调度器的问题，Go设计了新的调度器。</p>
<p>在新调度器中，除了M(thread)和G(goroutine)，又引进了P(Processor)。</p>
<p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/15-gmp.png"></p>
<p><strong>Processor，它包含了运行goroutine的资源</strong>，如果线程想运行goroutine，必须先获取P，P中还包含了可运行的G队列。</p>
<h5 id="1-GMP模型"><a href="#1-GMP模型" class="headerlink" title="(1)GMP模型"></a>(1)GMP模型</h5><p>在Go中，<strong>线程是运行goroutine的实体，调度器的功能是把可运行的goroutine分配到工作线程上</strong>。</p>
<p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/16-GMP-%E8%B0%83%E5%BA%A6.png"></p>
<ol>
<li><strong>全局队列</strong>（Global Queue）：存放等待运行的G。</li>
<li><strong>P的本地队列</strong>：同全局队列类似，存放的也是等待运行的G，存的数量有限，不超过256个。新建G’时，G’优先加入到P的本地队列，如果队列满了，则会把本地队列中一半的G移动到全局队列。</li>
<li><strong>P列表</strong>：所有的P都在程序启动时创建，并保存在数组中，最多有<code>GOMAXPROCS</code>(可配置)个。</li>
<li><strong>M</strong>：线程想运行任务就得获取P，从P的本地队列获取G，P队列为空时，M也会尝试从全局队列<strong>拿</strong>一批G放到P的本地队列，或从其他P的本地队列<strong>偷</strong>一半放到自己P的本地队列。M运行G，G执行之后，M会从P获取下一个G，不断重复下去。</li>
</ol>
<p><strong>Goroutine调度器和OS调度器是通过M结合起来的，每个M都代表了1个内核线程，OS调度器负责把内核线程分配到CPU的核上执行</strong>。</p>
<blockquote>
<h3 id="有关P和M的个数问题"><a href="#有关P和M的个数问题" class="headerlink" title="有关P和M的个数问题"></a>有关P和M的个数问题</h3></blockquote>
<p>1、P的数量：</p>
<ul>
<li>由启动时环境变量<code>$GOMAXPROCS</code>或者是由<code>runtime</code>的方法<code>GOMAXPROCS()</code>决定。这意味着在程序执行的任意时刻都只有<code>$GOMAXPROCS</code>个goroutine在同时运行。</li>
</ul>
<p>2、M的数量:</p>
<ul>
<li>go语言本身的限制：go程序启动时，会设置M的最大数量，默认10000.但是内核很难支持这么多的线程数，所以这个限制可以忽略。</li>
<li>runtime&#x2F;debug中的SetMaxThreads函数，设置M的最大数量</li>
<li>一个M阻塞了，会创建新的M。</li>
</ul>
<p>M与P的数量没有绝对关系，一个M阻塞，P就会去创建或者切换另一个M，所以，即使P的默认数量是1，也有可能会创建很多个M出来。</p>
<blockquote>
<h3 id="P和M何时会被创建"><a href="#P和M何时会被创建" class="headerlink" title="P和M何时会被创建"></a>P和M何时会被创建</h3></blockquote>
<p>1、P何时创建：在确定了P的最大数量n后，运行时系统会根据这个数量创建n个P。</p>
<p>2、M何时创建：没有足够的M来关联P并运行其中的可运行的G。比如所有的M此时都阻塞住了，而P中还有很多就绪任务，就会去寻找空闲的M，而没有空闲的，就会去创建新的M。</p>
<h5 id="2-调度器的设计策略"><a href="#2-调度器的设计策略" class="headerlink" title="(2)调度器的设计策略"></a>(2)调度器的设计策略</h5><p><strong>复用线程</strong>：避免频繁的创建、销毁线程，而是对线程的复用。</p>
<p>1）work stealing机制</p>
<p>​        当本线程无可运行的G时，尝试从其他线程绑定的P偷取G，而不是销毁线程。</p>
<p>2）hand off机制</p>
<p>​        当本线程因为G进行系统调用阻塞时，线程释放绑定的P，把P转移给其他空闲的线程执行。</p>
<p><strong>利用并行</strong>：<code>GOMAXPROCS</code>设置P的数量，最多有<code>GOMAXPROCS</code>个线程分布在多个CPU上同时运行。<code>GOMAXPROCS</code>也限制了并发的程度，比如<code>GOMAXPROCS = 核数/2</code>，则最多利用了一半的CPU核进行并行。</p>
<p><strong>抢占</strong>：在coroutine中要等待一个协程主动让出CPU才执行下一个协程，在Go中，一个goroutine最多占用CPU 10ms，防止其他goroutine被饿死，这就是goroutine不同于coroutine的一个地方。</p>
<p><strong>全局G队列</strong>：在新的调度器中依然有全局G队列，但功能已经被弱化了，当M执行work stealing从其他P偷不到G时，它可以从全局G队列获取G。</p>
<h5 id="3-go-func-调度流程"><a href="#3-go-func-调度流程" class="headerlink" title="(3) go func()  调度流程"></a>(3) go func()  调度流程</h5><p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/18-go-func%E8%B0%83%E5%BA%A6%E5%91%A8%E6%9C%9F.jpeg"></p>
<p>从上图我们可以分析出几个结论：</p>
<p>​    1、我们通过 go func()来创建一个goroutine；</p>
<p>​    2、有两个存储G的队列，一个是局部调度器P的本地队列、一个是全局G队列。新创建的G会先保存在P的本地队列中，如果P的本地队列已经满了就会保存在全局的队列中；</p>
<p>​    3、G只能运行在M中，一个M必须持有一个P，M与P是1：1的关系。M会从P的本地队列弹出一个可执行状态的G来执行，如果P的本地队列为空，就会想其他的MP组合偷取一个可执行的G来执行；</p>
<p>​    4、一个M调度G执行的过程是一个循环机制；</p>
<p>​    5、当M执行某一个G时候如果发生了syscall或则其余阻塞操作，M会阻塞，如果当前有一些G在执行，runtime会把这个线程M从P中摘除(detach)，然后再创建一个新的操作系统的线程(如果有空闲的线程可用就复用空闲线程)来服务于这个P；</p>
<p>​    6、当M系统调用结束时候，这个G会尝试获取一个空闲的P执行，并放入到这个P的本地队列。如果获取不到P，那么这个线程M变成休眠状态， 加入到空闲线程中，然后这个G会被放入全局队列中。</p>
<h5 id="4-调度器的生命周期"><a href="#4-调度器的生命周期" class="headerlink" title="(4)调度器的生命周期"></a>(4)调度器的生命周期</h5><p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/17-pic-go%E8%B0%83%E5%BA%A6%E5%99%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png"></p>
<p>特殊的M0和G0</p>
<p><strong>M0</strong></p>
<p><code>M0</code>是启动程序后的编号为0的主线程，这个M对应的实例会在全局变量runtime.m0中，不需要在heap上分配，M0负责执行初始化操作和启动第一个G， 在之后M0就和其他的M一样了。</p>
<p><strong>G0</strong></p>
<p><code>G0</code>是每次启动一个M都会第一个创建的 goroutine，G0仅用于负责调度的G，G0不指向任何可执行的函数, 每个M都会有一个自己的G0。在调度或系统调用时会使用G0的栈空间, 全局变量的G0是M0的G0。</p>
<p>我们来跟踪一段代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来我们来针对上面的代码对调度器里面的结构做一个分析。</p>
<p>也会经历如上图所示的过程：</p>
<ol>
<li>runtime创建最初的线程m0和goroutine g0，并把2者关联。</li>
<li>调度器初始化：初始化m0、栈、垃圾回收，以及创建和初始化由GOMAXPROCS个P构成的P列表。</li>
<li>示例代码中的main函数是<code>main.main</code>，<code>runtime</code>中也有1个main函数——<code>runtime.main</code>，代码经过编译后，<code>runtime.main</code>会调用<code>main.main</code>，程序启动时会为<code>runtime.main</code>创建goroutine，称它为main goroutine吧，然后把main goroutine加入到P的本地队列。</li>
<li>启动m0，m0已经绑定了P，会从P的本地队列获取G，获取到main goroutine。</li>
<li>G拥有栈，M根据G中的栈信息和调度信息设置运行环境</li>
<li>M运行G</li>
<li>G退出，再次回到M获取可运行的G，这样重复下去，直到<code>main.main</code>退出，<code>runtime.main</code>执行Defer和Panic处理，或调用<code>runtime.exit</code>退出程序。</li>
</ol>
<p>调度器的生命周期几乎占满了一个Go程序的一生，<code>runtime.main</code>的goroutine执行之前都是为调度器做准备工作，<code>runtime.main</code>的goroutine运行，才是调度器的真正开始，直到<code>runtime.main</code>结束而结束。</p>
<h5 id="5-可视化GMP编程"><a href="#5-可视化GMP编程" class="headerlink" title="(5)可视化GMP编程"></a>(5)可视化GMP编程</h5><p>有2种方式可以查看一个程序的GMP的数据。</p>
<p><strong>方式1：go tool trace</strong></p>
<p>trace记录了运行时的信息，能提供可视化的Web页面。</p>
<p>简单测试代码：main函数创建trace，trace会运行在单独的goroutine中，然后main打印”Hello World”退出。</p>
<blockquote>
<p>trace.go</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;runtime/trace&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建trace文件</span></span><br><span class="line">    f, err := os.Create(<span class="string">&quot;trace.out&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//启动trace goroutine</span></span><br><span class="line">    err = trace.Start(f)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> trace.Stop()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//main</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run trace.go </span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure>

<p>会得到一个<code>trace.out</code>文件，然后我们可以用一个工具打开，来分析这个文件。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">go</span> tool trace trace.out </span><br><span class="line"><span class="number">2020</span>/<span class="number">02</span>/<span class="number">23</span> <span class="number">10</span>:<span class="number">44</span>:<span class="number">11</span> Parsing trace...</span><br><span class="line"><span class="number">2020</span>/<span class="number">02</span>/<span class="number">23</span> <span class="number">10</span>:<span class="number">44</span>:<span class="number">11</span> Splitting trace...</span><br><span class="line"><span class="number">2020</span>/<span class="number">02</span>/<span class="number">23</span> <span class="number">10</span>:<span class="number">44</span>:<span class="number">11</span> Opening browser. Trace viewer is listening on http:<span class="comment">//127.0.0.1:33479</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们可以通过浏览器打开<code>http://127.0.0.1:33479</code>网址，点击<code>view trace</code> 能够看见可视化的调度流程。</p>
<p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/19-go-trace1.png"></p>
<p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/20-go-trace2.png"></p>
<p><strong>G信息</strong></p>
<p>点击Goroutines那一行可视化的数据条，我们会看到一些详细的信息。</p>
<p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/20-go-trace3.png"></p>
<pre><code>  一共有两个G在程序中，一个是特殊的G0，是每个M必须有的一个初始化的G，这个我们不必讨论。
</code></pre>
<p>其中G1应该就是main goroutine(执行main函数的协程)，在一段时间内处于可运行和运行的状态。</p>
<p><strong>M信息</strong></p>
<p>点击Threads那一行可视化的数据条，我们会看到一些详细的信息。</p>
<p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/22-go-trace4.png"></p>
<p>一共有两个M在程序中，一个是特殊的M0，用于初始化使用，这个我们不必讨论。</p>
<p><strong>P信息</strong></p>
<p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/23-go-trace5.png"></p>
<p>G1中调用了<code>main.main</code>，创建了<code>trace goroutine g18</code>。G1运行在P1上，G18运行在P0上。</p>
<p>这里有两个P，我们知道，一个P必须绑定一个M才能调度G。</p>
<p>我们在来看看上面的M信息。</p>
<p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/24-go-trace6.png"></p>
<p>我们会发现，确实G18在P0上被运行的时候，确实在Threads行多了一个M的数据，点击查看如下：</p>
<p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/25-go-trace7.png"></p>
<p>多了一个M2应该就是P0为了执行G18而动态创建的M2.</p>
<p><strong>方式2：Debug trace</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">        fmt.Println(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go build trace2.go</span><br></pre></td></tr></table></figure>

<p>通过Debug方式运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ GODEBUG=schedtrace=1000 ./trace2 </span><br><span class="line">SCHED 0ms: gomaxprocs=2 idleprocs=0 threads=4 spinningthreads=1 idlethreads=1 runqueue=0 [0 0]</span><br><span class="line">Hello World</span><br><span class="line">SCHED 1003ms: gomaxprocs=2 idleprocs=2 threads=4 spinningthreads=0 idlethreads=2 runqueue=0 [0 0]</span><br><span class="line">Hello World</span><br><span class="line">SCHED 2014ms: gomaxprocs=2 idleprocs=2 threads=4 spinningthreads=0 idlethreads=2 runqueue=0 [0 0]</span><br><span class="line">Hello World</span><br><span class="line">SCHED 3015ms: gomaxprocs=2 idleprocs=2 threads=4 spinningthreads=0 idlethreads=2 runqueue=0 [0 0]</span><br><span class="line">Hello World</span><br><span class="line">SCHED 4023ms: gomaxprocs=2 idleprocs=2 threads=4 spinningthreads=0 idlethreads=2 runqueue=0 [0 0]</span><br><span class="line">Hello World</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>SCHED</code>：调试信息输出标志字符串，代表本行是goroutine调度器的输出；</li>
<li><code>0ms</code>：即从程序启动到输出这行日志的时间；</li>
<li><code>gomaxprocs</code>: P的数量，本例有2个P, 因为默认的P的属性是和cpu核心数量默认一致，当然也可以通过GOMAXPROCS来设置；</li>
<li><code>idleprocs</code>: 处于idle状态的P的数量；通过gomaxprocs和idleprocs的差值，我们就可知道执行go代码的P的数量；</li>
<li>t<code>hreads: os threads/M</code>的数量，包含scheduler使用的m数量，加上runtime自用的类似sysmon这样的thread的数量；</li>
<li><code>spinningthreads</code>: 处于自旋状态的os thread数量；</li>
<li><code>idlethread</code>: 处于idle状态的os thread的数量；</li>
<li><code>runqueue=0</code>： Scheduler全局队列中G的数量；</li>
<li><code>[0 0]</code>: 分别为2个P的local queue中的G的数量。</li>
</ul>
<p>下一篇，我们来继续详细的分析GMP调度原理的一些场景问题。</p>
<h4 id="三、Go调度器调度场景过程全解析"><a href="#三、Go调度器调度场景过程全解析" class="headerlink" title="三、Go调度器调度场景过程全解析"></a>三、Go调度器调度场景过程全解析</h4><h5 id="1-场景1"><a href="#1-场景1" class="headerlink" title="(1)场景1"></a>(1)场景1</h5><p>P拥有G1，M1获取P后开始运行G1，G1使用<code>go func()</code>创建了G2，为了局部性G2优先加入到P1的本地队列。</p>
<p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/26-gmp%E5%9C%BA%E6%99%AF1.png"></p>
<hr>
<h5 id="2-场景2"><a href="#2-场景2" class="headerlink" title="(2)场景2"></a>(2)场景2</h5><p>G1运行完成后(函数：<code>goexit</code>)，M上运行的goroutine切换为G0，G0负责调度时协程的切换（函数：<code>schedule</code>）。从P的本地队列取G2，从G0切换到G2，并开始运行G2(函数：<code>execute</code>)。实现了线程M1的复用。</p>
<p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/27-gmp%E5%9C%BA%E6%99%AF2.png"></p>
<hr>
<h5 id="3-场景3"><a href="#3-场景3" class="headerlink" title="(3)场景3"></a>(3)场景3</h5><p>假设每个P的本地队列只能存3个G。G2要创建了6个G，前3个G（G3, G4, G5）已经加入p1的本地队列，p1本地队列满了。</p>
<p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/28-gmp%E5%9C%BA%E6%99%AF3.png"></p>
<hr>
<h5 id="4-场景4"><a href="#4-场景4" class="headerlink" title="(4)场景4"></a>(4)场景4</h5><p>G2在创建G7的时候，发现P1的本地队列已满，需要执行<strong>负载均衡</strong>(把P1中本地队列中前一半的G，还有新创建G<strong>转移</strong>到全局队列)</p>
<blockquote>
<p>（实现中并不一定是新的G，如果G是G2之后就执行的，会被保存在本地队列，利用某个老的G替换新G加入全局队列）</p>
</blockquote>
<p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/29-gmp%E5%9C%BA%E6%99%AF4.png"></p>
<p>这些G被转移到全局队列时，会被打乱顺序。所以G3,G4,G7被转移到全局队列。</p>
<hr>
<h5 id="5-场景5"><a href="#5-场景5" class="headerlink" title="(5)场景5"></a>(5)场景5</h5><p>G2创建G8时，P1的本地队列未满，所以G8会被加入到P1的本地队列。</p>
<p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/30-gmp%E5%9C%BA%E6%99%AF5.png"></p>
<p>G8加入到P1点本地队列的原因还是因为P1此时在与M1绑定，而G2此时是M1在执行。所以G2创建的新的G会优先放置到自己的M绑定的P上。</p>
<hr>
<h5 id="6-场景6"><a href="#6-场景6" class="headerlink" title="(6)场景6"></a>(6)场景6</h5><p>规定：<strong>在创建G时，运行的G会尝试唤醒其他空闲的P和M组合去执行</strong>。</p>
<p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/31-gmp%E5%9C%BA%E6%99%AF6.png"></p>
<p>假定G2唤醒了M2，M2绑定了P2，并运行G0，但P2本地队列没有G，M2此时为自旋线程<strong>（没有G但为运行状态的线程，不断寻找G）</strong>。</p>
<hr>
<h5 id="7-场景7"><a href="#7-场景7" class="headerlink" title="(7)场景7"></a>(7)场景7</h5><p>M2尝试从全局队列(简称“GQ”)取一批G放到P2的本地队列（函数：<code>findrunnable()</code>）。M2从全局队列取的G数量符合下面的公式：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">n = min(<span class="built_in">len</span>(GQ)/GOMAXPROCS + <span class="number">1</span>, <span class="built_in">len</span>(GQ/<span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<p>至少从全局队列取1个g，但每次不要从全局队列移动太多的g到p本地队列，给其他p留点。这是<strong>从全局队列到P本地队列的负载均衡</strong>。</p>
<p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/32-gmp%E5%9C%BA%E6%99%AF7.001.jpeg"></p>
<p>假定我们场景中一共有4个P（GOMAXPROCS设置为4，那么我们允许最多就能用4个P来供M使用）。所以M2只从能从全局队列取1个G（即G3）移动P2本地队列，然后完成从G0到G3的切换，运行G3。</p>
<hr>
<h5 id="8-场景8"><a href="#8-场景8" class="headerlink" title="(8)场景8"></a>(8)场景8</h5><p>假设G2一直在M1上运行，经过2轮后，M2已经把G7、G4从全局队列获取到了P2的本地队列并完成运行，全局队列和P2的本地队列都空了,如场景8图的左半部分。</p>
<p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/33-gmp%E5%9C%BA%E6%99%AF8.png"></p>
<p><strong>全局队列已经没有G，那m就要执行work stealing(偷取)：从其他有G的P哪里偷取一半G过来，放到自己的P本地队列</strong>。P2从P1的本地队列尾部取一半的G，本例中一半则只有1个G8，放到P2的本地队列并执行。</p>
<hr>
<h5 id="9-场景9"><a href="#9-场景9" class="headerlink" title="(9)场景9"></a>(9)场景9</h5><p>G1本地队列G5、G6已经被其他M偷走并运行完成，当前M1和M2分别在运行G2和G8，M3和M4没有goroutine可以运行，M3和M4处于<strong>自旋状态</strong>，它们不断寻找goroutine。</p>
<p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/34-gmp%E5%9C%BA%E6%99%AF9.png"></p>
<p>为什么要让m3和m4自旋，自旋本质是在运行，线程在运行却没有执行G，就变成了浪费CPU.  为什么不销毁现场，来节约CPU资源。因为创建和销毁CPU也会浪费时间，我们<strong>希望当有新goroutine创建时，立刻能有M运行它</strong>，如果销毁再新建就增加了时延，降低了效率。当然也考虑了过多的自旋线程是浪费CPU，所以系统中最多有<code>GOMAXPROCS</code>个自旋的线程(当前例子中的<code>GOMAXPROCS</code>&#x3D;4，所以一共4个P)，多余的没事做线程会让他们休眠。</p>
<hr>
<h5 id="10-场景10"><a href="#10-场景10" class="headerlink" title="(10)场景10"></a>(10)场景10</h5><p>​        假定当前除了M3和M4为自旋线程，还有M5和M6为空闲的线程(没有得到P的绑定，注意我们这里最多就只能够存在4个P，所以P的数量应该永远是M&gt;&#x3D;P, 大部分都是M在抢占需要运行的P)，G8创建了G9，G8进行了<strong>阻塞的系统调用</strong>，M2和P2立即解绑，P2会执行以下判断：如果P2本地队列有G、全局队列有G或有空闲的M，P2都会立马唤醒1个M和它绑定，否则P2则会加入到空闲P列表，等待M来获取可用的p。本场景中，P2本地队列有G9，可以和其他空闲的线程M5绑定。</p>
<p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/35-gmp%E5%9C%BA%E6%99%AF10.png"></p>
<h5 id="11-场景11"><a href="#11-场景11" class="headerlink" title="(11)场景11"></a>(11)场景11</h5><p>G8创建了G9，假如G8进行了<strong>非阻塞系统调用</strong>。</p>
<p><img src="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/36-gmp%E5%9C%BA%E6%99%AF11.png"></p>
<p>​    M2和P2会解绑，但M2会记住P2，然后G8和M2进入<strong>系统调用</strong>状态。当G8和M2退出系统调用时，会尝试获取P2，如果无法获取，则获取空闲的P，如果依然没有，G8会被记为可运行状态，并加入到全局队列,M2因为没有P的绑定而变成休眠状态(长时间休眠等待GC回收销毁)。</p>
<hr>
<h4 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h4><p>总结，Go调度器很轻量也很简单，足以撑起goroutine的调度工作，并且让Go具有了原生（强大）并发的能力。<strong>Go调度本质是把大量的goroutine分配到少量线程上去执行，并利用多核并行，实现更强大的并发。</strong></p>
<hr>
<h4 id="五、思维导图笔记"><a href="#五、思维导图笔记" class="headerlink" title="五、思维导图笔记"></a>五、思维导图笔记</h4><p><a href="/images/GO/Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/Golang%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E4%B8%8EGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3.pdf">Golang协程调度器原理与GMP设计思想.pdf</a></p>
<div class="note default"><p>原文链接：<a href="https://github.com/aceld/golang/blob/main/2%E3%80%81Golang%E7%9A%84%E5%8D%8F%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8%E5%8E%9F%E7%90%86%E5%8F%8AGMP%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3%EF%BC%9F.md">Golang的协程调度器原理及GMP设计思想？</a></p>
</div>
]]></content>
      <categories>
        <category>GO</category>
      </categories>
      <tags>
        <tag>GO</tag>
        <tag>GMP</tag>
      </tags>
  </entry>
</search>
